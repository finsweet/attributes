{
  "version": 3,
  "sources": ["../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/extractNumberSuffix.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/setFormFieldValue.js", "../../node_modules/@finsweet/ts-utils/dist/type-guards/isFormField.js", "../../global/factory/selectors.ts", "../../global/constants/attributes.ts", "../../global/factory/assess.ts", "../../global/factory/init.ts", "src/constants.ts", "../../global/helpers/instances.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "export const simulateEvent = (target, events) => {\r\n    if (!Array.isArray(events))\r\n        events = [events];\r\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\r\n    return eventsSuccess.every((success) => success);\r\n};\r\n", "export const extractNumberSuffix = (string) => {\r\n    const splitValue = string.split('-');\r\n    const suffix = parseInt(splitValue[splitValue.length - 1]);\r\n    if (!isNaN(suffix))\r\n        return suffix;\r\n};\r\n", "import { simulateEvent } from '.';\r\nexport const setFormFieldValue = (element, value) => {\r\n    const { type } = element;\r\n    if (typeof value === 'boolean') {\r\n        if (!(element instanceof HTMLInputElement) ||\r\n            (type !== 'radio' && type !== 'checkbox') ||\r\n            (type === 'checkbox' && value === false) ||\r\n            value === element.checked)\r\n            return;\r\n        element.checked = value;\r\n    }\r\n    else {\r\n        if (type === 'radio' || type === 'checkbox' || element.value === value)\r\n            return;\r\n        element.value = value;\r\n    }\r\n    simulateEvent(element, ['click', 'input', 'change']);\r\n};\r\n", "export const isFormField = (element) => element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\n\n/**\n * Constants\n */\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\n\nexport const ATTRIBUTES = {\n  /**\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\n   */\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\n\n  /**\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\n   */\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\n\n  /**\n   * Defines the source of an attribute script.\n   */\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\n\n  /**\n   * Defines a developer script that is not imported from JsDelivr.\n   */\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n", "import { Debug } from '@finsweet/ts-utils';\n\nimport { ATTRIBUTES } from '../constants/attributes';\nimport { GlobalAttributeParams } from '../types/global';\n\n/**\n * Checks the global params of the Attribute `<script>`.\n * @param script The `<script>` element.\n * @returns The {@link GlobalAttributeParams}.\n */\n\nexport const assessScript = (): GlobalAttributeParams => {\n  const { currentScript } = document;\n  const { preventLoad, debugMode } = ATTRIBUTES;\n\n  // Check if the Attribute should not be automatically loaded\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\n\n  // Check if Debug Mode is activated\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\n\n  return { preventsLoad };\n};\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  fsAttributes.push(...existingCallbacks);\r\n};\r\n", "import { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'mirrorinput';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const TRIGGER_ELEMENT_KEY = 'trigger';\r\nexport const TARGET_ELEMENT_KEY = 'target';\r\n\r\nexport const ATTRIBUTES = {\r\n  /**\r\n   * Defines an element that will act as trigger or target of the event mirroring.\r\n   */\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines the element as the trigger of the event.\r\n       */\r\n      trigger: TRIGGER_ELEMENT_KEY,\r\n\r\n      /**\r\n       * Defines the element as the target to mirror the fired event.\r\n       */\r\n      target: generateDynamicAttibuteValue(TARGET_ELEMENT_KEY),\r\n    },\r\n  },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "import { extractNumberSuffix } from '@finsweet/ts-utils';\n\n/**\n * Gets the instance index of an element attribute.\n * @example An element with the `fs-copyclip-element=\"trigger-1\"` attribute will return `1` as the instance index.\n * @param element The element to extract the instance index.\n * @param attributeKey The attribute key that holds the instance index.\n */\nexport const getInstanceIndex = (element: Element, attributeKey: string): number | undefined => {\n  const elementValue = element.getAttribute(attributeKey);\n  const instanceIndex = elementValue ? extractNumberSuffix(elementValue) : undefined;\n\n  return instanceIndex;\n};\n", "import { isFormField, setFormFieldValue } from '@finsweet/ts-utils';\r\n\r\nimport { getInstanceIndex } from '$global/helpers/instances';\r\n\r\nimport { ATTRIBUTE, ATTRIBUTES, getSelector, queryElement } from './constants';\r\n\r\n/**\r\n * Inits click events mirroring.\r\n */\r\nexport const init = (): void => {\r\n  window.addEventListener('input', ({ target }) => {\r\n    if (!(target instanceof Element)) return;\r\n\r\n    const mirrorTrigger = target.closest(getSelector('element', 'trigger', { operator: 'prefixed' }));\r\n    if (!isFormField(mirrorTrigger)) return;\r\n\r\n    // Get the instance index\r\n    const instanceIndex = getInstanceIndex(mirrorTrigger, ATTRIBUTES.element.key);\r\n\r\n    const mirrorTarget = queryElement('target', { instanceIndex });\r\n    if (!isFormField(mirrorTarget) || mirrorTrigger.type !== mirrorTarget.type) return;\r\n\r\n    // If must update the `checked` property\r\n    if (\r\n      mirrorTarget instanceof HTMLInputElement &&\r\n      (mirrorTarget.type === 'checkbox' || mirrorTarget.type === 'radio') &&\r\n      (mirrorTrigger as HTMLInputElement).checked !== mirrorTarget.checked\r\n    ) {\r\n      setFormFieldValue(mirrorTarget, !mirrorTarget.checked);\r\n\r\n      return;\r\n    }\r\n\r\n    // If must update the `value` property\r\n    setFormFieldValue(mirrorTarget, mirrorTrigger.value);\r\n  });\r\n\r\n  window.fsAttributes[ATTRIBUTE].resolve?.(undefined);\r\n};\r\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\n\r\nimport { version } from '../package.json';\r\nimport { ATTRIBUTE } from './constants';\r\nimport { init } from './init';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\n\r\nwindow.fsAttributes[ATTRIBUTE] ||= {};\r\n\r\nconst { preventsLoad } = assessScript();\r\nconst attribute = window.fsAttributes[ATTRIBUTE];\r\n\r\nattribute.version = version;\r\n\r\nif (preventsLoad) attribute.init = init;\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": ";;;;;;;;;AACO,oBAAY;AAAA,WAER,iBAAiB;AACpB,WAAK,kBAAkB;AAAA;AAAA,WAEpB,MAAM,MAAM,MAAM;AACrB,UAAI,KAAK;AACL,eAAO,MAAM;AACjB,UAAI,SAAS;AACT,cAAM,IAAI,MAAM;AAAA;AAAA;AARjB,gBADJ,OACI,mBAAkB;;;ACFtB,MAAM,gBAAgB,CAAC,QAAQ,WAAW;AAC7C,QAAI,CAAC,MAAM,QAAQ;AACf,eAAS,CAAC;AACd,UAAM,gBAAgB,OAAO,IAAI,CAAC,UAAU,OAAO,cAAc,IAAI,MAAM,OAAO,EAAE,SAAS;AAC7F,WAAO,cAAc,MAAM,CAAC,YAAY;AAAA;;;ACJrC,MAAM,sBAAsB,CAAC,WAAW;AAC3C,UAAM,aAAa,OAAO,MAAM;AAChC,UAAM,SAAS,SAAS,WAAW,WAAW,SAAS;AACvD,QAAI,CAAC,MAAM;AACP,aAAO;AAAA;;;ACHR,MAAM,oBAAoB,CAAC,SAAS,UAAU;AACjD,UAAM,EAAE,SAAS;AACjB,QAAI,OAAO,UAAU,WAAW;AAC5B,UAAI,CAAE,oBAAmB,qBACpB,SAAS,WAAW,SAAS,cAC7B,SAAS,cAAc,UAAU,SAClC,UAAU,QAAQ;AAClB;AACJ,cAAQ,UAAU;AAAA,WAEjB;AACD,UAAI,SAAS,WAAW,SAAS,cAAc,QAAQ,UAAU;AAC7D;AACJ,cAAQ,QAAQ;AAAA;AAEpB,kBAAc,SAAS,CAAC,SAAS,SAAS;AAAA;;;AChBvC,MAAM,cAAc,CAAC,YAAY,mBAAmB,oBAAoB,mBAAmB,qBAAqB,mBAAmB;;;ACOnI,MAAM,+BAA+B,CAAC,UAAkB;AAC7D,WAAO,CAAC,UAA2B,GAAG,QAAQ,QAAQ,IAAI,UAAU;AAAA;AAO/D,MAAM,oBAAoB,CAU/B,eACG;AASH,UAAM,eAAc,CAClB,MACA,UACA,WAQW;AACX,YAAM,aAAY,WAAW;AAE7B,YAAM,EAAE,KAAK,cAAc,WAAW;AACtC,UAAI;AAEJ,UAAI,CAAC;AAAU,eAAO,IAAI;AAE1B,YAAM,QAAQ,SAAS;AAEvB,UAAI,OAAO,UAAU;AAAU,yBAAiB;AAAA;AAC3C,yBAAiB,MAAM,UAAU,mBAAmB,SAAS,OAAO,gBAAgB;AAEzF,UAAI,CAAC,QAAQ;AAAU,eAAO,IAAI,iBAAiB;AAEnD,cAAQ,OAAO;AAAA,aACR;AACH,iBAAO,IAAI,kBAAkB;AAAA,aAC1B;AACH,iBAAO,IAAI,kBAAkB;AAAA,aAC1B;AACH,iBAAO,IAAI,kBAAkB;AAAA;AAAA;AAWnC,UAAM,gBAAe,CAInB,YACA,WAQG;AACH,YAAM,WAAW,aAAY,WAAW,YAAY;AAEpD,aAAQ,SAAQ,SAAS,UAAU,cAAiB;AAAA;AAGtD,WAAO,CAAC,cAAa;AAAA;;;AC5FhB,MAAM,oBAAoB;AAE1B,MAAM,aAAa;AAAA,IAIxB,aAAa,EAAE,KAAK,GAAG;AAAA,IAKvB,WAAW,EAAE,KAAK,GAAG;AAAA,IAKrB,KAAK,EAAE,KAAK,OAAO,QAAQ,EAAE,UAAU;AAAA,IAKvC,KAAK,EAAE,KAAK,GAAG;AAAA;AAGV,MAAM,CAAC,aAAa,gBAAgB,kBAAkB;;;AClBtD,MAAM,eAAe,MAA6B;AACvD,UAAM,EAAE,kBAAkB;AAC1B,UAAM,EAAE,aAAa,cAAc;AAGnC,UAAM,gBAAe,OAAO,eAAe,aAAa,YAAY,SAAS;AAG7E,QAAI,OAAO,eAAe,aAAa,UAAU,SAAS;AAAU,YAAM;AAE1E,WAAO,EAAE;AAAA;;;ACfJ,MAAM,iBAAiB,MAAM;AAClC,QAAI,OAAO,gBAAgB,CAAC,MAAM,QAAQ,OAAO;AAAe;AAEhE,UAAM,eAAe;AAAA,MACnB,KAAK;AAAA,MACL,QAAQ,MAAM;AACZ,mBAAW,CAAC,eAAe,aAAa;AAAM,eAAK,gBAAgB,SAAS,KAAK;AAAA;AAAA;AAIrF,qBAAiB;AACjB,yBAAqB;AAErB,WAAO,eAAe;AACtB,WAAO,eAAe,OAAO;AAAA;AAO/B,MAAM,mBAAmB,CAAC,iBAA+B;AACvD,UAAM,cAAc,YAAY,OAAO,YAAY,EAAE,UAAU;AAC/D,UAAM,cAAc,YAAY;AAChC,UAAM,UAAU,CAAC,GAAG,SAAS,iBAAoC,SAAS,sBAAsB;AAEhG,UAAM,aAAa,QAAQ,OAAiB,CAAC,KAAK,WAAW;AAC3D,YAAM,gBAAgB,OAAO,aAAa,WAAW,IAAI,QAAQ,OAAO,IAAI,MAAM,yBAAyB;AAC3G,UAAI,iBAAiB,CAAC,IAAI,SAAS;AAAgB,YAAI,KAAK;AAE5D,aAAO;AAAA,OACN;AAEH,eAAW,iBAAiB,YAAY;AACtC,mBAAa,iBAAiB;AAC9B,YAAM,aAAY,aAAa;AAE/B,iBAAU,UAAU,IAAI,QAAQ,CAAC,YAAY;AAC3C,mBAAU,UAAU,CAAC,UAAmB;AACtC,kBAAQ;AACR,iBAAO,WAAU;AAAA;AAAA;AAAA;AAAA;AAUzB,MAAM,uBAAuB,CAAC,iBAA+B;AAC3D,UAAM,oBAAoB,MAAM,QAAQ,OAAO,gBAAiB,OAAO,eAA0C;AACjH,iBAAa,KAAK,GAAG;AAAA;;;;;;ACxDhB,MAAM,YAAY;AAEzB,MAAM,qBAAoB,MAAM;AAEzB,MAAM,sBAAsB;AAC5B,MAAM,qBAAqB;AAE3B,MAAM,cAAa;AAAA,IAIxB,SAAS;AAAA,MACP,KAAK,GAAG;AAAA,MACR,QAAQ;AAAA,QAIN,SAAS;AAAA,QAKT,QAAQ,6BAA6B;AAAA;AAAA;AAAA;AAKpC,MAAM,CAAC,cAAa,iBAAgB,kBAAkB;;;ACrBtD,MAAM,mBAAmB,CAAC,SAAkB,iBAA6C;AAC9F,UAAM,eAAe,QAAQ,aAAa;AAC1C,UAAM,gBAAgB,eAAe,oBAAoB,gBAAgB;AAEzE,WAAO;AAAA;;;ACHF,MAAM,OAAO,MAAY;AAC9B,WAAO,iBAAiB,SAAS,CAAC,EAAE,aAAa;AAC/C,UAAI,CAAE,mBAAkB;AAAU;AAElC,YAAM,gBAAgB,OAAO,QAAQ,aAAY,WAAW,WAAW,EAAE,UAAU;AACnF,UAAI,CAAC,YAAY;AAAgB;AAGjC,YAAM,gBAAgB,iBAAiB,eAAe,YAAW,QAAQ;AAEzE,YAAM,eAAe,cAAa,UAAU,EAAE;AAC9C,UAAI,CAAC,YAAY,iBAAiB,cAAc,SAAS,aAAa;AAAM;AAG5E,UACE,wBAAwB,oBACvB,cAAa,SAAS,cAAc,aAAa,SAAS,YAC1D,cAAmC,YAAY,aAAa,SAC7D;AACA,0BAAkB,cAAc,CAAC,aAAa;AAE9C;AAAA;AAIF,wBAAkB,cAAc,cAAc;AAAA;AAGhD,WAAO,aAAa,WAAW,UAAU;AAAA;;;AC3B3C;AAEA,SAAO,aAAa,eAAe;AAEnC,MAAM,EAAE,iBAAiB;AACzB,MAAM,YAAY,OAAO,aAAa;AAEtC,YAAU,UAAU;AAEpB,MAAI;AAAc,cAAU,OAAO;AAAA,OAC9B;AACH,WAAO,YAAY;AACnB,WAAO,QAAQ,KAAK;AAAA;",
  "names": []
}
