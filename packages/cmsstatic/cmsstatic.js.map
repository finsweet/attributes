{
  "version": 3,
  "sources": ["../../global/constants/attributes.ts", "../../node_modules/.pnpm/@finsweet+ts-utils@0.33.1/node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../global/factory/selectors.ts", "../../global/factory/constants.ts", "../../global/factory/assess.ts", "../../global/import/support.ts", "../../global/factory/init.ts", "../cmscore/src/utils/import.ts", "src/utils/constants.ts", "src/factory.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["export const ATTRIBUTES_PREFIX = 'fs-attributes';\n\nexport const CMS_STATIC_ATTRIBUTE = 'cmsstatic';\n", "// Constants\r\nconst alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from './types';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  type AttributesValues = Attributes['element']['values'];\n  type AttributesValuesKeys = keyof AttributesValues;\n  type AttributeStaticParams = {\n    operator?: AttributeOperator;\n    caseInsensitive?: boolean;\n  };\n  type AttributeDynamicParams = AttributeStaticParams & {\n    instanceIndex?: number;\n    caseInsensitive?: boolean;\n  };\n\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? AttributeStaticParams\n      : AttributeDynamicParams\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    const caseInsensitive = params && 'caseInsensitive' in params && params.caseInsensitive ? 'i' : '';\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"${caseInsensitive}]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"${caseInsensitive}]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"${caseInsensitive}]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"${caseInsensitive}]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.instanceIndex Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   * @param params.all determines if array of matched elements should be returned.\n   */\n  function queryElement<E extends Element = Element, ElementKey extends AttributesValuesKeys = AttributesValuesKeys>(\n    elementKey: ElementKey,\n    params?: {\n      scope?: ParentNode;\n      all?: false;\n    } & (AttributesValues[ElementKey] extends AttributeStaticValue ? AttributeStaticParams : AttributeDynamicParams)\n  ): E | null;\n  function queryElement<E extends Element = Element, ElementKey extends AttributesValuesKeys = AttributesValuesKeys>(\n    elementKey: ElementKey,\n    params?: {\n      scope?: ParentNode;\n      all: true;\n    } & (AttributesValues[ElementKey] extends AttributeStaticValue ? AttributeStaticParams : AttributeDynamicParams)\n  ): NodeListOf<E>;\n  function queryElement<E extends Element = Element, ElementKey extends AttributesValuesKeys = AttributesValuesKeys>(\n    elementKey: ElementKey,\n    params?: {\n      scope?: ParentNode;\n      all?: boolean;\n    } & (AttributesValues[ElementKey] extends AttributeStaticValue ? AttributeStaticParams : AttributeDynamicParams)\n  ): NodeListOf<E> | E | null {\n    const selector = getSelector('element', elementKey, params);\n    const scope = params?.scope || document;\n\n    return params?.all ? scope.querySelectorAll<E>(selector) : scope.querySelector<E>(selector);\n  }\n\n  return [getSelector, queryElement] as const;\n};\n", "import { ATTRIBUTES_PREFIX } from '@global/constants/attributes';\n\nimport { generateSelectors } from './selectors';\n\n/**\n * Constants\n */\nexport const ATTRIBUTES = {\n  /**\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\n   */\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\n\n  /**\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\n   */\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\n\n  /**\n   * Defines the source of an attribute script.\n   */\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\n\n  /**\n   * Defines a developer script that is not imported from JsDelivr.\n   */\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n", "import { Debug } from '@finsweet/ts-utils';\n\nimport { ATTRIBUTES } from './constants';\nimport type { GlobalAttributeParams } from './types';\n\n/**\n * Checks the global params of the Attribute `<script>`.\n * @param script The `<script>` element.\n * @returns The {@link GlobalAttributeParams}.\n */\n\nexport const assessScript = (): GlobalAttributeParams => {\n  const { currentScript } = document;\n  const { preventLoad, debugMode } = ATTRIBUTES;\n\n  // Check if the Attribute should not be automatically loaded\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\n\n  // Check if Debug Mode is activated\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\n\n  return { preventsLoad };\n};\n", "import { ATTRIBUTES_PREFIX } from '@global/constants/attributes';\n\nconst ATTRIBUTES_SUPPORT_QUERY_PARAM = `${ATTRIBUTES_PREFIX}-support`;\nconst ATTRIBUTES_SUPPORT_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-support@1/support.js';\n\n/**\n * Imports the Attributes Support Wizard and mounts it on the page.\n * It stores the import as a Promise to ensure it isn't mounted more than once.\n *\n * @returns A promise that resolves to `true` if the app was successfuly loaded.\n */\nexport const importSupport = async () => {\n  const { fsAttributes, location } = window;\n  const { host, searchParams } = new URL(location.href);\n\n  if (!host.includes('webflow.io') || !searchParams.has(ATTRIBUTES_SUPPORT_QUERY_PARAM)) return false;\n\n  if (fsAttributes.supportImport) return fsAttributes.supportImport;\n\n  try {\n    fsAttributes.supportImport = new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n\n      script.src = ATTRIBUTES_SUPPORT_SOURCE;\n      script.onload = () => resolve(true);\n      script.onerror = reject;\n\n      document.head.append(script);\n    });\n  } catch (error) {\n    return false;\n  }\n\n  return fsAttributes.supportImport;\n};\n", "import { importSupport } from '@global/import';\n\nimport { ATTRIBUTES, getSelector } from './constants';\n\ntype FsAttributes = typeof window.fsAttributes;\n\n/**\n * Makes sure the window object is defined.\n */\nexport const initAttributes = () => {\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\n\n  const fsAttributes = {\n    cms: {},\n    push(...args) {\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\n    },\n  } as FsAttributes;\n\n  initLoadPromises(fsAttributes);\n  runExistingCallbacks(fsAttributes);\n\n  window.fsAttributes = fsAttributes;\n  window.FsAttributes = window.fsAttributes;\n\n  importSupport();\n};\n\n/**\n * Sets a loading promise for each attribute package.\n * @param fsAttributes The {@link FsAttributes} object.\n */\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\n  const devSelector = getSelector('dev');\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\n\n  const attributes = scripts.reduce<string[]>((acc, script) => {\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\n\n    return acc;\n  }, []);\n\n  for (const attributeName of attributes) {\n    fsAttributes[attributeName] = {};\n    const attribute = fsAttributes[attributeName];\n\n    attribute.loading = new Promise((resolve) => {\n      attribute.resolve = (value: unknown) => {\n        resolve(value);\n        delete attribute.resolve;\n      };\n    });\n  }\n};\n\n/**\n * Runs the existing callbacks in the `window.fsAttributes` object.\n * @param fsAttributes The {@link FsAttributes} object.\n */\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\n  const existingCallbacks = Array.isArray(window.fsAttributes)\n    ? (window.fsAttributes as Parameters<FsAttributes['push']>)\n    : [];\n  fsAttributes.push(...existingCallbacks);\n};\n", "import { Debug } from '@finsweet/ts-utils';\n\nimport { name } from '../../package.json';\nimport type { CMSCoreImport } from './types';\n\n//const CMS_CORE_SOURCE = `https://cdn.jsdelivr.net/npm/${name}@1/cmscore.js`;\nconst CMS_CORE_SOURCE = 'http://localhost:3000/packages/cmscore/cmscore.js';\n\n/**\n * Dynamically imports the `cms/cmscore` package.\n * After the first import, it stores the response in {@link window.fsAttributes.cms.coreImport}.\n *\n * Once the import has finished, it also stores the `cmscore` version so other `cms` packages can access it.\n *\n * @returns A `Promise` of the package response.\n */\nexport const importCMSCore = async (): CMSCoreImport => {\n  const { fsAttributes } = window;\n\n  fsAttributes.cms ||= {};\n  const { cms } = fsAttributes;\n\n  if (cms.coreImport) return cms.coreImport;\n\n  try {\n    const cmsCoreImport: CMSCoreImport = import(CMS_CORE_SOURCE);\n\n    cms.coreImport = cmsCoreImport;\n\n    cmsCoreImport.then((cmsCore) => {\n      if (cmsCore) cms.coreVersion ||= cmsCore.version;\n    });\n\n    return cmsCoreImport;\n  } catch (error) {\n    Debug.alert(`${error}`, 'error');\n    return;\n  }\n};\n", "import { CMS_STATIC_ATTRIBUTE } from '@global/constants/attributes';\nimport { generateSelectors, generateDynamicAttibuteValue } from '@global/factory';\n\nconst ATTRIBUTES_PREFIX = `fs-${CMS_STATIC_ATTRIBUTE}`;\n\nexport const LIST_ELEMENT_KEY = 'list';\nexport const STATIC_ITEM_ELEMENT_KEY = 'static-item';\nexport const ORDER_SETTING_KEY = 'order';\n\nexport const ATTRIBUTES = {\n  element: {\n    key: `${ATTRIBUTES_PREFIX}-element`,\n    values: {\n      /**\n       * Defines a list to have a static element\n       */\n      list: generateDynamicAttibuteValue(LIST_ELEMENT_KEY),\n      /**\n       * Defines the static element\n       */\n      staticItem: generateDynamicAttibuteValue(STATIC_ITEM_ELEMENT_KEY),\n    },\n  },\n\n  /**\n   * Defines the order of static element in list.\n   */\n  order: {\n    key: `${ATTRIBUTES_PREFIX}-${ORDER_SETTING_KEY}`,\n  },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n", "import type { CMSList } from 'packages/cmscore/src';\n\nimport { ATTRIBUTES, queryElement } from './utils/constants';\n\nexport async function initStaticInstance(listInstance: CMSList) {\n  const staticElements = [...queryElement<HTMLDivElement>('staticItem', { all: true })];\n\n  for (const staticElement of staticElements) {\n    const order = staticElement.getAttribute(ATTRIBUTES.order.key);\n\n    if (!order) {\n      continue;\n    }\n\n    const orderNumber = parseInt(order);\n\n    if (isNaN(orderNumber)) {\n      continue;\n    }\n\n    await listInstance.addStaticItems(staticElement, orderNumber);\n  }\n}\n", "import type { CMSList } from '@finsweet/attributes-cmscore';\nimport { importCMSCore } from '@finsweet/attributes-cmscore';\nimport { CMS_STATIC_ATTRIBUTE } from 'global/constants/attributes';\n\nimport { initStaticInstance } from './factory';\nimport { getSelector } from './utils/constants';\n\n/**\n * Inits the attribute.\n */\nexport const init = async (): Promise<CMSList[]> => {\n  const cmsCore = await importCMSCore();\n  if (!cmsCore) return [];\n\n  // Create the list instances\n  const listInstances = cmsCore.createCMSListInstances([getSelector('element', 'list', { operator: 'prefixed' })]);\n\n  // Init the modes\n  await Promise.all(listInstances.map(initStaticInstance));\n\n  window.fsAttributes[CMS_STATIC_ATTRIBUTE].resolve?.(listInstances);\n\n  return listInstances;\n};\n", "import { CMS_STATIC_ATTRIBUTE } from '@global/constants/attributes';\nimport { assessScript, initAttributes } from '@global/factory';\n\nimport { version } from '../package.json';\nimport { init } from './init';\n\n/**\n * Init\n */\ninitAttributes();\n\nwindow.fsAttributes[CMS_STATIC_ATTRIBUTE] ||= {};\n\nconst { preventsLoad } = assessScript();\nconst attribute = window.fsAttributes[CMS_STATIC_ATTRIBUTE];\n\nattribute.version = version;\n\nif (preventsLoad) attribute.init = init;\nelse {\n  window.Webflow ||= [];\n  window.Webflow.push(init);\n}\n"],
  "mappings": "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",
  "names": []
}
