{
  "version": 3,
  "sources": ["../../../node_modules/just-debounce/index.js", "../../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/css.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/cloneNode.js", "../../../node_modules/@finsweet/ts-utils/dist/type-guards/isKeyOf.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/extractCommaSeparatedValues.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/getObjectKeys.js", "../../../node_modules/@finsweet/ts-utils/dist/type-guards/isNotEmpty.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/breakpoints.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/getCollectionElements.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/getCollectionListWrappers.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/getCurrentBreakpoint.js", "../../../global/factory/selectors.ts", "../../../global/constants/attributes.ts", "../../../global/factory/assess.ts", "../../../global/factory/init.ts", "../../../global/import/animation.ts", "../../../global/import/cmscore.ts", "../utils/constants.ts", "../utils/animation.ts", "../utils/versioning.ts", "../utils/fetch.ts", "src/actions/pagination.ts", "src/actions/parse.ts", "src/actions/load.ts", "src/modes/default.ts", "../../../node_modules/just-throttle/index.mjs", "src/utils/constants.ts", "src/actions/settings.ts", "src/modes/infinite.ts", "src/modes/pagination.ts", "src/modes/render-all.ts", "src/factory.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["module.exports = debounce;\n\nfunction debounce(fn, delay, atStart, guarantee) {\n  var timeout;\n  var args;\n  var self;\n\n  return function debounced() {\n    self = this;\n    args = Array.prototype.slice.call(arguments);\n\n    if (timeout && (atStart || guarantee)) {\n      return;\n    } else if (!atStart) {\n      clear();\n\n      timeout = setTimeout(run, delay);\n      return timeout;\n    }\n\n    timeout = setTimeout(clear, delay);\n    fn.apply(self, args);\n\n    function run() {\n      clear();\n      fn.apply(self, args);\n    }\n\n    function clear() {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n}\n", "const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "export const CURRENT_CSS_CLASS = 'w--current';\r\nexport const RICH_TEXT_BLOCK_CSS_CLASS = 'w-richtext';\r\nexport const HTML_EMBED_CSS_CLASS = 'w-embed';\r\nexport const SLIDER_CSS_CLASSES = {\r\n    slider: 'w-slider',\r\n    slide: 'w-slide',\r\n    sliderMask: 'w-slider-mask',\r\n    sliderNav: 'w-slider-nav',\r\n    sliderDot: 'w-slider-dot',\r\n    activeSliderDot: 'w-active',\r\n};\r\nexport const TABS_CSS_CLASSES = {\r\n    tabs: 'w-tabs',\r\n    tabsContent: 'w-tab-content',\r\n    tabPane: 'w-tab-pane',\r\n    tabsMenu: 'w-tab-menu',\r\n    tabLink: 'w-tab-link',\r\n    activeTab: 'w--tab-active',\r\n};\r\nexport const NAVBAR_CSS_CLASSES = {\r\n    navMenu: 'w-nav-menu',\r\n};\r\nexport const CMS_CSS_CLASSES = {\r\n    wrapper: 'w-dyn-list',\r\n    list: 'w-dyn-items',\r\n    item: 'w-dyn-item',\r\n    paginationWrapper: 'w-pagination-wrapper',\r\n    paginationNext: 'w-pagination-next',\r\n    paginationPrevious: 'w-pagination-previous',\r\n    pageCount: 'w-page-count',\r\n    emptyState: 'w-dyn-empty',\r\n};\r\nexport const FORM_CSS_CLASSES = {\r\n    formBlock: 'w-form',\r\n    checkboxField: 'w-checkbox',\r\n    checkboxInput: 'w-checkbox-input',\r\n    radioField: 'w-radio',\r\n    radioInput: 'w-radio-input',\r\n    checkboxOrRadioLabel: 'w-form-label',\r\n    checkboxOrRadioFocus: 'w--redirected-focus',\r\n    checkboxOrRadioChecked: 'w--redirected-checked',\r\n    successMessage: 'w-form-done',\r\n    errorMessage: 'w-form-fail',\r\n};\r\nexport const DROPDOWN_CSS_CLASSES = {\r\n    dropdown: 'w-dropdown',\r\n    dropdownToggle: 'w-dropdown-toggle',\r\n    dropdownList: 'w-dropdown-list',\r\n};\r\nexport const COMMERCE_CSS_CLASSES = {\r\n    addToCartForm: 'w-commerce-commerceaddtocartform',\r\n};\r\nexport const LIGHTBOX_CSS_CLASSES = {\r\n    trigger: 'w-lightbox',\r\n};\r\n", "export const cloneNode = (node, deep = true) => node.cloneNode(deep);\r\n", "export const isKeyOf = (key, source) => !!key && source.includes(key);\r\n", "import { isKeyOf } from '../type-guards/isKeyOf';\r\nexport function extractCommaSeparatedValues(string, compareSource, defaultValue, filterEmpty = true) {\r\n    const emptyValue = defaultValue ? [defaultValue] : [];\r\n    if (!string)\r\n        return emptyValue;\r\n    const items = string.split(',').reduce((accumulatedValue, currentValue) => {\r\n        const value = currentValue.trim();\r\n        if (!filterEmpty || value)\r\n            accumulatedValue.push(value);\r\n        return accumulatedValue;\r\n    }, []);\r\n    if (compareSource) {\r\n        const matches = items.filter((item) => isKeyOf(item, compareSource));\r\n        return matches.length ? matches : emptyValue;\r\n    }\r\n    return items;\r\n}\r\n", "export const getObjectKeys = (object) => Object.keys(object);\r\n", "export const isNotEmpty = (value) => value !== undefined && value !== null;\r\n", "export const WEBFLOW_BREAKPOINTS = new Map([\r\n    ['tiny', '(max-width: 479px)'],\r\n    ['small', '(max-width: 767px)'],\r\n    ['medium', '(max-width: 991px)'],\r\n    ['main', '(min-width: 992px)'],\r\n]);\r\n", "import { CMS_CSS_CLASSES } from '.';\r\nconst { wrapper, list, paginationWrapper, paginationNext, paginationPrevious, emptyState, pageCount } = CMS_CSS_CLASSES;\r\nexport function getCollectionElements(reference, target, page = document) {\r\n    const referenceElement = typeof reference === 'string' ? page.querySelector(reference) : reference;\r\n    if (!referenceElement)\r\n        return;\r\n    const collectionListWrapper = referenceElement.closest(`.${wrapper}`);\r\n    if (!collectionListWrapper)\r\n        return;\r\n    const collectionList = collectionListWrapper.querySelector(`.${list}`);\r\n    if (target === 'wrapper')\r\n        return collectionListWrapper;\r\n    if (target === 'list')\r\n        return collectionList;\r\n    if (target === 'items')\r\n        return [...(collectionList?.children || [])];\r\n    if (target === 'pageCount')\r\n        return collectionListWrapper.querySelector(`.${pageCount}`);\r\n    if (target === 'empty') {\r\n        return collectionListWrapper.querySelector(`:scope > .${emptyState}`);\r\n    }\r\n    if (target === 'pagination') {\r\n        return collectionListWrapper.querySelector(`.${paginationWrapper}`);\r\n    }\r\n    return collectionListWrapper.querySelector(`.${target === 'next' ? paginationNext : paginationPrevious}`);\r\n}\r\n", "import { CMS_CSS_CLASSES, getCollectionElements } from '.';\r\nexport const getCollectionListWrappers = (selectors, page = document) => {\r\n    selectors = selectors.filter((selector) => selector);\r\n    const selector = selectors.join(', ') || `.${CMS_CSS_CLASSES.wrapper}`;\r\n    const referenceElements = [...page.querySelectorAll(selector)];\r\n    const collectionListWrappers = referenceElements.reduce((wrappers, referenceElement) => {\r\n        if (!referenceElement)\r\n            return wrappers;\r\n        const collectionListWrapper = getCollectionElements(referenceElement, 'wrapper');\r\n        if (!collectionListWrapper || wrappers.includes(collectionListWrapper))\r\n            return wrappers;\r\n        wrappers.push(collectionListWrapper);\r\n        return wrappers;\r\n    }, []);\r\n    return collectionListWrappers;\r\n};\r\n", "import { WEBFLOW_BREAKPOINTS } from './breakpoints';\r\nexport const getCurrentBreakpoint = () => {\r\n    for (const [breakpoint, mediaQuery] of WEBFLOW_BREAKPOINTS) {\r\n        if (window.matchMedia(mediaQuery).matches) {\r\n            return breakpoint;\r\n        }\r\n    }\r\n    return 'main';\r\n};\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\r\n\r\nexport const ATTRIBUTES = {\r\n  /**\r\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\r\n   */\r\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\r\n\r\n  /**\r\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\r\n   */\r\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\r\n\r\n  /**\r\n   * Defines the source of an attribute script.\r\n   */\r\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\r\n\r\n  /**\r\n   * Defines a developer script that is not imported from JsDelivr.\r\n   */\r\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "import { Debug } from '@finsweet/ts-utils';\r\n\r\nimport { ATTRIBUTES } from '../constants/attributes';\r\nimport { GlobalAttributeParams } from '../types/global';\r\n\r\n/**\r\n * Checks the global params of the Attribute `<script>`.\r\n * @param script The `<script>` element.\r\n * @returns The {@link GlobalAttributeParams}.\r\n */\r\n\r\nexport const assessScript = (): GlobalAttributeParams => {\r\n  const { currentScript } = document;\r\n  const { preventLoad, debugMode } = ATTRIBUTES;\r\n\r\n  // Check if the Attribute should not be automatically loaded\r\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\r\n\r\n  // Check if Debug Mode is activated\r\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\r\n\r\n  return { preventsLoad };\r\n};\r\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  fsAttributes.push(...existingCallbacks);\r\n};\r\n", "import { Debug } from '@finsweet/ts-utils';\nimport type { AnimationImport } from 'packages/animation/src/types';\n\nconst ANIMATIONS_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-animation@1/functions.js';\n\n/**\n * Dynamically imports the `animation` package.\n * After the first import, it stores the response in {@link window.fsAttributes.animation}.\n * @returns A `Promise` of the package response.\n */\nexport const importAnimations = async (): AnimationImport => {\n  const { fsAttributes } = window;\n\n  if (fsAttributes.animationImport) return fsAttributes.animationImport;\n\n  try {\n    const animationsImport = import(ANIMATIONS_SOURCE);\n\n    fsAttributes.animationImport = animationsImport;\n\n    return animationsImport;\n  } catch (error) {\n    Debug.alert(`${error}`, 'error');\n    return;\n  }\n};\n", "import { Debug } from '@finsweet/ts-utils';\r\n\r\nimport type { CMSCoreImport } from '$cms/cmscore/src/types';\r\n\r\nconst CMS_CORE_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-cmscore@1/cmscore.js';\r\n// const CMS_CORE_SOURCE = 'http://localhost:3000/packages/cms/cmscore/cmscore.js';\r\n\r\n/**\r\n * Dynamically imports the `cms/cmscore` package.\r\n * After the first import, it stores the response in {@link window.fsAttributes.cms.coreImport}.\r\n *\r\n * Once the import has finished, it also stores the `cmscore` version so other `cms` packages can access it.\r\n *\r\n * @returns A `Promise` of the package response.\r\n */\r\nexport const importCMSCore = async (): CMSCoreImport => {\r\n  const { fsAttributes } = window;\r\n\r\n  fsAttributes.cms ||= {};\r\n  const { cms } = fsAttributes;\r\n\r\n  if (cms.coreImport) return cms.coreImport;\r\n\r\n  try {\r\n    const cmsCoreImport: CMSCoreImport = import(CMS_CORE_SOURCE);\r\n\r\n    cms.coreImport = cmsCoreImport;\r\n\r\n    cmsCoreImport.then((cmsCore) => {\r\n      if (cmsCore) cms.coreVersion ||= cmsCore.version;\r\n    });\r\n\r\n    return cmsCoreImport;\r\n  } catch (error) {\r\n    Debug.alert(`${error}`, 'error');\r\n    return;\r\n  }\r\n};\r\n", "export const DEFAULT_LIST_ANIMATION_DURATION = 0.1;\n", "import { getObjectKeys, isKeyOf } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\nimport { importAnimations } from '$global/import/animation';\n\nimport { DEFAULT_LIST_ANIMATION_DURATION } from './constants';\n\n/**\n * Adds list animations to a {@link CMSList}.\n * @param listInstance The `CMSList` instance.\n * @param propKeys\n */\nexport const addListAnimation = async (\n  listInstance: CMSList,\n  { durationKey, easingKey }: { durationKey: string; easingKey: string }\n) => {\n  const animationsImport = await importAnimations();\n  if (!animationsImport) return;\n\n  const {\n    animations: { fade },\n    easings,\n  } = animationsImport;\n\n  const { listAnimation } = listInstance;\n\n  const animationDuration = listInstance.getAttribute(durationKey);\n  const animationEasing = listInstance.getAttribute(easingKey);\n\n  if (listAnimation && !animationDuration && !animationEasing) return;\n\n  const easing = isKeyOf(animationEasing, easings) ? animationEasing : undefined;\n  const duration = animationDuration ? parseFloat(animationDuration) / 2000 : DEFAULT_LIST_ANIMATION_DURATION;\n\n  if (!listAnimation) {\n    listInstance.listAnimation = { ...fade, options: { easing, duration } };\n\n    return;\n  }\n\n  const { options } = listAnimation;\n\n  if (!options) {\n    listAnimation.options = { easing, duration };\n\n    return;\n  }\n\n  options.easing ||= easing;\n  if (animationDuration) options.duration = duration;\n};\n\n/**\n * Adds item animations to a {@link CMSList}.\n * @param listInstance The `CMSList` instance.\n * @param propKeys\n */\nexport const addItemsAnimation = async (\n  listInstance: CMSList,\n  {\n    animationKey,\n    durationKey,\n    easingKey,\n    staggerKey,\n  }: { animationKey: string; durationKey: string; easingKey: string; staggerKey: string }\n) => {\n  const animationsImport = await importAnimations();\n  if (!animationsImport) return;\n\n  const { animations, easings } = animationsImport;\n\n  const animationName = listInstance.getAttribute(animationKey);\n  const animationFunctions = isKeyOf(animationName, getObjectKeys(animations))\n    ? animations[animationName]\n    : animations.fade;\n\n  const animationDuration = listInstance.getAttribute(durationKey);\n  const animationEasing = listInstance.getAttribute(easingKey);\n  const animationStagger = listInstance.getAttribute(staggerKey);\n\n  listInstance.itemsAnimation = {\n    ...animationFunctions,\n    options: {\n      easing: isKeyOf(animationEasing, easings) ? animationEasing : undefined,\n      duration: animationDuration ? parseFloat(animationDuration) / 1000 : undefined,\n      stagger: animationStagger ? parseFloat(animationStagger) : undefined,\n    },\n  };\n};\n", "/**\n * Checks if the target version matches the operator.\n *\n * @example\n * ```\n * const coreVersion = 2.5.3;\n *\n * checkCMSCoreVersion('>=', '2.5.1') // true\n * checkCMSCoreVersion('>=', '2.5.5') // false\n * checkCMSCoreVersion('<=', '2.5.4') // true\n * checkCMSCoreVersion('>=', '2.5.3') // true\n * ```\n *\n * @param operator The desired comparison operator.\n * @param targetVersion The target version to compare.\n * @returns `true` when the comparison is valid.\n */\nexport const checkCMSCoreVersion = (operator: '>=' | '<=', targetVersion: string): boolean => {\n  const { coreVersion } = window.fsAttributes.cms;\n  if (!coreVersion) return false;\n\n  const collatorOptions: Intl.CollatorOptions = {\n    numeric: true,\n    sensitivity: 'base',\n  };\n\n  const result = targetVersion.localeCompare(coreVersion, undefined, collatorOptions);\n\n  return result === 0 || (operator === '>=' ? result < 0 : result > 0);\n};\n", "const domParser = new DOMParser();\n\n/**\n * Fetches and parses a page.\n * @param url The URL of the page.\n *\n * @returns The page's {@link Document}.\n */\nexport const fetchPageDocument = async (url: string) => {\n  const response = await fetch(url);\n  const rawPage = await response.text();\n\n  const page = domParser.parseFromString(rawPage, 'text/html');\n\n  return page;\n};\n", "import type { PageCountElement } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\n\n/**\n * Reads the total amount of pages of a CMS List from the `Page Count` element.\n * @param paginationCount A {@link PageCountElement}.\n *\n * @returns The total amount of existing pages.\n */\nexport const readPaginationCount = ({ textContent }: PageCountElement) => {\n  if (!textContent) return;\n\n  const [, rawTotalPages] = textContent.split('/');\n  if (!rawTotalPages) return;\n\n  const totalPages = parseInt(rawTotalPages.trim());\n\n  return totalPages;\n};\n\n/**\n * Increments the items per page of a `CMSList` instance.\n * @param listInstance The {@link CMSList} instance.\n * @param isLoading Defines if the loading cycle is still in process.\n * @param originalItemsPerPage The original amount of items per page.\n * @param e An optional {@link MouseEvent}.\n *\n * @returns `true` if there are still more items to be rendered on the list.\n */\nexport const incrementItemsPerPage = async (\n  listInstance: CMSList,\n  isLoading: boolean,\n  originalItemsPerPage: number,\n  e?: MouseEvent\n): Promise<void> => {\n  e?.preventDefault();\n\n  const { items, itemsPerPage: currentItemsPerPage } = listInstance;\n\n  if (!isLoading && currentItemsPerPage === items.length) return;\n\n  if (currentItemsPerPage + originalItemsPerPage <= items.length) {\n    listInstance.itemsPerPage = currentItemsPerPage + originalItemsPerPage;\n  } else if (isLoading) {\n    const newItems = await listInstance.once('renderitems');\n\n    listInstance.itemsPerPage = currentItemsPerPage + newItems.length;\n  } else {\n    listInstance.itemsPerPage += items.length - currentItemsPerPage;\n  }\n\n  await listInstance.renderItems(true);\n};\n\n/**\n * Handles the `display` and `href` properties of native pagination buttons (`Previous` & `Next`).\n * @param listInstance The {@link CMSList} instance.\n */\nexport const handlePaginationButtons = (listInstance: CMSList) => {\n  const { pagesQuery, currentPage, totalPages, paginationNext, paginationPrevious } = listInstance;\n\n  if (!currentPage) return;\n\n  if (paginationPrevious) {\n    paginationPrevious.style.display = currentPage !== 1 ? '' : 'none';\n\n    paginationPrevious.href = `?${pagesQuery}=${currentPage - 1}`;\n  }\n\n  if (paginationNext) {\n    paginationNext.style.display = currentPage !== totalPages ? '' : 'none';\n\n    paginationNext.href = `?${pagesQuery}=${currentPage + 1}`;\n  }\n};\n\n/**\n * Updates the native `Page Count` element.\n * @param paginationCount The {@link PageCountElement}.\n * @param listInstance The {@link CMSList} instance.\n */\nexport const updatePaginationCount = (paginationCount: PageCountElement, { currentPage, totalPages }: CMSList) => {\n  paginationCount.setAttribute('aria-label', `Page ${currentPage} of ${totalPages}`);\n  paginationCount.textContent = `${currentPage} / ${totalPages}`;\n};\n", "import { getCollectionElements, getCollectionListWrappers } from '@finsweet/ts-utils';\r\n\r\nimport type { CMSList } from '$cms/cmscore/src';\r\n\r\nexport const parseLoadedPage = async (\r\n  page: Document,\r\n  listInstance: CMSList,\r\n  itemsTarget?: Parameters<CMSList['addItems']>[1]\r\n) => {\r\n  const { index, paginationNext, paginationPrevious, originalItemsPerPage } = listInstance;\r\n\r\n  // Get DOM Elements\r\n  const collectionListWrapper = getCollectionListWrappers([], page)[index];\r\n  if (!collectionListWrapper) return;\r\n\r\n  // Store and mount the Pagination Previous element, if required\r\n  if (!paginationPrevious || !paginationNext) {\r\n    const newPaginationWrapper = getCollectionElements(collectionListWrapper, 'pagination');\r\n    const newPaginationPrevious = getCollectionElements(collectionListWrapper, 'previous');\r\n    const newPaginationNext = getCollectionElements(collectionListWrapper, 'next');\r\n\r\n    if (newPaginationPrevious) {\r\n      const childIndex = [...(newPaginationWrapper?.children || [])].indexOf(newPaginationPrevious);\r\n\r\n      listInstance.addPaginationButton(newPaginationPrevious, 'paginationPrevious', childIndex);\r\n    }\r\n\r\n    if (newPaginationNext) {\r\n      let childIndex = [...(newPaginationWrapper?.children || [])].indexOf(newPaginationNext);\r\n\r\n      if (!newPaginationPrevious) childIndex += 1;\r\n\r\n      listInstance.addPaginationButton(newPaginationNext, 'paginationNext', childIndex);\r\n    }\r\n  }\r\n\r\n  // Store and mount the new items\r\n  const nextPageURL = getCollectionElements(collectionListWrapper, 'next')?.href;\r\n  const collectionItems = getCollectionElements(collectionListWrapper, 'items');\r\n\r\n  const { length: itemsLength } = collectionItems;\r\n\r\n  // Make sure the itemsPerPage value is correct\r\n  if (nextPageURL && originalItemsPerPage !== itemsLength) {\r\n    listInstance.originalItemsPerPage = listInstance.itemsPerPage = itemsLength;\r\n  }\r\n\r\n  await listInstance.addItems(collectionItems, itemsTarget);\r\n\r\n  return nextPageURL;\r\n};\r\n", "import type { CMSList } from '$cms/cmscore/src';\r\nimport { fetchPageDocument } from '$cms/utils/fetch';\r\n\r\nimport { readPaginationCount } from './pagination';\r\nimport { parseLoadedPage } from './parse';\r\n\r\n/**\r\n * Loads all paginated items of a `CMSList` instance.\r\n * @param listInstance The {@link CMSList} instance.\r\n *\r\n * @returns Nothing, it mutates the `CMSList` instance.\r\n */\r\nexport const loadPaginatedItems = async (listInstance: CMSList): Promise<void> => {\r\n  const { paginationNext, paginationPrevious, paginationCount, extractingPaginationData } = listInstance;\r\n\r\n  if (!paginationNext && !paginationPrevious) return;\r\n\r\n  await extractingPaginationData;\r\n\r\n  const totalPages = paginationCount ? readPaginationCount(paginationCount) : undefined;\r\n\r\n  await listInstance.displayElement('loader');\r\n\r\n  if (totalPages) await parallelItemsLoad(listInstance, totalPages);\r\n  else await chainedPagesLoad(listInstance);\r\n\r\n  await listInstance.emit('finishload');\r\n\r\n  await listInstance.displayElement('loader', false);\r\n};\r\n\r\n/**\r\n * Collects Collection Items from a Collection List's pagination.\r\n * Loads all pages in a chained sequence until there are no more valid pages to load.\r\n *\r\n * @param listInstance The CMSList instance.\r\n *\r\n * @returns Nothing, it mutates the `CMSList` instance.\r\n */\r\nconst chainedPagesLoad = async (listInstance: CMSList): Promise<void> => {\r\n  const { paginationNext, currentPage } = listInstance;\r\n\r\n  if (currentPage) await parallelItemsLoad(listInstance, currentPage);\r\n\r\n  if (!paginationNext) return;\r\n\r\n  const { href } = paginationNext;\r\n  const pageLinks: string[] = [href];\r\n\r\n  /**\r\n   * Loads the items from the specified URL.\r\n   * @param href The URL to load.\r\n   */\r\n  const loadPage = async (href: string) => {\r\n    try {\r\n      // Fetch the page\r\n      const page = await fetchPageDocument(href);\r\n\r\n      // Check for recursion (action: `all`)\r\n      const nextPageURL = await parseLoadedPage(page, listInstance);\r\n\r\n      if (!nextPageURL || pageLinks.includes(nextPageURL)) return;\r\n\r\n      pageLinks.push(nextPageURL);\r\n\r\n      await loadPage(nextPageURL);\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  await loadPage(href);\r\n};\r\n\r\n/**\r\n * Collects Collection Items from a Collection List's pagination.\r\n * Loads all pages in parallel.\r\n *\r\n * @param listInstance The CMSList instance.\r\n *\r\n * @returns Nothing, it mutates the `CMSList` instance.\r\n */\r\nconst parallelItemsLoad = async (listInstance: CMSList, totalPages: number) => {\r\n  const { paginationNext, paginationPrevious } = listInstance;\r\n\r\n  if (!paginationNext && !paginationPrevious) return;\r\n\r\n  const { pagesQuery, currentPage } = listInstance;\r\n  if (!pagesQuery || !currentPage) return;\r\n\r\n  const { origin, pathname } = window.location;\r\n\r\n  // Previous Pages\r\n  for (let pageNumber = currentPage - 1; pageNumber >= 1; pageNumber--) {\r\n    try {\r\n      const page = await fetchPageDocument(`${origin}${pathname}?${pagesQuery}=${pageNumber}`);\r\n\r\n      await parseLoadedPage(page, listInstance, 'unshift');\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Next Pages\r\n  const fetchPromises: Promise<void>[] = [];\r\n\r\n  for (let pageNumber = currentPage + 1; pageNumber <= totalPages; pageNumber++) {\r\n    fetchPromises[pageNumber] = (async () => {\r\n      const previousPromise = fetchPromises[pageNumber - 1];\r\n\r\n      try {\r\n        const page = await fetchPageDocument(`${origin}${pathname}?${pagesQuery}=${pageNumber}`);\r\n\r\n        await previousPromise;\r\n\r\n        await parseLoadedPage(page, listInstance);\r\n      } catch (error) {\r\n        await previousPromise;\r\n        return;\r\n      }\r\n    })();\r\n  }\r\n\r\n  await Promise.all(fetchPromises);\r\n};\r\n", "import type { CMSList } from '$cms/cmscore/src';\r\n\r\nimport { loadPaginatedItems } from '../actions/load';\r\nimport { incrementItemsPerPage } from '../actions/pagination';\r\n\r\n/**\r\n * Inits the default mode.\r\n * @param listInstance The `CMSList` instance.\r\n */\r\nexport const initDefaultMode = async (listInstance: CMSList): Promise<void> => {\r\n  const { paginationNext, paginationPrevious, paginationCount, itemsPerPage: originalItemsPerPage } = listInstance;\r\n\r\n  if (!paginationNext) return;\r\n\r\n  if (paginationPrevious) paginationPrevious.style.display = 'none';\r\n\r\n  paginationCount?.remove();\r\n\r\n  let isLoading = true;\r\n  let isHandling = false;\r\n\r\n  listInstance.initPagination();\r\n\r\n  listInstance.on('renderitems', () => {\r\n    const { validItems, items, itemsPerPage: currentItemsPerPage } = listInstance;\r\n\r\n    if (!isLoading && items.length === currentItemsPerPage) {\r\n      conclude();\r\n      return;\r\n    }\r\n\r\n    paginationNext.style.display = validItems.length > currentItemsPerPage ? '' : 'none';\r\n  });\r\n\r\n  /**\r\n   * Handles click events on the `Pagination Next` button.\r\n   * @param e The mouse event.\r\n   */\r\n  const handleClicks = async (e: MouseEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (isHandling) return;\r\n\r\n    isHandling = true;\r\n\r\n    await incrementItemsPerPage(listInstance, isLoading, originalItemsPerPage, e);\r\n\r\n    isHandling = false;\r\n  };\r\n\r\n  /**\r\n   * Destroys the `Pagination Next` button..\r\n   */\r\n  const conclude = () => {\r\n    paginationNext.removeEventListener('click', handleClicks);\r\n    paginationNext.style.display = 'none';\r\n  };\r\n\r\n  // Init\r\n  paginationNext.addEventListener('click', handleClicks);\r\n\r\n  await loadPaginatedItems(listInstance);\r\n\r\n  isLoading = false;\r\n};\r\n", "var functionThrottle = throttle;\n\nfunction throttle(fn, interval, options) {\n  var timeoutId = null;\n  var throttledFn = null;\n  var leading = (options && options.leading);\n  var trailing = (options && options.trailing);\n\n  if (leading == null) {\n    leading = true; // default\n  }\n\n  if (trailing == null) {\n    trailing = !leading; //default\n  }\n\n  if (leading == true) {\n    trailing = false; // forced because there should be invocation per call\n  }\n\n  var cancel = function() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n    }\n  };\n\n  var flush = function() {\n    var call = throttledFn;\n    cancel();\n\n    if (call) {\n      call();\n    }\n  };\n\n  var throttleWrapper = function() {\n    var callNow = leading && !timeoutId;\n    var context = this;\n    var args = arguments;\n\n    throttledFn = function() {\n      return fn.apply(context, args);\n    };\n\n    if (!timeoutId) {\n      timeoutId = setTimeout(function() {\n        timeoutId = null;\n\n        if (trailing) {\n          return throttledFn();\n        }\n      }, interval);\n    }\n\n    if (callNow) {\n      callNow = false;\n      return throttledFn();\n    }\n  };\n\n  throttleWrapper.cancel = cancel;\n  throttleWrapper.flush = flush;\n\n  return throttleWrapper;\n}\n\nexport {functionThrottle as default};\n", "import type { WebflowBreakpoint } from '@finsweet/ts-utils';\n\nimport { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\n\nexport const ATTRIBUTE = 'cmsload';\n\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\n\nexport const LIST_ELEMENT_KEY = 'list';\nexport const LOADER_ELEMENT_KEY = 'loader';\nexport const ITEMS_COUNT_ELEMENT_KEY = 'items-count';\nexport const PAGE_COUNT_ELEMENT_KEY = 'page-count';\nexport const SCROLL_ANCHOR_ELEMENT_KEY = 'scroll-anchor';\nexport const PAGE_BUTTON_ELEMENT_KEY = 'page-button';\nexport const PAGE_DOTS_ELEMENT_KEY = 'page-dots';\n\nexport const MODE_SETTING_KEY = 'mode';\nexport const MODE_SETTING_VALUES = {\n  /**\n   * Renders items at the bottom of the page.\n   */\n  loadUnder: 'load-under',\n\n  /**\n   * All items will be rendered at once.\n   */\n  renderAll: 'render-all',\n\n  /**\n   * Pagination will be created.\n   */\n  pagination: 'pagination',\n\n  /**\n   * Items will be loaded when the user reaches the bottom of the Collection List.\n   * Threshold can be defined with {@link ATTRIBUTES.threshold}.\n   */\n  infinite: 'infinite',\n} as const;\nexport const THRESHOLD_SETTING_KEY = 'threshold';\nexport const PAGE_SIBLINGS_SETTING_KEY = 'pagesiblings';\nexport const PAGE_BOUNDARY_SETTING_KEY = 'pageboundary';\nexport const ANIMATION_SETTING_KEY = 'animation';\nexport const EASING_SETTING_KEY = 'easing';\nexport const DURATION_SETTING_KEY = 'duration';\nexport const STAGGER_SETTING_KEY = 'stagger';\nexport const RESET_IX_SETTING_KEY = 'resetix';\nexport const RESET_IX_SETTING_VALUES = { true: 'true' } as const;\nexport const SHOW_QUERY_SETTING_KEY = 'showquery';\nexport const SHOW_QUERY_SETTING_VALUES = { true: 'true' } as const;\n\nexport const ATTRIBUTES = {\n  element: {\n    key: `${ATTRIBUTES_PREFIX}-element`,\n    values: {\n      /**\n       * Defines a list to be instantiated.\n       */\n      list: generateDynamicAttibuteValue(LIST_ELEMENT_KEY),\n\n      /**\n       * Defines a node that will be displayed when loading new items.\n       */\n      loader: generateDynamicAttibuteValue(LOADER_ELEMENT_KEY),\n\n      /**\n       * Defines an element where to display the total items of the list.\n       */\n      itemsCount: generateDynamicAttibuteValue(ITEMS_COUNT_ELEMENT_KEY),\n\n      /**\n       * Defines an element where to display the amount of items per page.\n       */\n      pageCount: generateDynamicAttibuteValue(PAGE_COUNT_ELEMENT_KEY),\n\n      /**\n       * Defines an element where to scroll the view every time a page in `Pagination` mode is switched.\n       */\n      scrollAnchor: generateDynamicAttibuteValue(SCROLL_ANCHOR_ELEMENT_KEY),\n\n      /**\n       * Defines the template element to generate all page buttons for the `paginate` mode.\n       */\n      pageButton: PAGE_BUTTON_ELEMENT_KEY,\n\n      /**\n       * Defines the template element to create the page dots separators.\n       */\n      pageDots: PAGE_DOTS_ELEMENT_KEY,\n    },\n  },\n\n  /**\n   * Defines the loading mode.\n   */\n  mode: {\n    key: `${ATTRIBUTES_PREFIX}-${MODE_SETTING_KEY}`,\n    values: MODE_SETTING_VALUES,\n  },\n\n  /**\n   * Defines the scrolling threshold to trigger a new page load in `infinite` mode.\n   * Defaults to {@link DEFAULT_INFINITE_THRESHOLD}.\n   */\n  threshold: { key: `${ATTRIBUTES_PREFIX}-${THRESHOLD_SETTING_KEY}` },\n\n  /**\n   * Defines the amount of digits to display either side of the current page.\n   * It can be a comma-separated string listing the values in a `Desktop, Tablet, Landscape, Portrait` order.\n   *\n   * Defaults to {@link DEFAULT_PAGE_SIBLINGS}.\n   */\n  pageSiblings: { key: `${ATTRIBUTES_PREFIX}-${PAGE_SIBLINGS_SETTING_KEY}` },\n\n  /**\n   * Defines the amount of digits to display at the start and end of a page buttons list.\n   * It can be a comma-separated string listing the values in a `Desktop, Tablet, Landscape, Portrait` order.\n   *\n   * Defaults to {@link DEFAULT_PAGE_BOUNDARY}.\n   */\n  pageBoundary: { key: `${ATTRIBUTES_PREFIX}-${PAGE_BOUNDARY_SETTING_KEY}` },\n\n  /**\n   * Defines the animation to use when appending elements to the list.\n   * Allowed values are defined in {@link \"packages/animations\"}.\n   */\n  animation: { key: `${ATTRIBUTES_PREFIX}-${ANIMATION_SETTING_KEY}` },\n\n  /**\n   * Defines the easing function of the animation.\n   * Allowed values are defined in {@link \"packages/animations\"}.\n   */\n  easing: { key: `${ATTRIBUTES_PREFIX}-${EASING_SETTING_KEY}` },\n\n  /**\n   * Defines the duration of the animation.\n   */\n  duration: { key: `${ATTRIBUTES_PREFIX}-${DURATION_SETTING_KEY}` },\n\n  /**\n   * Defines if animations should be staggered.\n   */\n  stagger: { key: `${ATTRIBUTES_PREFIX}-${STAGGER_SETTING_KEY}` },\n\n  /**\n   * Defines if Webflow should be restarted after loading new items.\n   */\n  resetIx: { key: `${ATTRIBUTES_PREFIX}-${RESET_IX_SETTING_KEY}`, values: RESET_IX_SETTING_VALUES },\n\n  /**\n   * Defines if the pagination query params should be displayed on the URL.\n   * Only works with {@link MODE_SETTING_VALUES.pagination} mode.\n   */\n  showQuery: { key: `${ATTRIBUTES_PREFIX}-${SHOW_QUERY_SETTING_KEY}`, values: SHOW_QUERY_SETTING_VALUES },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n\nexport const DEFAULT_INFINITE_THRESHOLD = '-20';\n\nexport const DEFAULT_PAGE_SIBLINGS = 1;\nexport const DEFAULT_PAGE_BOUNDARY = 1;\n\nexport const BREAKPOINTS_INDEX: { [key in WebflowBreakpoint]: number } = {\n  main: 0,\n  medium: 1,\n  small: 2,\n  tiny: 3,\n} as const;\n", "import { extractCommaSeparatedValues, getCurrentBreakpoint } from '@finsweet/ts-utils';\nimport type { PaginationWrapperElement } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\n\nimport {\n  ATTRIBUTES,\n  BREAKPOINTS_INDEX,\n  DEFAULT_INFINITE_THRESHOLD,\n  DEFAULT_PAGE_BOUNDARY,\n  DEFAULT_PAGE_SIBLINGS,\n  queryElement,\n} from '../utils/constants';\n\n// Constants\nconst {\n  pageSiblings: { key: pageSiblingsKey },\n  pageBoundary: { key: pageBoundaryKey },\n  threshold: { key: thresholdKey },\n  showQuery: { key: showQueryKey, values: showQueryValues },\n} = ATTRIBUTES;\n\n/**\n * Collects the `Pagination` mode settings.\n * @param listInstance The {@link CMSList} instance.\n */\nexport const getPaginationSettings = (\n  listInstance: CMSList\n):\n  | {\n      paginationWrapper: PaginationWrapperElement;\n      pageButtonTemplate?: HTMLElement | null;\n      pageDotsTemplate: HTMLElement;\n      paginationCount: HTMLDivElement | null | undefined;\n      pageBoundary: number;\n      pageBoundaryValues: number[];\n      pageSiblings: number;\n      pageSiblingsValues: number[];\n      hasBreakpoints: boolean;\n      showQueryParams: boolean;\n    }\n  | undefined => {\n  const { paginationWrapper, paginationCount } = listInstance;\n\n  if (!paginationWrapper) return;\n\n  // Page Button Template\n  const pageButtonTemplate = queryElement<HTMLElement>('pageButton', {\n    operator: 'prefixed',\n    scope: paginationWrapper,\n  });\n\n  // Page Dots Template\n  let pageDotsTemplate = queryElement<HTMLElement>('pageDots', { operator: 'prefixed', scope: paginationWrapper });\n\n  if (pageDotsTemplate) pageDotsTemplate.remove();\n  else {\n    pageDotsTemplate = document.createElement('div');\n    pageDotsTemplate.textContent = '...';\n  }\n\n  // Page Boundary\n  const rawPageBoundaryValues = listInstance.getAttribute(pageBoundaryKey);\n  const pageBoundaryValues = (rawPageBoundaryValues ? extractCommaSeparatedValues(rawPageBoundaryValues) : []).map(\n    (value) => parseInt(value)\n  );\n\n  // Page Siblings\n  const rawPageSiblingsValues = listInstance.getAttribute(pageSiblingsKey);\n  const pageSiblingsValues = (rawPageSiblingsValues ? extractCommaSeparatedValues(rawPageSiblingsValues) : []).map(\n    (value) => parseInt(value)\n  );\n\n  // Breakpoints for Page Boundary/Siblings\n  const [pageBoundary, pageSiblings] = getPageButtonsSettings(pageBoundaryValues, pageSiblingsValues);\n\n  const hasBreakpoints = [pageBoundaryValues, pageSiblingsValues].some(({ length }) => length > 1);\n\n  // Query Params\n  const showQueryParams = listInstance.getAttribute(showQueryKey) === showQueryValues.true;\n\n  return {\n    paginationWrapper,\n    pageButtonTemplate,\n    pageDotsTemplate,\n    paginationCount,\n    pageBoundary,\n    pageBoundaryValues,\n    pageSiblings,\n    pageSiblingsValues,\n    hasBreakpoints,\n    showQueryParams,\n  };\n};\n\n/**\n * Returns the correspondent `pageBoundary` and `pageSiblings` settings based on the current breakpoint.\n * @param pageBoundaryValues The array of pageBoundary values.\n * @param pageSiblingsValues The array of pageSiblings values.\n * @returns A tuple with the correspondent values.\n */\nexport const getPageButtonsSettings = (\n  pageBoundaryValues: number[],\n  pageSiblingsValues: number[]\n): [number, number] => {\n  const currentBreakpoint = getCurrentBreakpoint();\n  const breakpointIndex = BREAKPOINTS_INDEX[currentBreakpoint];\n\n  const values: number[] = [];\n\n  [pageBoundaryValues, pageSiblingsValues].forEach((array, index) => {\n    for (let i = breakpointIndex; i >= 0; i--) {\n      const value = array[i];\n\n      if (typeof value === 'number') {\n        values[index] = value;\n        break;\n      }\n    }\n  });\n\n  let [pageBoundary, pageSiblings] = values;\n\n  pageBoundary ??= DEFAULT_PAGE_BOUNDARY;\n  pageSiblings ??= DEFAULT_PAGE_SIBLINGS;\n\n  return [pageBoundary, pageSiblings];\n};\n\n/**\n * Collects the `Infinite` mode settings.\n * @param listInstance The {@link CMSList} instance.\n */\nexport const getInfiniteThreshold = (listInstance: CMSList): number => {\n  const threshold = parseInt(listInstance.getAttribute(thresholdKey) || DEFAULT_INFINITE_THRESHOLD);\n  const thresholdCoefficient = 1 - threshold / 100;\n\n  return thresholdCoefficient;\n};\n", "import throttle from 'just-throttle';\r\n\r\nimport type { CMSList } from '$cms/cmscore/src';\r\n\r\nimport { loadPaginatedItems } from '../actions/load';\r\nimport { incrementItemsPerPage } from '../actions/pagination';\r\nimport { getInfiniteThreshold } from '../actions/settings';\r\n\r\n/**\r\n * Inits the infinite mode.\r\n * @param listInstance The `CMSList` instance.\r\n */\r\nexport const initInfiniteMode = async (listInstance: CMSList): Promise<void> => {\r\n  const {\r\n    list,\r\n    paginationNext,\r\n    paginationPrevious,\r\n    paginationCount,\r\n    itemsPerPage: originalItemsPerPage,\r\n  } = listInstance;\r\n\r\n  if (!list || !paginationNext) return;\r\n\r\n  if (paginationPrevious) paginationPrevious.style.display = 'none';\r\n\r\n  paginationCount?.remove();\r\n\r\n  const thresholdCoefficient = getInfiniteThreshold(listInstance);\r\n\r\n  let isLoading = true;\r\n  let isHandling = false;\r\n\r\n  listInstance.initPagination();\r\n\r\n  listInstance.on('renderitems', () => {\r\n    const { validItems, items, itemsPerPage: currentItemsPerPage } = listInstance;\r\n\r\n    if (!isLoading && items.length === currentItemsPerPage) {\r\n      conclude();\r\n      return;\r\n    }\r\n\r\n    paginationNext.style.display = validItems.length > currentItemsPerPage ? '' : 'none';\r\n  });\r\n\r\n  /**\r\n   * Handles click events on the `Pagination Next` button.\r\n   * @param e The mouse event.\r\n   */\r\n  const handleClicks = async (e: MouseEvent) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  /**\r\n   * Handles a scroll event.\r\n   * Recalculates the scroll ratio of the element.\r\n   */\r\n  const handleScroll = throttle(async () => {\r\n    if (isHandling) return;\r\n\r\n    const { innerHeight } = window;\r\n    const { bottom } = list.getBoundingClientRect();\r\n\r\n    const validRange = thresholdCoefficient * innerHeight;\r\n    const shouldLoad = bottom > 0 && bottom <= validRange;\r\n\r\n    if (shouldLoad) {\r\n      isHandling = true;\r\n\r\n      await incrementItemsPerPage(listInstance, isLoading, originalItemsPerPage);\r\n\r\n      isHandling = false;\r\n    }\r\n  }, 100);\r\n\r\n  const observer = new IntersectionObserver((entries) => {\r\n    for (const { isIntersecting } of entries) {\r\n      const action = isIntersecting ? 'addEventListener' : 'removeEventListener';\r\n      window[action]('scroll', handleScroll);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Destroys the `Pagination Next` button and the `Intersection Observer`.\r\n   */\r\n  const conclude = () => {\r\n    window.removeEventListener('scroll', handleScroll);\r\n    paginationNext.removeEventListener('click', handleClicks);\r\n    paginationNext.style.display = 'none';\r\n    observer.disconnect();\r\n  };\r\n\r\n  // Init\r\n  paginationNext.addEventListener('click', handleClicks);\r\n  observer.observe(list);\r\n\r\n  await loadPaginatedItems(listInstance);\r\n\r\n  isLoading = false;\r\n};\r\n", "import { cloneNode, CMS_CSS_CLASSES, CURRENT_CSS_CLASS, isNotEmpty } from '@finsweet/ts-utils';\r\nimport debounce from 'just-debounce';\r\n\r\nimport type { CMSList } from '$cms/cmscore/src';\r\n\r\nimport { loadPaginatedItems } from '../actions/load';\r\nimport { handlePaginationButtons, updatePaginationCount } from '../actions/pagination';\r\nimport { getPaginationSettings, getPageButtonsSettings } from '../actions/settings';\r\nimport { getSelector } from '../utils/constants';\r\nimport type { PageButtonsData } from '../utils/types';\r\n\r\n// Constants\r\nconst { paginationNext: paginationNextCSSClass, paginationPrevious: paginationPreviousCSSClass } = CMS_CSS_CLASSES;\r\n\r\n/**\r\n * Inits the `Paginate` mode.\r\n * @param listInstance The {@link CMSList} instance.\r\n */\r\nexport const initPaginationMode = async (listInstance: CMSList): Promise<void> => {\r\n  const settingsData = getPaginationSettings(listInstance);\r\n  if (!settingsData) return;\r\n\r\n  const {\r\n    paginationWrapper,\r\n    pageButtonTemplate,\r\n    pageDotsTemplate,\r\n    paginationCount,\r\n    pageBoundary,\r\n    pageBoundaryValues,\r\n    pageSiblings,\r\n    pageSiblingsValues,\r\n    hasBreakpoints,\r\n    showQueryParams,\r\n  } = settingsData;\r\n\r\n  let pageButtonsData: PageButtonsData | undefined;\r\n\r\n  if (pageButtonTemplate) {\r\n    const { parentElement } = pageButtonTemplate;\r\n\r\n    pageButtonTemplate.remove();\r\n\r\n    if (parentElement) {\r\n      pageButtonsData = {\r\n        parentElement,\r\n        pageButtonTemplate,\r\n        pageDotsTemplate,\r\n        pageBoundary,\r\n        pageSiblings,\r\n        renderedElements: new Map([]),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Set initial state\r\n  listInstance.initPagination(showQueryParams);\r\n\r\n  //  Listen events\r\n  listInstance.on('renderitems', () => handleElements(listInstance, pageButtonsData, paginationCount));\r\n\r\n  paginationWrapper.addEventListener('click', (e) => handlePaginationClicks(e, pageButtonsData, listInstance));\r\n\r\n  if (pageButtonsData && hasBreakpoints) {\r\n    window.addEventListener(\r\n      'resize',\r\n      debounce(() => {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        handleWindowResize(pageButtonsData!, listInstance, pageBoundaryValues, pageSiblingsValues);\r\n      }, 100)\r\n    );\r\n  }\r\n\r\n  // Init items load\r\n  await loadPaginatedItems(listInstance);\r\n};\r\n\r\n/**\r\n * Handles all dynamic elements.\r\n * @param listInstance The {@link CMSList} instance.\r\n * @param pageButtonsData The {@link PageButtonsData} array.\r\n * @param paginationCount The {@link PageCountElement}.\r\n * @param updatePaginationButtons `true` by default.\r\n */\r\nconst handleElements = (\r\n  listInstance: CMSList,\r\n  pageButtonsData: PageButtonsData | undefined,\r\n  paginationCount: HTMLDivElement | null | undefined,\r\n  updatePaginationButtons = true\r\n) => {\r\n  if (pageButtonsData) handlePageButtons(pageButtonsData, listInstance);\r\n  if (paginationCount) updatePaginationCount(paginationCount, listInstance);\r\n  if (updatePaginationButtons) handlePaginationButtons(listInstance);\r\n};\r\n\r\n/**\r\n * Handles the custom page buttons state.\r\n * @param pageButtonsData The {@link PageButtonsData} array.\r\n * @param listInstance The {@link CMSList} instance.\r\n * @returns\r\n */\r\nconst handlePageButtons = (pageButtonsData: PageButtonsData, listInstance: CMSList) => {\r\n  const { currentPage, totalPages } = listInstance;\r\n  if (!currentPage) return;\r\n\r\n  const { parentElement, renderedElements, pageBoundary, pageSiblings } = pageButtonsData;\r\n\r\n  const existingElements: Array<[HTMLElement, number | null] | undefined> = [...renderedElements];\r\n\r\n  const totalSiblings = pageSiblings * 2 + 1;\r\n  const totalBoundary = pageBoundary * 2;\r\n\r\n  const maxElements = totalBoundary + totalSiblings + 2;\r\n\r\n  const isStartRange = currentPage - 1 < maxElements - totalSiblings;\r\n  const isEndRange = totalPages - currentPage < maxElements - totalSiblings;\r\n\r\n  for (let index = 1; index <= maxElements; index++) {\r\n    // Get previous elements\r\n    const [existingElement, existingTargetPage] = existingElements[index - 1] || [];\r\n    const [lastElement] = existingElements[index - 2] || [];\r\n\r\n    // Get rid of invalid elements\r\n    if (index > totalPages) {\r\n      if (existingElement) {\r\n        existingElement.remove();\r\n        existingElements[index - 1] = undefined;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    // Collect new target page\r\n    let targetPage: number | null;\r\n\r\n    if (totalPages <= maxElements) targetPage = index;\r\n    else if (isStartRange) {\r\n      if (index > maxElements - pageBoundary) targetPage = totalPages - (maxElements - index);\r\n      else if (index === maxElements - pageBoundary) targetPage = null;\r\n      else targetPage = index;\r\n    } else if (isEndRange) {\r\n      if (index < pageBoundary + 1) targetPage = index;\r\n      else if (index === pageBoundary + 1) targetPage = null;\r\n      else targetPage = totalPages - (maxElements - index);\r\n    } else {\r\n      if (index < pageBoundary + 1) targetPage = index;\r\n      else if (index > maxElements - pageBoundary) targetPage = totalPages - (maxElements - index);\r\n      else if (index === pageBoundary + 1 || index === maxElements - pageBoundary) targetPage = null;\r\n      else targetPage = currentPage + (index - (pageBoundary + 1) - (1 + pageSiblings));\r\n    }\r\n\r\n    // Render a new item only when needed\r\n    let newElement: HTMLElement | undefined;\r\n\r\n    if (existingTargetPage !== targetPage) {\r\n      // Remove the existing element\r\n      existingElement?.remove();\r\n\r\n      // Add the new item\r\n      newElement = createPageElement(pageButtonsData, targetPage, listInstance);\r\n      existingElements[index - 1] = [newElement, targetPage];\r\n\r\n      if (lastElement) parentElement.insertBefore(newElement, lastElement.nextSibling);\r\n      else parentElement.appendChild(newElement);\r\n\r\n      newElement.style.opacity = '';\r\n    }\r\n\r\n    const elementToUpdate = newElement || existingElement;\r\n    if (!elementToUpdate) continue;\r\n\r\n    // Update CSS and Aria\r\n    updatePageElement(elementToUpdate, targetPage === currentPage);\r\n  }\r\n\r\n  // Store new state\r\n  pageButtonsData.renderedElements = new Map([...existingElements.filter(isNotEmpty)]);\r\n};\r\n\r\n/**\r\n * Creates a new page element.\r\n * @param pageButtonsData The {@link PageButtonsData} object.\r\n * @param targetPage The page where it will point to. If no target page is defined, a `Page Dots` element will be returned.\r\n * @param listInstance The {@link CMSList} instance.\r\n * @returns The new element.\r\n */\r\nconst createPageElement = (\r\n  { pageButtonTemplate, pageDotsTemplate }: PageButtonsData,\r\n  targetPage: number | null,\r\n  { pagesQuery }: CMSList\r\n) => {\r\n  if (!targetPage) return cloneNode(pageDotsTemplate);\r\n\r\n  const newElement = cloneNode(pageButtonTemplate);\r\n  newElement.classList.remove(CURRENT_CSS_CLASS);\r\n  newElement.textContent = `${targetPage}`;\r\n\r\n  if (newElement instanceof HTMLAnchorElement && pagesQuery) newElement.href = `?${pagesQuery}=${targetPage}`;\r\n\r\n  return newElement;\r\n};\r\n\r\n/**\r\n * Updates the CSS and `a11ty` of a page element.\r\n * @param element The page element.\r\n * @param isCurrentPage Defines if the element points to the current active page.\r\n */\r\nconst updatePageElement = (element: HTMLElement, isCurrentPage: boolean) => {\r\n  if (isCurrentPage) {\r\n    element.classList.add(CURRENT_CSS_CLASS);\r\n    element.setAttribute('aria-current', 'page');\r\n  } else {\r\n    element.classList.remove(CURRENT_CSS_CLASS);\r\n    element.removeAttribute('aria-current');\r\n  }\r\n};\r\n\r\n/**\r\n * Handles clicks on the pagination elements.\r\n * @param e The click event.\r\n * @param pageButtonsData The {@link PageButtonsData} array.\r\n * @param listInstance The {@link CMSList} instance.\r\n */\r\nconst handlePaginationClicks = (e: MouseEvent, pageButtonsData: PageButtonsData | undefined, listInstance: CMSList) => {\r\n  const { target } = e;\r\n\r\n  if (!(target instanceof Element)) return;\r\n\r\n  const isPageButton = target.closest<HTMLElement>(getSelector('element', 'pageButton', { operator: 'prefixed' }));\r\n  const isNextButton = target.closest(`.${paginationNextCSSClass}`);\r\n  const isPreviousButton = target.closest(`.${paginationPreviousCSSClass}`);\r\n\r\n  if (!isPageButton && !isNextButton && !isPreviousButton) return;\r\n\r\n  e.preventDefault();\r\n\r\n  const { currentPage, totalPages } = listInstance;\r\n\r\n  if (!currentPage) return;\r\n\r\n  let targetPage: number | null | undefined;\r\n\r\n  if (isNextButton) targetPage = currentPage + 1;\r\n  if (isPreviousButton) targetPage = currentPage - 1;\r\n  if (isPageButton) targetPage = pageButtonsData?.renderedElements.get(isPageButton);\r\n\r\n  if (!targetPage) return;\r\n\r\n  if (targetPage >= 1 && targetPage <= totalPages) listInstance.switchPage(targetPage);\r\n};\r\n\r\n/**\r\n * Handles the page buttons when resizing the window.\r\n * @param pageButtonsData The {@link PageButtonsData} object.\r\n * @param listInstance The {@link CMSList} instance.\r\n * @param args The parameters for {@link getPageButtonsSettings}.\r\n */\r\nconst handleWindowResize = (\r\n  pageButtonsData: PageButtonsData,\r\n  listInstance: CMSList,\r\n  ...args: Parameters<typeof getPageButtonsSettings>\r\n) => {\r\n  const { pageBoundary, pageSiblings, renderedElements } = pageButtonsData;\r\n\r\n  const [newPageBoundary, newPageSiblings] = getPageButtonsSettings(...args);\r\n\r\n  if (pageBoundary === newPageBoundary && pageSiblings === newPageSiblings) return;\r\n\r\n  pageButtonsData.pageBoundary = newPageBoundary;\r\n  pageButtonsData.pageSiblings = newPageSiblings;\r\n\r\n  for (const [element] of renderedElements) element.remove();\r\n\r\n  renderedElements.clear();\r\n\r\n  handlePageButtons(pageButtonsData, listInstance);\r\n};\r\n", "import type { CMSList } from '$cms/cmscore/src';\n\nimport { loadPaginatedItems } from '../actions/load';\n\n/**\n * Inits the `Render All` mode.\n * @param listInstance The `CMSList` instance.\n * @param loadingText The text to display while loading.\n */\nexport const initRenderAllMode = async (listInstance: CMSList): Promise<void> => {\n  const { paginationNext, paginationPrevious, paginationCount } = listInstance;\n\n  if (!paginationNext) return;\n\n  paginationNext.style.display = 'none';\n\n  if (paginationPrevious) paginationPrevious.style.display = 'none';\n\n  paginationCount?.remove();\n\n  await loadPaginatedItems(listInstance);\n};\n", "import { COMMERCE_CSS_CLASSES, LIGHTBOX_CSS_CLASSES } from '@finsweet/ts-utils';\r\n\r\nimport type { CMSList } from '$cms/cmscore/src';\r\nimport { addItemsAnimation, addListAnimation } from '$cms/utils/animation';\r\nimport { checkCMSCoreVersion } from '$cms/utils/versioning';\r\n\r\nimport { initDefaultMode } from './modes/default';\r\nimport { initInfiniteMode } from './modes/infinite';\r\nimport { initPaginationMode } from './modes/pagination';\r\nimport { initRenderAllMode } from './modes/render-all';\r\nimport { ATTRIBUTES, queryElement } from './utils/constants';\r\n\r\n// Constants\r\nconst {\r\n  element: { key: elementKey },\r\n  mode: {\r\n    key: modeKey,\r\n    values: { renderAll, infinite, pagination },\r\n  },\r\n  animation: { key: animationKey },\r\n  duration: { key: durationKey },\r\n  easing: { key: easingKey },\r\n  stagger: { key: staggerKey },\r\n  resetIx: { key: resetIxKey, values: resetIxValues },\r\n} = ATTRIBUTES;\r\n\r\n/**\r\n * Gets the base config and inits a `mode` for a `CMSList` instance.\r\n * @param listInstance The {@link CMSList} instance.\r\n * @returns The same instance.\r\n */\r\nexport const initLoadInstance = async (listInstance: CMSList) => {\r\n  const instanceIndex = listInstance.getInstanceIndex(elementKey);\r\n  const { items } = listInstance;\r\n  const { Webflow } = window;\r\n  const webflowReady = !!Webflow && 'require' in Webflow;\r\n\r\n  // Get animation config\r\n  addItemsAnimation(listInstance, { animationKey, durationKey, easingKey, staggerKey });\r\n  addListAnimation(listInstance, { durationKey, easingKey });\r\n\r\n  // Get commerce config\r\n  const restartCommerce =\r\n    webflowReady &&\r\n    !!Webflow.require('commerce') &&\r\n    items.some(({ element }) => element.querySelector(`.${COMMERCE_CSS_CLASSES.addToCartForm}`));\r\n\r\n  if (restartCommerce) listInstance.restartCommerce = restartCommerce;\r\n\r\n  // Get lightbox config\r\n  const restartLightbox =\r\n    webflowReady &&\r\n    !!Webflow.require('lightbox') &&\r\n    items.some(({ element }) => element.querySelector(`.${LIGHTBOX_CSS_CLASSES.trigger}`));\r\n\r\n  if (restartLightbox) listInstance.restartLightbox = restartLightbox;\r\n\r\n  // Get resetIx config\r\n  const restartIx = listInstance.getAttribute(resetIxKey) === resetIxValues.true;\r\n  if (restartIx) listInstance.restartIx = restartIx;\r\n\r\n  // Get loader\r\n  const loaderElement = queryElement<HTMLElement>('loader', { instanceIndex });\r\n  if (loaderElement) listInstance.addLoader(loaderElement);\r\n\r\n  // Get items count element\r\n  if (!listInstance.itemsCount) {\r\n    const itemsCount = queryElement<HTMLElement>('itemsCount', { instanceIndex });\r\n    if (itemsCount) listInstance.addItemsCount(itemsCount);\r\n  }\r\n\r\n  // Get page count element\r\n  if (!listInstance.pageCount) {\r\n    const pageCount = queryElement<HTMLElement>('pageCount', { instanceIndex });\r\n    // TODO: Remove this check after 1 week\r\n    if (pageCount && checkCMSCoreVersion('>=', '1.6.0')) listInstance.addPageCount(pageCount);\r\n  }\r\n\r\n  // Get scroll anchor\r\n  if (!listInstance.scrollAnchor) {\r\n    const scrollAnchor = queryElement<HTMLElement>('scrollAnchor', { instanceIndex });\r\n    if (scrollAnchor) listInstance.scrollAnchor = scrollAnchor;\r\n  }\r\n\r\n  // Init mode\r\n  const mode = listInstance.getAttribute(modeKey);\r\n\r\n  if (mode === renderAll) await initRenderAllMode(listInstance);\r\n  else if (mode === infinite) initInfiniteMode(listInstance);\r\n  else if (mode === pagination) await initPaginationMode(listInstance);\r\n  else initDefaultMode(listInstance);\r\n\r\n  return listInstance;\r\n};\r\n", "import type { CMSList } from '$cms/cmscore/src';\r\nimport { importCMSCore } from '$global/import/cmscore';\r\n\r\nimport { initLoadInstance } from './factory';\r\nimport { ATTRIBUTE, getSelector } from './utils/constants';\r\n\r\n/**\r\n * Inits the attribute.\r\n */\r\nexport const init = async (): Promise<CMSList[]> => {\r\n  const cmsCore = await importCMSCore();\r\n  if (!cmsCore) return [];\r\n\r\n  // Create the list instances\r\n  const listInstances = cmsCore.createCMSListInstances([getSelector('element', 'list', { operator: 'prefixed' })]);\r\n\r\n  // Init the modes\r\n  await Promise.all(listInstances.map(initLoadInstance));\r\n\r\n  window.fsAttributes[ATTRIBUTE].resolve?.(listInstances);\r\n\r\n  return listInstances;\r\n};\r\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\nimport { importAnimations } from '$global/import/animation';\r\nimport { importCMSCore } from '$global/import/cmscore';\r\n\r\nimport { version } from '../package.json';\r\nimport { init } from './init';\r\nimport { ATTRIBUTE } from './utils/constants';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\nimportCMSCore();\r\nimportAnimations();\r\n\r\nwindow.fsAttributes[ATTRIBUTE] ||= {};\r\n\r\nconst { preventsLoad } = assessScript();\r\nconst attribute = window.fsAttributes[ATTRIBUTE];\r\n\r\nattribute.version = version;\r\n\r\nif (preventsLoad) attribute.init = init;\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
