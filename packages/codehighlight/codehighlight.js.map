{
  "version": 3,
  "sources": ["../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../global/factory/selectors.ts", "../../global/constants/attributes.ts", "../../global/factory/assess.ts", "../../global/factory/init.ts", "../richtext/src/utils/constants.ts", "src/utils/constants.ts", "src/actions/import.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\n\n/**\n * Constants\n */\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\n\nexport const ATTRIBUTES = {\n  /**\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\n   */\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\n\n  /**\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\n   */\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\n\n  /**\n   * Defines the source of an attribute script.\n   */\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\n\n  /**\n   * Defines a developer script that is not imported from JsDelivr.\n   */\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n", "import { Debug } from '@finsweet/ts-utils';\n\nimport { ATTRIBUTES } from '../constants/attributes';\nimport { GlobalAttributeParams } from '../types/global';\n\n/**\n * Checks the global params of the Attribute `<script>`.\n * @param script The `<script>` element.\n * @returns The {@link GlobalAttributeParams}.\n */\n\nexport const assessScript = (script: HTMLOrSVGScriptElement | null): GlobalAttributeParams => {\n  const { preventLoad, debugMode } = ATTRIBUTES;\n\n  // Check if the Attribute should not be automatically loaded\n  const preventsLoad = typeof script?.getAttribute(preventLoad.key) === 'string';\n\n  // Check if Debug Mode is activated\n  if (typeof script?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\n\n  return { preventsLoad };\n};\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  for (const callback of existingCallbacks) fsAttributes.push(callback);\r\n};\r\n", "import { generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'richtext';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const RICH_TEXT_ELEMENT_KEY = 'rich-text';\r\nexport const COMPONENT_SETTING_KEY = 'component';\r\nexport const SANITIZE_SETTING_KEY = 'sanitize';\r\nexport const RESET_IX_SETTING_KEY = 'reset-ix';\r\n\r\nexport const ATTRIBUTES = {\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines a rich text block instance.\r\n       */\r\n      richText: RICH_TEXT_ELEMENT_KEY,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Defines a custom component.\r\n   */\r\n  component: { key: `${ATTRIBUTES_PREFIX}-${COMPONENT_SETTING_KEY}` },\r\n\r\n  /**\r\n   * Defines if the HTML should be sanitized before rendering it.\r\n   */\r\n  sanitize: { key: `${ATTRIBUTES_PREFIX}-${SANITIZE_SETTING_KEY}`, values: { true: 'true' } },\r\n\r\n  /**\r\n   * Defines if Webflow should be restarted after loading new items.\r\n   */\r\n  resetIx: { key: `${ATTRIBUTES_PREFIX}-${RESET_IX_SETTING_KEY}`, values: { true: 'true' } },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n\r\nexport const IGNORE_LINE_PREFIX = '&lt;!-- fs-richtext-ignore --&gt;';\r\n\r\nexport const DOMPURIFY_SRC = 'https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.es.min.js';\r\n", "import { generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'codehighlight';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const CODE_ELEMENT_KEY = 'code';\r\nexport const LANGUAGES_SETTING_KEY = 'languages';\r\nexport const THEME_SETTING_KEY = 'theme';\r\n\r\nexport const ATTRIBUTES = {\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines a `<code>` element that holds the code to be highlighted.\r\n       */\r\n      code: CODE_ELEMENT_KEY,\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Defines the highlighting theme.\r\n   */\r\n  theme: {\r\n    key: `${ATTRIBUTES_PREFIX}-${THEME_SETTING_KEY}`,\r\n  },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n\r\nexport const HIGHLIGHTJS_VERISON = '11.4.0';\r\n", "import { HIGHLIGHTJS_VERISON } from '../utils/constants';\r\n\r\nlet hljsImport: Promise<unknown>;\r\n\r\n/**\r\n * Dynamically imports highlightJS.\r\n * @param theme The theme name.\r\n * @returns An awaitable {@link Promise}.\r\n */\r\nexport const importHighlightJS = async (theme: string | null) => {\r\n  if (hljsImport) return hljsImport;\r\n\r\n  const script = document.createElement('script');\r\n  script.setAttribute(\r\n    'src',\r\n    `//cdn.jsdelivr.net/gh/highlightjs/cdn-release@${HIGHLIGHTJS_VERISON}/build/highlight.min.js`\r\n  );\r\n\r\n  let link: HTMLLinkElement | undefined;\r\n\r\n  if (theme) {\r\n    link = document.createElement('link');\r\n\r\n    link.setAttribute('rel', 'stylesheet');\r\n    link.setAttribute(\r\n      'href',\r\n      `//cdn.jsdelivr.net/gh/highlightjs/cdn-release@${HIGHLIGHTJS_VERISON}/build/styles/${theme}.min.css`\r\n    );\r\n  }\r\n\r\n  const loadPromise = new Promise((resolve) => {\r\n    let linkLoaded = !link;\r\n    let scriptLoaded = false;\r\n\r\n    const checkFulfill = () => {\r\n      if (linkLoaded && scriptLoaded) resolve(undefined);\r\n    };\r\n\r\n    script.onload = () => {\r\n      scriptLoaded = true;\r\n      checkFulfill();\r\n    };\r\n\r\n    if (link) {\r\n      link.onload = () => {\r\n        linkLoaded = true;\r\n        checkFulfill();\r\n      };\r\n    }\r\n  });\r\n\r\n  hljsImport = loadPromise;\r\n\r\n  document.head.append(script);\r\n  if (link) document.head.append(link);\r\n\r\n  return loadPromise;\r\n};\r\n", "import { ATTRIBUTE as RICH_TEXT_ATTRIBUTE } from 'packages/richtext/src/utils/constants';\r\n\r\nimport { importHighlightJS } from './actions/import';\r\nimport { ATTRIBUTE, ATTRIBUTES, getSelector } from './utils/constants';\r\n\r\n/**\r\n * Inits the attribute.\r\n */\r\nexport const init = async (): Promise<void> => {\r\n  await window.fsAttributes[RICH_TEXT_ATTRIBUTE]?.loading;\r\n\r\n  const referenceElements = [\r\n    ...document.querySelectorAll<HTMLElement>(getSelector('element', 'code', { operator: 'prefixed' })),\r\n  ];\r\n\r\n  const theme = referenceElements.reduce<string | null>((theme, referenceElement) => {\r\n    theme ||= referenceElement.getAttribute(ATTRIBUTES.theme.key);\r\n    return theme;\r\n  }, null);\r\n\r\n  await importHighlightJS(theme);\r\n\r\n  const codeElements = referenceElements.map(initHighlight);\r\n\r\n  window.fsAttributes[ATTRIBUTE].resolve?.(codeElements);\r\n};\r\n\r\n/**\r\n * Inits the code highlighting.\r\n * @param referenceElement The reference element that holds the `<code>` tag.\r\n * @returns The `<code>` element.\r\n */\r\nconst initHighlight = (referenceElement: HTMLElement) => {\r\n  const codeElement = referenceElement.tagName === 'CODE' ? referenceElement : referenceElement.querySelector('code');\r\n  if (!codeElement) return;\r\n\r\n  window.hljs.highlightElement(codeElement);\r\n\r\n  return codeElement;\r\n};\r\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\n\r\nimport { init } from './init';\r\nimport { ATTRIBUTE } from './utils/constants';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\n\r\nconst { currentScript } = document;\r\nconst { preventsLoad } = assessScript(currentScript);\r\n\r\nif (preventsLoad) window.fsAttributes[ATTRIBUTE] = { init };\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
