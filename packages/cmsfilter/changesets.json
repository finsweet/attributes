[{"version":"v1.11.2","date":"17 May 2022","markdown":"- Fixed Reset button rules to require being child Of form select and filter element on support.\r\n"},{"version":"v1.11.1","date":"03 May 2022","markdown":"-  Selector for Collection List updated in schema.\r\n"},{"version":"v1.11.0","date":"19 April 2022","markdown":"- Added support wizard and publishing new schema version\r\n"},{"version":"v1.10.1","date":"10 April 2022","markdown":"- Added created new `CMSFilters.storeFiltersData()` method.\r\n- Added [API docs](https://www.npmjs.com/package/@finsweet/attributes-cmsfilter).\r\n"},{"version":"v1.10.0","date":"10 February 2022","markdown":"Included a new `window.fsAttributes.push()` method in the developer API that provides a standarized way to safely access any Attribute internals once it has fully loaded.\r\nIt can be used like:\r\n\r\n```html\r\n<script>\r\n  window.fsAttributes = window.fsAttributes || [];\r\n  window.fsAttributes.push([\r\n    'cmsfilter',\r\n    (cmsFilters) => {\r\n      console.log('Attribute has successfully loaded!');\r\n      console.log(cmsFilters);\r\n    },\r\n  ]);\r\n</script>\r\n```\r\n"},{"version":"v1.10.0-beta.0","date":"24 January 2022","markdown":"- Internal: implemented `schema.json`.\r\n"},{"version":"v1.9.6","date":"22 January 2022","markdown":"- Updated `examples.json` API to include to the Focused (keyboard) changes in the [Filters UI Kit Examples](https://webflow.com/website/Accessible-Form-Filter-Components).\r\n"},{"version":"v1.9.5","date":"12 January 2022","markdown":"- Fixed small issue in the new tags rendering logic (introduced in `v1.9.4`).\r\n"},{"version":"v1.9.4","date":"12 January 2022","markdown":"- Now checkboxes with `true`/`false` as the value will just output their category name in the Tags.\r\n  For instance, a `true`/`false` checkbox setting a `featured` value would previously render the tags like:\r\n\r\n  - Without `tagcategory`: The tag rendered `true`.\r\n  - With `tagcategory`: The tag rendered `TAG_CATEGORY: true`. Example: `Featured: true`.\r\n\r\n  Instead, now the output will be:\r\n\r\n  - Without `tagcategory`: The tag will render `featured`.\r\n  - With `tagcategory`: The tag will render `TAG_CATEGORY`. Example: `Featured`.\r\n"},{"version":"v1.9.3","date":"30 December 2021","markdown":"- Published [CMS Filter Components](https://cms-filter-components.webflow.io/) as examples in the `examples.json` API.\r\n  These examples will be available to copy right from the Designer using the Finsweet Extension.\r\n"},{"version":"v1.9.2","date":"16 December 2021","markdown":"- Fixed `<select>` elements filtering items when they contained just a portion of the value instead of matching the entire word.\r\n  For instance, a value like `Men` would filter items that contained the word `WoMEN`.\r\n  Now all `<select>` inputs are treated like `checkboxes` and `radios`, their value must be an exact (case insensitive) match like `Men` = `Men` || `men`.\r\n"},{"version":"v1.9.1","date":"15 December 2021","markdown":"- Fixed `fs-cmsfilter-element=\"empty\"` not being correctly displayed.\r\n  This issue was introduced a few days ago with the new `fs-cmsfilter-element=\"initial\"` attribute.\r\n  Now the render cycles take into consideration all possible setups to correctly display the `list`, `empty` and `initial` elements.\r\n"},{"version":"v1.9.0","date":"9 December 2021","markdown":"- Added new `fs-cmsfilter-element=\"initial\"` attribute.\n\n  If added to any element on the page, that specific element will be displayed instead of the `list` whenever there are no active filters.\n  Once the user activated any filter, the `initial` element will hide and the `list` will display.\n\n  **Tip**: To prevent content flashes, the `Collection List Wrapper` can be set to `opacity: 0`.\n"},{"version":"v1.8.2","date":"8 December 2021","markdown":"- Added compatibility with the new `cmsload`'s support for Webflow's native pagination query params.\n  Now users can safely use this feature in conjunction of filters query parameters.\n"},{"version":"v1.8.1","date":"6 December 2021","markdown":"- Fixed `fs-cmsfilter-active` CSS Class not being correctly applied to `Radio` elements that had a default `checked` status.\n"},{"version":"v1.8.0","date":"3 December 2021","markdown":"- Added support to override the `fs-cmsfilter-highlightclass=\"HIGHLIGHT_CSS_CLASS\"` attribute at the filter elements level.\n  Now, the attribute can be used like:\n  - If added to the `list` element, all highlighted elements will receive this Highlight CSS Class. If not defined, it defaults to `.fs-cmsfilter_highlight`\n  - If added to a specific filter element (that has a `fs-cmsfilter-field` attribute), the Highlight CSS Class will be overriden and applied to the matching text in the filtered Collection Items.\n- Added an extra check to make sure the `Tags` are visible when rendering them without the `animations` module being loaded yet.\n"},{"version":"v1.7.3","date":"2 December 2021","markdown":"- Fixed `fs-cmsfilter-tagformat=\"category\"` not preserving the original format of the `IDENTIFIER` when rendering the tags.\n  Now, the tags will show the category text using the exact same format of the identifier (unless the user overrides it with `fs-cmsfilter-tagcategory=\"OVERRIDE_TEXT\"`).\n  For example:\n  - Using `fs-cmsfilter-tagformat=\"category\"` + `fs-cmsfilter-field=\"color\"` will render the tags as `color: SELECTED_VALUE`.\n  - Using `fs-cmsfilter-tagformat=\"category\"` + `fs-cmsfilter-field=\"Color\"` will render the tags as `Color: SELECTED_VALUE`.\n"},{"version":"v1.7.2","date":"1 December 2021","markdown":"- Made sure that filters instances are not duplicated.\n  In some use cases like using `cmscombine` + `cmsfilters`, users added the same exact attributes to all `cmscombine` lists, thus multiple instances were being created causing funky behaviors.\n\n  **Note:** There are still potential situations where `cmscombine` can break builds if users apply duplicated attributes, so we should first educate them to only add attributes to the first `cmscombine` target `list`, not all of them.\n"},{"version":"v1.7.1","date":"29 November 2021","markdown":"- Assured that the `animations` module is fully loaded before the library starts filtering.\n  This caused issues like `Collection Items` and `Tags` that were added on page load using query params to not be animated.\n"},{"version":"v1.7.0","date":"29 November 2021","markdown":"- Released `v1.7.0-beta` to NPM.\n- Created `changesets.json` API.\n"},{"version":"v1.7.0-beta.1","date":"28 November 2021","markdown":"- On top of being able to globally add `fs-cmsfilter-debounce=\"DEBOUNCING_MILISECONDS\"` to the `list`, this attribute can now be added to the filter elements (the ones that have the `fs-cmsfilter-field` attribute).\n  If done, the global debouncing will be overriden by this value.\n  This allows building setups where each filter element has a different debouncing, which can vastly improve UX.\n- Fixed `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` not being removed from Radio Buttons when using a `reset` button.\n- Fixed `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` not working correctly when pre-populating the filters using query params.\n- Fixed `fs-cmsfilter-highlight` not behaving correctly when combining global search highlighting (`*`) with field-specific searches.\n"},{"version":"v1.7.0-beta.0","date":"27 November 2021","markdown":"- Added support to override the `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` attribute at the filter elements level.\n  Now, the attribute can be used like:\n  - If added to the `list` element, all filter elements will receive this Active CSS Class. If not defined, it defaults to `.fs-cmsfilter_active`\n  - If added to a specific filter element (that has a `fs-cmsfilter-field` attribute), the Active CSS Class will be overriden.\n- Added support to use `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` on any type of form element, not just `Checkboxes` and `Radios`.\n  The Active CSS Class will be added whenever the elements are filled with a value.\n- Improved performance on `input` and `restart` events handling.\n"},{"version":"v1.6.1","date":"26 November 2021","markdown":"- Breaking change: renamed `fs-cmsfilter-debouncing` to `fs-cmsfilter-debounce`.\n"},{"version":"v1.6.0","date":"26 November 2021","markdown":"- Added `fs-cmsfilter-debouncing=\"TIME_IN_MS\"`.\n  When used, allows users to modify the default `input` [debouncing](https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086).\n  Defaults to `50`.\n\n- Added `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"`.\n  If specified, all Checkbox Field and Radio Button Field (the parent elements) will receive this class whenever the Checkbox/Radio is checked.\n  Defaults to `.fs-cmsfilter_active`.\n\n- Fixed `fs-cmsfilter-duration` being incorrectly applied.\n"},{"version":"v1.5.4","date":"23 November 2021","markdown":"- Improved accessibility by ensuring unique IDs on dynamically generated form elements in `Collection Lists`.\n"},{"version":"v1.5.3","date":"17 November 2021","markdown":"- Added support for initial state values on `Checkboxes`, `Radio` and `Select` elements.\n  If any of these elements has a default value, on page load the filters will automatically:\n  - Store the value.\n  - Trigger a filter + render workflow.\n  - Sync the tags, if required.\n  - Sync the URL query params, if required.\n"},{"version":"v1.5.2","date":"17 November 2021","markdown":"- Fixed `examples.json` not being available on NPM.\n"},{"version":"v1.5.1","date":"17 November 2021","markdown":"- Added support to override default list animation duration when it was already set by other `cms` packages.\n- Memoized `TagData.textNode` prop so the text node doesn't have to be queried every time a text update is required on a tag.\n"},{"version":"v1.5.0","date":"17 November 2021","markdown":"- Added support for `cmscore` versioning.\n"},{"version":"v1.4.0","date":"16 November 2021","markdown":"- Added a visibility tracker to Submit Buttons. If it's not visible (`display: none`), the list will auto-filter as if there was no Submit Button.\n- Added a window `resize` observer to update the visibility status of the Submit Button.\n- Switched tags from being rendered on `input` events to being rendered on during the filter rendering. This assures that, if a Submit Button exists and it's visible, the tags will only be updated when submitting the form.\n"},{"version":"v1.3.1","date":"16 November 2021","markdown":"- Updated `cmscore` import.\n"},{"version":"v1.3.0","date":"16 November 2021","markdown":"- Added `fs-cmsfilter-tagformat` override at the filters level + a new `fs-cmsfilter-tagcategory` attribute.\n- Updated `cmscore` import.\n"},{"version":"v1.2.0","date":"12 November 2021","markdown":"- Fixed `undefined` errors when checking range validity in single range props.\n- Fixed value checking when multiple non checkbox/radio elements exist in a filter key.\n- Fixed `fs-cmsfilter-range` filtering issue when the `from` value was not specified.\n- Fixed `fs-cmsfilter-range` values not being correctly set from the URL query params on page load.\n- Added support for `fs-rangeslider` sync when setting values from query params on page load.\n- Improved tags rendering when the filter is a `range`. Now it outputs a single tag with a `[FROM_VALUE, TO_VALUE]` format, replacing the `undefined` values with a double dash `--`.\n- Exposed the `CMSFilters` instances at `window.fsAttributes.cms.filtersInstances`.\n"},{"version":"v1.1.2","date":"12 November 2021","markdown":"- Added support to parse numbers that contain symbols like `$` or `,`.\n"},{"version":"v1.1.0","date":"11 November 2021","markdown":"- Added new `fs-cmsfilter-element=\"filter-results-count\"` attribute.\n  It can be placed in any Text element inside a `Checkbox Field` or `Radio Field`, and this element will display the amount of items that match that particular filter.\n  The results count is dynamically updated every time a filter is applied, only showing the available items in the current filter query.\n- Added new `fs-cmsfilter-hideempty=\"true\"` attribute.\n  It can be added to any `Checkbox` or `Radio`, specifically to the same element where the `fs-cmsfilter-field=\"IDENTIFIER\"` attribute is added.\n  When the current filter has no results in the list, the `Checkbox`/`Radio` element is hidden.\n  Very useful to narrow down options to the users when other filters are applied.\n- Internal refactorings / performance improvements.\n"},{"version":"v1.0.2","date":"11 November 2021","markdown":"- Fixed list animation issue on `nestinitialitems` event when the list was initially filtered by query params.\n- Updated `cmscore` import.\n"},{"version":"v1.0.1","date":"10 November 2021","markdown":"- Updated `cmscore` import.\n"},{"version":"v1.0.0","date":"3 October 2021","markdown":"- Created the attribute package.\n"}]