{
  "version": 3,
  "sources": ["../../../node_modules/just-debounce/index.js", "../../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../../node_modules/@finsweet/ts-utils/dist/webflow/css.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/clearFormField.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/cloneNode.js", "../../../node_modules/@finsweet/ts-utils/dist/type-guards/isKeyOf.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/extractCommaSeparatedValues.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/getObjectEntries.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/isVisible.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/sameValues.js", "../../../node_modules/@finsweet/ts-utils/dist/helpers/setFormFieldValue.js", "../../../node_modules/@finsweet/ts-utils/dist/type-guards/isFormField.js", "../../../node_modules/@finsweet/ts-utils/dist/type-guards/isNotEmpty.js", "../../../global/factory/selectors.ts", "../../../global/constants/attributes.ts", "../../../global/factory/assess.ts", "../../../global/factory/init.ts", "../../../global/import/animation.ts", "../../../global/import/cmscore.ts", "src/utils/constants.ts", "src/actions/display.ts", "src/actions/highlight.ts", "src/actions/results.ts", "src/actions/events.ts", "../utils/constants.ts", "../utils/animation.ts", "src/components/CMSFilters.ts", "src/actions/clear.ts", "../utils/props.ts", "src/utils/a11ty.ts", "src/actions/input.ts", "src/actions/collect.ts", "src/utils/dates.ts", "src/utils/numbers.ts", "src/actions/filter.ts", "src/actions/query.ts", "src/actions/tags.ts", "src/components/CMSTags.ts", "src/factory.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["module.exports = debounce;\n\nfunction debounce(fn, delay, atStart, guarantee) {\n  var timeout;\n  var args;\n  var self;\n\n  return function debounced() {\n    self = this;\n    args = Array.prototype.slice.call(arguments);\n\n    if (timeout && (atStart || guarantee)) {\n      return;\n    } else if (!atStart) {\n      clear();\n\n      timeout = setTimeout(run, delay);\n      return timeout;\n    }\n\n    timeout = setTimeout(clear, delay);\n    fn.apply(self, args);\n\n    function run() {\n      clear();\n      fn.apply(self, args);\n    }\n\n    function clear() {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n}\n", "const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "export const CURRENT_CSS_CLASS = 'w--current';\r\nexport const RICH_TEXT_BLOCK_CSS_CLASS = 'w-richtext';\r\nexport const HTML_EMBED_CSS_CLASS = 'w-embed';\r\nexport const SLIDER_CSS_CLASSES = {\r\n    slider: 'w-slider',\r\n    slide: 'w-slide',\r\n    sliderMask: 'w-slider-mask',\r\n    sliderNav: 'w-slider-nav',\r\n    sliderDot: 'w-slider-dot',\r\n    activeSliderDot: 'w-active',\r\n};\r\nexport const TABS_CSS_CLASSES = {\r\n    tabs: 'w-tabs',\r\n    tabsContent: 'w-tab-content',\r\n    tabPane: 'w-tab-pane',\r\n    tabsMenu: 'w-tab-menu',\r\n    tabLink: 'w-tab-link',\r\n    activeTab: 'w--tab-active',\r\n};\r\nexport const NAVBAR_CSS_CLASSES = {\r\n    navMenu: 'w-nav-menu',\r\n};\r\nexport const CMS_CSS_CLASSES = {\r\n    wrapper: 'w-dyn-list',\r\n    list: 'w-dyn-items',\r\n    item: 'w-dyn-item',\r\n    paginationWrapper: 'w-pagination-wrapper',\r\n    paginationNext: 'w-pagination-next',\r\n    paginationPrevious: 'w-pagination-previous',\r\n    pageCount: 'w-page-count',\r\n    emptyState: 'w-dyn-empty',\r\n};\r\nexport const FORM_CSS_CLASSES = {\r\n    formBlock: 'w-form',\r\n    checkboxField: 'w-checkbox',\r\n    checkboxInput: 'w-checkbox-input',\r\n    radioField: 'w-radio',\r\n    radioInput: 'w-radio-input',\r\n    checkboxOrRadioLabel: 'w-form-label',\r\n    checkboxOrRadioFocus: 'w--redirected-focus',\r\n    checkboxOrRadioChecked: 'w--redirected-checked',\r\n    successMessage: 'w-form-done',\r\n    errorMessage: 'w-form-fail',\r\n};\r\nexport const DROPDOWN_CSS_CLASSES = {\r\n    dropdown: 'w-dropdown',\r\n    dropdownToggle: 'w-dropdown-toggle',\r\n    dropdownList: 'w-dropdown-list',\r\n};\r\nexport const COMMERCE_CSS_CLASSES = {\r\n    addToCartForm: 'w-commerce-commerceaddtocartform',\r\n};\r\nexport const LIGHTBOX_CSS_CLASSES = {\r\n    trigger: 'w-lightbox',\r\n};\r\n", "export const simulateEvent = (target, events) => {\r\n    if (!Array.isArray(events))\r\n        events = [events];\r\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\r\n    return eventsSuccess.every((success) => success);\r\n};\r\n", "import { FORM_CSS_CLASSES } from '../webflow/css';\r\nimport { simulateEvent } from './simulateEvent';\r\nconst { radioInput: radioInputCSSClass, checkboxOrRadioFocus: focusCSSClass, checkboxOrRadioChecked: checkedCSSClass, } = FORM_CSS_CLASSES;\r\nexport const clearFormField = (field, omitEvents = []) => {\r\n    const { type } = field;\r\n    if (field instanceof HTMLInputElement && ['checkbox', 'radio'].includes(type)) {\r\n        if (!field.checked)\r\n            return;\r\n        field.checked = false;\r\n        simulateEvent(field, ['click', 'input', 'change'].filter((event) => !omitEvents.includes(event)));\r\n        if (type === 'checkbox')\r\n            return;\r\n        const { parentElement } = field;\r\n        if (!parentElement)\r\n            return;\r\n        const radioInput = parentElement.querySelector(`.${radioInputCSSClass}`);\r\n        if (!radioInput)\r\n            return;\r\n        radioInput.classList.remove(focusCSSClass, checkedCSSClass);\r\n        return;\r\n    }\r\n    field.value = '';\r\n    simulateEvent(field, ['input', 'change'].filter((eventKey) => !omitEvents.includes(eventKey)));\r\n};\r\n", "export const cloneNode = (node, deep = true) => node.cloneNode(deep);\r\n", "export const isKeyOf = (key, source) => !!key && source.includes(key);\r\n", "import { isKeyOf } from '../type-guards/isKeyOf';\r\nexport function extractCommaSeparatedValues(string, compareSource, defaultValue, filterEmpty = true) {\r\n    const emptyValue = defaultValue ? [defaultValue] : [];\r\n    if (!string)\r\n        return emptyValue;\r\n    const items = string.split(',').reduce((accumulatedValue, currentValue) => {\r\n        const value = currentValue.trim();\r\n        if (!filterEmpty || value)\r\n            accumulatedValue.push(value);\r\n        return accumulatedValue;\r\n    }, []);\r\n    if (compareSource) {\r\n        const matches = items.filter((item) => isKeyOf(item, compareSource));\r\n        return matches.length ? matches : emptyValue;\r\n    }\r\n    return items;\r\n}\r\n", "export const getObjectEntries = (object) => Object.entries(object);\r\n", "export const isVisible = (element) => !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\r\n", "export const sameValues = (array1, array2) => array1.every((key) => array2.includes(key)) && array2.every((key) => array1.includes(key));\r\n", "import { simulateEvent } from '.';\r\nexport const setFormFieldValue = (element, value) => {\r\n    const { type } = element;\r\n    if (typeof value === 'boolean') {\r\n        if (!(element instanceof HTMLInputElement) ||\r\n            (type !== 'radio' && type !== 'checkbox') ||\r\n            (type === 'checkbox' && value === false) ||\r\n            value === element.checked)\r\n            return;\r\n        element.checked = value;\r\n    }\r\n    else {\r\n        if (type === 'radio' || type === 'checkbox' || element.value === value)\r\n            return;\r\n        element.value = value;\r\n    }\r\n    simulateEvent(element, ['click', 'input', 'change']);\r\n};\r\n", "export const isFormField = (element) => element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;\r\n", "export const isNotEmpty = (value) => value !== undefined && value !== null;\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\n\n/**\n * Constants\n */\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\n\nexport const ATTRIBUTES = {\n  /**\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\n   */\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\n\n  /**\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\n   */\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\n\n  /**\n   * Defines the source of an attribute script.\n   */\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\n\n  /**\n   * Defines a developer script that is not imported from JsDelivr.\n   */\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n", "import { Debug } from '@finsweet/ts-utils';\n\nimport { ATTRIBUTES } from '../constants/attributes';\nimport { GlobalAttributeParams } from '../types/global';\n\n/**\n * Checks the global params of the Attribute `<script>`.\n * @param script The `<script>` element.\n * @returns The {@link GlobalAttributeParams}.\n */\n\nexport const assessScript = (): GlobalAttributeParams => {\n  const { currentScript } = document;\n  const { preventLoad, debugMode } = ATTRIBUTES;\n\n  // Check if the Attribute should not be automatically loaded\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\n\n  // Check if Debug Mode is activated\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\n\n  return { preventsLoad };\n};\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  fsAttributes.push(...existingCallbacks);\r\n};\r\n", "import { Debug } from '@finsweet/ts-utils';\nimport type { AnimationImport } from 'packages/animation/src/types';\n\nconst ANIMATIONS_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-animation@1/functions.js';\n\n/**\n * Dynamically imports the `animation` package.\n * After the first import, it stores the response in {@link window.fsAttributes.animation}.\n * @returns A `Promise` of the package response.\n */\nexport const importAnimations = async (): AnimationImport => {\n  const { fsAttributes } = window;\n\n  if (fsAttributes.animationImport) return fsAttributes.animationImport;\n\n  try {\n    const animationsImport = import(ANIMATIONS_SOURCE);\n\n    fsAttributes.animationImport = animationsImport;\n\n    return animationsImport;\n  } catch (error) {\n    Debug.alert(`${error}`, 'error');\n    return;\n  }\n};\n", "import { Debug } from '@finsweet/ts-utils';\r\n\r\nimport type { CMSCoreImport } from '$cms/cmscore/src/types';\r\n\r\nconst CMS_CORE_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-cmscore@1/cmscore.js';\r\n\r\n/**\r\n * Dynamically imports the `cms/cmscore` package.\r\n * After the first import, it stores the response in {@link window.fsAttributes.cms.coreImport}.\r\n *\r\n * Once the import has finished, it also stores the `cmscore` version so other `cms` packages can access it.\r\n *\r\n * @returns A `Promise` of the package response.\r\n */\r\nexport const importCMSCore = async (): CMSCoreImport => {\r\n  const { fsAttributes } = window;\r\n\r\n  fsAttributes.cms ||= {};\r\n  const { cms } = fsAttributes;\r\n\r\n  if (cms.coreImport) return cms.coreImport;\r\n\r\n  try {\r\n    const cmsCoreImport: CMSCoreImport = import(CMS_CORE_SOURCE);\r\n\r\n    cms.coreImport = cmsCoreImport;\r\n\r\n    cmsCoreImport.then((cmsCore) => {\r\n      if (cmsCore) cms.coreVersion ||= cmsCore.version;\r\n    });\r\n\r\n    return cmsCoreImport;\r\n  } catch (error) {\r\n    Debug.alert(`${error}`, 'error');\r\n    return;\r\n  }\r\n};\r\n", "import { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\n\nexport const ATTRIBUTE = 'cmsfilter';\n\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\n\nexport const LIST_ELEMENT_KEY = 'list';\nexport const FILTERS_ELEMENT_KEY = 'filters';\nexport const EMPTY_ELEMENT_KEY = 'empty';\nexport const INITIAL_ELEMENT_KEY = 'initial';\nexport const RESULTS_COUNT_ELEMENT_KEY = 'results-count';\nexport const FILTER_RESULTS_COUNT_ELEMENT_KEY = 'filter-results-count';\nexport const ITEMS_COUNT_ELEMENT_KEY = 'items-count';\nexport const TAG_TEMPLATE_ELEMENT_KEY = 'tag-template';\nexport const TAG_TEXT_ELEMENT_KEY = 'tag-text';\nexport const TAG_REMOVE_ELEMENT_KEY = 'tag-remove';\nexport const SCROLL_ANCHOR_ELEMENT_KEY = 'scroll-anchor';\nexport const RESET_ELEMENT_KEY = 'reset';\nexport const FIELD_SETTING_KEY = 'field';\nexport const RESET_SETTING_KEY = 'reset';\nexport const MATCH_SETTING_KEY = 'match';\nexport const MATCH_SETTING_VALUES = { any: 'any', all: 'all' } as const;\nexport const RANGE_SETTING_KEY = 'range';\nexport const RANGE_SETTING_VALUES = { from: 'from', to: 'to' } as const;\nexport const TYPE_SETTING_KEY = 'type';\nexport const TYPE_SETTING_VALUES = { date: 'date' } as const;\nexport const SHOW_QUERY_SETTING_KEY = 'showquery';\nexport const SHOW_QUERY_SETTING_VALUES = { true: 'true' } as const;\nexport const HIDE_EMPTY_SETTING_KEY = 'hideempty';\nexport const HIDE_EMPTY_SETTING_VALUES = { true: 'true' } as const;\nexport const HIGHLIGHT_SETTING_KEY = 'highlight';\nexport const HIGHLIGHT_SETTING_VALUES = { true: 'true' } as const;\nexport const HIGHLIGHT_CLASS_SETTING_KEY = 'highlightclass';\nexport const ACTIVE_CLASS_SETTING_KEY = 'active';\nexport const DEBOUNCE_SETTING_KEY = 'debounce';\nexport const TAG_FORMAT_SETTING_KEY = 'tagformat';\nexport const TAG_FORMAT_SETTING_VALUES = { category: 'category' } as const;\nexport const TAG_CATEGORY_SETTING_KEY = 'tagcategory';\nexport const EASING_SETTING_KEY = 'easing';\nexport const DURATION_SETTING_KEY = 'duration';\n\nexport const ATTRIBUTES = {\n  element: {\n    key: `${ATTRIBUTES_PREFIX}-element`,\n    values: {\n      /**\n       * Defines a list to be filtered.\n       */\n      list: generateDynamicAttibuteValue(LIST_ELEMENT_KEY),\n\n      /**\n       * Defines the `Form` that holds the filters.\n       */\n      filters: generateDynamicAttibuteValue(FILTERS_ELEMENT_KEY),\n\n      /**\n       * Defines the Empty State element for when there are no filetered elements to show.\n       */\n      empty: generateDynamicAttibuteValue(EMPTY_ELEMENT_KEY),\n\n      /**\n       * Defines an optional Initial State element for when there are no applied filters.\n       */\n      initial: generateDynamicAttibuteValue(INITIAL_ELEMENT_KEY),\n\n      /**\n       * Defines an element that will display all existing results.\n       */\n      resultsCount: generateDynamicAttibuteValue(RESULTS_COUNT_ELEMENT_KEY),\n\n      /**\n       * Defines an element that will display the existing results for a specific filter.\n       */\n      filterResultsCount: generateDynamicAttibuteValue(FILTER_RESULTS_COUNT_ELEMENT_KEY),\n\n      /**\n       * Defines an element where to display the total items of the list.\n       */\n      itemsCount: generateDynamicAttibuteValue(ITEMS_COUNT_ELEMENT_KEY),\n\n      /**\n       * Defines a tag template element.\n       */\n      tagTemplate: generateDynamicAttibuteValue(TAG_TEMPLATE_ELEMENT_KEY),\n\n      /**\n       * Defines the text node of a tag.\n       */\n      tagText: generateDynamicAttibuteValue(TAG_TEXT_ELEMENT_KEY),\n\n      /**\n       * Defines a remove trigger element of a tag.\n       */\n      tagRemove: generateDynamicAttibuteValue(TAG_REMOVE_ELEMENT_KEY),\n\n      /**\n       * Defines an element where to scroll the view every time a filter is applied.\n       */\n      scrollAnchor: generateDynamicAttibuteValue(SCROLL_ANCHOR_ELEMENT_KEY),\n\n      /**\n       * Defines a button that resets all filters when clicked.\n       */\n      reset: RESET_ELEMENT_KEY,\n    },\n  },\n\n  /**\n   * Defines a field key to group filters.\n   */\n  field: { key: `${ATTRIBUTES_PREFIX}-${FIELD_SETTING_KEY}` },\n\n  /**\n   * Defines a specific field key to be resetted when clicking a Reset button.\n   */\n  reset: { key: `${ATTRIBUTES_PREFIX}-${RESET_SETTING_KEY}` },\n\n  /**\n   * Defines the matching mode.\n   * Available values: {@link MATCHES}.\n   * `any` by default.\n   */\n  match: {\n    key: `${ATTRIBUTES_PREFIX}-${MATCH_SETTING_KEY}`,\n    values: MATCH_SETTING_VALUES,\n  },\n\n  /**\n   * Defines a range to filter.\n   * Available values: {@link MODES.range}.\n   */\n  range: {\n    key: `${ATTRIBUTES_PREFIX}-${RANGE_SETTING_KEY}`,\n    values: RANGE_SETTING_VALUES,\n  },\n\n  /**\n   * Defines a specific field type.\n   */\n  type: { key: `${ATTRIBUTES_PREFIX}-${TYPE_SETTING_KEY}`, values: TYPE_SETTING_VALUES },\n\n  /**\n   * Defines if the filter query params should be displayed on the URL.\n   */\n  showQuery: { key: `${ATTRIBUTES_PREFIX}-${SHOW_QUERY_SETTING_KEY}`, values: SHOW_QUERY_SETTING_VALUES },\n\n  /**\n   * Defines if a filter element should be hidden when there are no results for it.\n   */\n  hideEmpty: { key: `${ATTRIBUTES_PREFIX}-${HIDE_EMPTY_SETTING_KEY}`, values: HIDE_EMPTY_SETTING_VALUES },\n\n  /**\n   * Defines if the filter query should highlight the matching item props.\n   * It's applied to the input elements.\n   */\n  highlight: { key: `${ATTRIBUTES_PREFIX}-${HIGHLIGHT_SETTING_KEY}`, values: HIGHLIGHT_SETTING_VALUES },\n\n  /**\n   * Defines the highlight CSS class to be used to highlight elements.\n   * Defaults to {@link DEFAULT_HIGHLIGHT_CSS_CLASS}.\n   */\n  highlightCSS: { key: `${ATTRIBUTES_PREFIX}-${HIGHLIGHT_CLASS_SETTING_KEY}` },\n\n  /**\n   * Defines an active CSS class that will be added to checked checkboxes/radios's parent element.\n   * Defaults to {@link DEFAULT_ACTIVE_CSS_CLASS}.\n   */\n  activeCSS: { key: `${ATTRIBUTES_PREFIX}-${ACTIVE_CLASS_SETTING_KEY}` },\n\n  /**\n   * Defines the debouncing for input events.\n   * Defaults to {@link DEFAULT_DEBOUNCING}.\n   */\n  debouncing: { key: `${ATTRIBUTES_PREFIX}-${DEBOUNCE_SETTING_KEY}` },\n\n  /**\n   * Defines the format of the tags.\n   * Available values: {@link TAG_FORMATS}.\n   */\n  tagFormat: { key: `${ATTRIBUTES_PREFIX}-${TAG_FORMAT_SETTING_KEY}` },\n\n  /**\n   * Overrides the key display of a filter when using the `category` tag format.\n   */\n  tagCategory: { key: `${ATTRIBUTES_PREFIX}-${TAG_CATEGORY_SETTING_KEY}` },\n\n  /**\n   * Defines the easing function of the list animation.\n   * Allowed values are defined in {@link \"packages/animations\"}.\n   */\n  easing: { key: `${ATTRIBUTES_PREFIX}-${EASING_SETTING_KEY}` },\n\n  /**\n   * Defines the duration of the list animation.\n   */\n  duration: { key: `${ATTRIBUTES_PREFIX}-${DURATION_SETTING_KEY}` },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n\nexport const MATCHES = Object.values(MATCH_SETTING_VALUES);\nexport const MODES = {\n  range: Object.values(RANGE_SETTING_VALUES),\n} as const;\n\nexport const TAG_FORMATS = Object.values(TAG_FORMAT_SETTING_VALUES);\n\nexport const DEFAULT_HIGHLIGHT_CSS_CLASS = 'fs-cmsfilter_highlight';\nexport const DEFAULT_ACTIVE_CSS_CLASS = 'fs-cmsfilter_active';\n\nexport const DEFAULT_DEBOUNCING = '50';\n", "import type { CMSFilters } from '../components/CMSFilters';\n\n/**\n * Hides / shows filter elements based on their results.\n * @param filtersInstance The {@link CMSFilters} instance.\n */\nexport const displayFilterElements = ({ filtersData }: CMSFilters) => {\n  for (const { elements } of filtersData) {\n    for (const elementData of elements) {\n      const { resultsCount, hidden, hideEmpty } = elementData;\n\n      if (!hideEmpty) continue;\n\n      const mustHide = resultsCount === 0;\n\n      if (mustHide === hidden) continue;\n\n      elementData.hidden = mustHide;\n      hideEmpty.style.display = mustHide ? 'none' : '';\n    }\n  }\n};\n", "import type { CMSItem } from '$cms/cmscore/src';\n\n/**\n * Adds/removes highlighting to the maching prop elements of a specific `CMSItem`.\n *\n * @param item A {@link CMSItem} instance.\n * @param highlightCSSClass The CSS Class to appy.\n */\nexport const toggleHighlight = ({ props }: CMSItem) => {\n  for (const propKey in props) {\n    const { elements, values, highlightData } = props[propKey];\n\n    if (!highlightData) continue;\n\n    for (const propValue of values) {\n      const elementData = elements.get(propValue);\n      if (!elementData) continue;\n\n      const { element, originalHTML } = elementData;\n\n      const existingHighlightData = highlightData.get(propValue);\n\n      if (!existingHighlightData) {\n        element.innerHTML = originalHTML;\n\n        continue;\n      }\n\n      const { filterValue, highlightCSSClass } = existingHighlightData;\n\n      const regex = new RegExp(filterValue || propValue, 'gi');\n\n      element.innerHTML = originalHTML.replace(regex, `<span class=\"${highlightCSSClass}\">$&</span>`);\n    }\n  }\n};\n\n/**\n * Clears all highlightings of a `CMSItem`.\n *\n * @param item The {@link CMSItem} to clear.\n */\nexport const restartHighlight = ({ props }: CMSItem) => {\n  for (const propKey in props) props[propKey].highlightData = new Map();\n};\n", "import type { CMSList } from '$cms/cmscore/src';\n\nimport type { CMSFilters } from '../components/CMSFilters';\nimport type { FilterElement } from '../utils/types';\n\n/**\n * Updates the displayed results on the `resultsElement`.\n * @param filtersInstance A {@link CMSFilters} instance.\n * @param listInstance A {@link CMSList} instance.\n */\nexport const updateListResults = ({ resultsElement }: CMSFilters, { validItems }: CMSList) => {\n  if (!resultsElement) return;\n\n  resultsElement.textContent = `${validItems.length}`;\n};\n\n/**\n * Updates the displayed results of specific filters' `resultsElement`.\n * @param filtersInstance A {@link CMSFilters} instance.\n */\nexport const updateFilterKeyResults = ({ filtersData }: CMSFilters) => {\n  for (const { elements } of filtersData) {\n    for (const { resultsElement, resultsCount } of elements) {\n      if (!resultsElement) continue;\n\n      resultsElement.textContent = `${resultsCount}`;\n    }\n  }\n};\n\n/**\n * Updates the `resultsCount` for each filter element.\n * @param filtersInstance A {@link CMSFilters} instance.\n * @param listInstance A {@link CMSList} instance.\n */\nexport const syncFilterKeyResults = ({ filtersData }: CMSFilters, { validItems }: CMSList) => {\n  // Memoize filters data\n  const data: {\n    [filterKey: string]: {\n      [value: string]: FilterElement[];\n    };\n  } = {};\n\n  for (const { elements, filterKeys } of filtersData) {\n    if (filterKeys.length > 1) continue;\n\n    const [filterKey] = filterKeys;\n\n    data[filterKey] ||= {};\n\n    for (const element of elements) {\n      element.resultsCount = 0;\n      data[filterKey][element.value] ||= [];\n      data[filterKey][element.value].push(element);\n    }\n  }\n\n  // Count results\n  for (const { props } of validItems) {\n    for (const filterKey in props) {\n      const filterKeyData = data[filterKey];\n      if (!filterKeyData) continue;\n\n      const { values } = props[filterKey];\n\n      for (const value of values) {\n        const filterElements = filterKeyData[value];\n        if (!filterElements) continue;\n\n        for (const filterElement of filterElements) filterElement.resultsCount += 1;\n      }\n    }\n  }\n};\n", "import type { CMSItem, CMSList } from '$cms/cmscore/src';\n\nimport type { CMSFilters } from '../components/CMSFilters';\nimport { ATTRIBUTES } from '../utils/constants';\nimport { displayFilterElements } from './display';\nimport { toggleHighlight } from './highlight';\nimport { syncFilterKeyResults, updateFilterKeyResults, updateListResults } from './results';\n\nconst {\n  field: { key: fieldKey },\n  range: { key: rangeKey },\n  type: { key: typeKey },\n} = ATTRIBUTES;\n\n/**\n * Listens for events on the `CMSList` and triggers the correspondent actions.\n * @param filtersInstance The {@link CMSFilters} instance.\n * @param listInstance The {@link CMSList} instance.\n */\nexport const listenListEvents = (filtersInstance: CMSFilters, listInstance: CMSList) => {\n  const { highlightResults, showFilterResults, hideEmptyFilters } = filtersInstance;\n\n  listInstance.on('shouldcollectprops', (items: CMSItem[]) => {\n    for (const item of items) item.collectProps({ fieldKey, rangeKey, typeKey });\n  });\n\n  listInstance.on('shouldfilter', async () => await filtersInstance.applyFilters(true));\n\n  listInstance.on('renderitems', (renderedItems) => {\n    updateListResults(filtersInstance, listInstance);\n\n    syncFilterKeyResults(filtersInstance, listInstance);\n\n    if (hideEmptyFilters) displayFilterElements(filtersInstance);\n\n    if (showFilterResults) updateFilterKeyResults(filtersInstance);\n\n    if (highlightResults) for (const item of renderedItems) toggleHighlight(item);\n  });\n\n  listInstance.once('nestinitialitems').then(async (items: CMSItem[]) => {\n    for (const item of items) item.collectProps({ fieldKey, rangeKey, typeKey });\n\n    await filtersInstance.applyFilters(true);\n    await listInstance.renderItems(true);\n  });\n};\n", "export const DEFAULT_LIST_ANIMATION_DURATION = 0.1;\n", "import { getObjectKeys, isKeyOf } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\nimport { importAnimations } from '$global/import/animation';\n\nimport { DEFAULT_LIST_ANIMATION_DURATION } from './constants';\n\n/**\n * Adds list animations to a {@link CMSList}.\n * @param listInstance The `CMSList` instance.\n * @param propKeys\n */\nexport const addListAnimation = async (\n  listInstance: CMSList,\n  { durationKey, easingKey }: { durationKey: string; easingKey: string }\n) => {\n  const animationsImport = await importAnimations();\n  if (!animationsImport) return;\n\n  const {\n    animations: { fade },\n    easings,\n  } = animationsImport;\n\n  const { listAnimation } = listInstance;\n\n  const animationDuration = listInstance.getAttribute(durationKey);\n  const animationEasing = listInstance.getAttribute(easingKey);\n\n  if (listAnimation && !animationDuration && !animationEasing) return;\n\n  const easing = isKeyOf(animationEasing, easings) ? animationEasing : undefined;\n  const duration = animationDuration ? parseFloat(animationDuration) / 2000 : DEFAULT_LIST_ANIMATION_DURATION;\n\n  if (!listAnimation) {\n    listInstance.listAnimation = { ...fade, options: { easing, duration } };\n\n    return;\n  }\n\n  const { options } = listAnimation;\n\n  if (!options) {\n    listAnimation.options = { easing, duration };\n\n    return;\n  }\n\n  options.easing ||= easing;\n  if (animationDuration) options.duration = duration;\n};\n\n/**\n * Adds item animations to a {@link CMSList}.\n * @param listInstance The `CMSList` instance.\n * @param propKeys\n */\nexport const addItemsAnimation = async (\n  listInstance: CMSList,\n  {\n    animationKey,\n    durationKey,\n    easingKey,\n    staggerKey,\n  }: { animationKey: string; durationKey: string; easingKey: string; staggerKey: string }\n) => {\n  const animationsImport = await importAnimations();\n  if (!animationsImport) return;\n\n  const { animations, easings } = animationsImport;\n\n  const animationName = listInstance.getAttribute(animationKey);\n  const animationFunctions = isKeyOf(animationName, getObjectKeys(animations))\n    ? animations[animationName]\n    : animations.fade;\n\n  const animationDuration = listInstance.getAttribute(durationKey);\n  const animationEasing = listInstance.getAttribute(easingKey);\n  const animationStagger = listInstance.getAttribute(staggerKey);\n\n  listInstance.itemsAnimation = {\n    ...animationFunctions,\n    options: {\n      easing: isKeyOf(animationEasing, easings) ? animationEasing : undefined,\n      duration: animationDuration ? parseFloat(animationDuration) / 1000 : undefined,\n      stagger: animationStagger ? parseFloat(animationStagger) : undefined,\n    },\n  };\n};\n", "import { isFormField, isVisible, sameValues } from '@finsweet/ts-utils';\r\nimport type { FormBlockElement } from '@finsweet/ts-utils';\r\nimport debounce from 'just-debounce';\r\n\r\nimport type { CMSList } from '$cms/cmscore/src';\r\nimport { importAnimations } from '$global/import/animation';\r\n\r\nimport { clearFilterData } from '../actions/clear';\r\nimport { collectFiltersData, collectFiltersElements } from '../actions/collect';\r\nimport { displayFilterElements } from '../actions/display';\r\nimport { assessFilter } from '../actions/filter';\r\nimport { handleFilterInput } from '../actions/input';\r\nimport { getQueryParams, setQueryParams } from '../actions/query';\r\nimport { syncFilterKeyResults, updateFilterKeyResults, updateListResults } from '../actions/results';\r\nimport { ATTRIBUTES } from '../utils/constants';\r\nimport type { FilterElement } from '../utils/types';\r\nimport type { CMSTags } from './CMSTags';\r\n\r\n// Constants\r\nconst {\r\n  field: { key: fieldKey },\r\n  range: { key: rangeKey },\r\n  type: { key: typeKey },\r\n} = ATTRIBUTES;\r\n\r\n/**\r\n * Instance of a `cmsfilter` form that contains all the filter inputs.\r\n */\r\nexport class CMSFilters {\r\n  /**\r\n   * The <form> element that holds all filters.\r\n   */\r\n  public readonly form;\r\n\r\n  /**\r\n   * An element where the amount of matching results is displayed.\r\n   */\r\n  public readonly resultsElement;\r\n\r\n  /**\r\n   * Reset buttons settings.\r\n   */\r\n  public readonly resetButtonsData;\r\n\r\n  /**\r\n   * A `<input type=\"submit\">` button.\r\n   */\r\n  public readonly submitButton;\r\n\r\n  /**\r\n   * The filters data.\r\n   */\r\n  public readonly filtersData;\r\n\r\n  /**\r\n   * Defines if any filter element that must be hidden when empty exists.\r\n   */\r\n  public readonly hideEmptyFilters;\r\n\r\n  /**\r\n   * Defines if the filters query must be printed in the Address bar.\r\n   */\r\n  private readonly showQueryParams;\r\n\r\n  /**\r\n   * Defines if any filter element has a results display element.\r\n   */\r\n  public readonly showFilterResults;\r\n\r\n  /**\r\n   * Defines if any filter element must highlight its matching results.\r\n   */\r\n  public readonly highlightResults;\r\n\r\n  /**\r\n   * The debounced `applyFilters` action, based on the user's debouncing settings.\r\n   */\r\n  private debouncedApplyFilters?: () => void;\r\n\r\n  /**\r\n   * Defines if some filter is currently being restarted.\r\n   */\r\n  private restartingFilters = false;\r\n\r\n  /**\r\n   * Defines if any filter is currently active.\r\n   */\r\n  private filtersActive?: boolean;\r\n\r\n  /**\r\n   * Defines if the submit button is visible.\r\n   */\r\n  private submitButtonVisible;\r\n\r\n  /**\r\n   * Defines a {@link CMSTags} instance.\r\n   */\r\n  private tagsInstance?: CMSTags;\r\n\r\n  constructor(\r\n    /**\r\n     * Defines the `Form Block` element that hold all filters.\r\n     */\r\n    public readonly formBlock: FormBlockElement,\r\n\r\n    /**\r\n     * Defines a {@link CMSList} instance.\r\n     */\r\n    public readonly listInstance: CMSList,\r\n    {\r\n      resultsElement,\r\n      showQueryParams,\r\n      highlightAll,\r\n      highlightCSSClass,\r\n      activeCSSClass,\r\n      debouncing,\r\n    }: {\r\n      resultsElement: HTMLElement | null;\r\n      showQueryParams: boolean;\r\n      highlightAll: boolean;\r\n      highlightCSSClass: string;\r\n      activeCSSClass: string;\r\n      debouncing: number;\r\n    }\r\n  ) {\r\n    const { form, submitButton, resetButtonsData } = collectFiltersElements(formBlock);\r\n\r\n    this.submitButtonVisible = !!submitButton && isVisible(submitButton);\r\n\r\n    const filtersData = collectFiltersData(form, activeCSSClass, debouncing, highlightAll, highlightCSSClass);\r\n\r\n    this.filtersData = filtersData;\r\n\r\n    this.showFilterResults = filtersData.some(({ elements }) => elements.some(({ resultsElement }) => resultsElement));\r\n\r\n    this.hideEmptyFilters = filtersData.some(({ elements }) => elements.some(({ hideEmpty }) => hideEmpty));\r\n\r\n    this.highlightResults = filtersData.some(({ highlight }) => highlight);\r\n\r\n    this.form = form;\r\n    this.submitButton = submitButton;\r\n    this.resetButtonsData = resetButtonsData;\r\n    this.resultsElement = resultsElement;\r\n    this.showQueryParams = showQueryParams;\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Inits the instance.\r\n   */\r\n  private async init() {\r\n    const { listInstance, hideEmptyFilters, showFilterResults } = this;\r\n\r\n    for (const item of listInstance.items) item.collectProps({ fieldKey, rangeKey, typeKey });\r\n\r\n    updateListResults(this, listInstance);\r\n\r\n    syncFilterKeyResults(this, listInstance);\r\n\r\n    if (hideEmptyFilters) displayFilterElements(this);\r\n\r\n    if (showFilterResults) updateFilterKeyResults(this);\r\n\r\n    getQueryParams(this);\r\n\r\n    await importAnimations();\r\n\r\n    this.applyFilters();\r\n\r\n    this.listenEvents();\r\n  }\r\n\r\n  /**\r\n   * Listens for internal events.\r\n   */\r\n  private async listenEvents() {\r\n    const { form, resetButtonsData, submitButton } = this;\r\n\r\n    // Form\r\n    form.addEventListener('submit', (e) => this.handleSubmit(e));\r\n    form.addEventListener('input', (e) => this.handleInputEvents(e));\r\n\r\n    // Reset buttons\r\n    for (const [resetButton, filterKeys] of resetButtonsData) {\r\n      resetButton?.addEventListener('click', () => this.resetFilters(filterKeys));\r\n    }\r\n\r\n    // Submit button visibility\r\n    if (submitButton) {\r\n      window.addEventListener(\r\n        'resize',\r\n        debounce(() => {\r\n          this.submitButtonVisible = isVisible(submitButton);\r\n        }, 50)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles input events.\r\n   * @param e The `InputEvent`.\r\n   */\r\n  private async handleInputEvents({ target }: Event) {\r\n    const { submitButtonVisible, filtersData, restartingFilters } = this;\r\n\r\n    if (!isFormField(target)) return;\r\n\r\n    let elementData: FilterElement | undefined;\r\n\r\n    const filterData = filtersData.find(({ elements }) => {\r\n      elementData = elements.find((data) => data.element === target);\r\n\r\n      return elementData;\r\n    });\r\n\r\n    if (!filterData || !elementData) return;\r\n\r\n    const validInput = handleFilterInput(target, filterData, elementData);\r\n    if (!validInput) return;\r\n\r\n    if (restartingFilters || submitButtonVisible) return;\r\n\r\n    const { debouncing } = elementData;\r\n\r\n    this.debouncedApplyFilters ||= debounce(this.applyFilters, debouncing);\r\n\r\n    await this.debouncedApplyFilters();\r\n  }\r\n\r\n  /**\r\n   * Handles form submit events.\r\n   * @param e The `Submit` event.\r\n   */\r\n  private async handleSubmit(e: Event) {\r\n    e.preventDefault();\r\n    e.stopImmediatePropagation();\r\n\r\n    await this.applyFilters();\r\n  }\r\n\r\n  /**\r\n   * Toggles the {@link CMSFilters.filtersActive} state.\r\n   * If the {@link CMSList.initialElement} is defined, it toggles its visibility accordingly.\r\n   *\r\n   * @param filtersAreEmpty `true` if there are currently no filters to apply.\r\n   * @returns An awaitable Promise.\r\n   */\r\n  private async toggleFiltersState(filtersAreEmpty: boolean) {\r\n    const { listInstance, filtersActive } = this;\r\n\r\n    const newActiveState = !filtersAreEmpty;\r\n    if (filtersActive === newActiveState) return;\r\n\r\n    this.filtersActive = newActiveState;\r\n\r\n    if (!listInstance.initialElement) return;\r\n\r\n    await listInstance.displayElement(newActiveState ? 'initialElement' : 'wrapper', false, false);\r\n    await listInstance.displayElement(newActiveState ? 'wrapper' : 'initialElement', true, filtersActive !== undefined);\r\n  }\r\n\r\n  /**\r\n   * Mutates each `CMSItem`'s state to define if it should be displayed or not.\r\n   *\r\n   * @param addingItems Defines if new items are being added.\r\n   * In that case, the rendering responsibilities are handled by another controller.\r\n   *\r\n   * @param syncTags Defines if the {@link CMSTags} instance should be syncronized. Defaults to `true`.\r\n   */\r\n  public async applyFilters(addingItems?: boolean, syncTags = true): Promise<void> {\r\n    // Remove current debouncing\r\n    this.debouncedApplyFilters = undefined;\r\n\r\n    const { listInstance, filtersData, filtersActive, highlightResults, tagsInstance, showQueryParams } = this;\r\n    const { items, initialElement } = listInstance;\r\n\r\n    // Abort if no filtering is needed\r\n    const filtersAreEmpty = filtersData.every(({ values }) => !values.size);\r\n\r\n    if (filtersAreEmpty && !filtersActive) {\r\n      await this.toggleFiltersState(filtersAreEmpty);\r\n      return;\r\n    }\r\n\r\n    // Define show/hide of each item based on the match\r\n    for (const item of items) {\r\n      item.valid = assessFilter(item, filtersData, filtersAreEmpty, highlightResults);\r\n    }\r\n\r\n    if (addingItems) return;\r\n\r\n    // Render the items\r\n    await listInstance.switchPage(1, false);\r\n\r\n    listInstance.scrollToAnchor();\r\n\r\n    if (showQueryParams) setQueryParams(filtersData);\r\n\r\n    await Promise.all([\r\n      // Render items\r\n      (async () => {\r\n        if (filtersAreEmpty) {\r\n          await this.toggleFiltersState(filtersAreEmpty);\r\n          await listInstance.renderItems(false, !initialElement);\r\n        } else {\r\n          await listInstance.renderItems(false, !initialElement);\r\n          await this.toggleFiltersState(filtersAreEmpty);\r\n        }\r\n      })(),\r\n\r\n      // Sync the `CMSTags`\r\n      (async () => {\r\n        if (syncTags) await tagsInstance?.syncTags();\r\n      })(),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Resets the active filters.\r\n   * @param filterKey If passed, only this filter key will be resetted.\r\n   * @param value If passed, only that specific value and the elements that hold it will be cleared.\r\n   */\r\n  public async resetFilters(filterKeys?: string[], value?: string): Promise<void> {\r\n    this.restartingFilters = true;\r\n\r\n    const { filtersData } = this;\r\n\r\n    if (!filterKeys || !filterKeys.length) for (const filterData of filtersData) clearFilterData(filterData);\r\n    else {\r\n      const filterData = filtersData.find((data) => sameValues(data.filterKeys, filterKeys));\r\n      if (!filterData) return;\r\n\r\n      clearFilterData(filterData, value);\r\n    }\r\n\r\n    const syncTags = !value;\r\n\r\n    await this.applyFilters(false, syncTags);\r\n\r\n    this.restartingFilters = false;\r\n  }\r\n\r\n  /**\r\n   * Adds a {@link CMSTags} instance.\r\n   * @param tagsInstance The `CMSTags` instance.\r\n   */\r\n  public async addTagsInstance(tagsInstance: CMSTags) {\r\n    this.tagsInstance = tagsInstance;\r\n\r\n    await tagsInstance.syncTags();\r\n  }\r\n}\r\n", "import { clearFormField } from '@finsweet/ts-utils';\n\nimport type { FilterData, FilterElement } from '../utils/types';\n\n/**\n * Clears a record of `FilterData`, including the input values.\n * Emits `input` events on all cleared `FormField` elements.\n *\n * @param filterData The {@link FilterData} object.\n * @param value If passed, only that specific value and the elements that hold it will be cleared.\n */\nexport const clearFilterData = ({ elements, values }: FilterData, value?: string) => {\n  let elementsToClear: FilterElement[];\n\n  if (value) {\n    values.delete(value);\n    elementsToClear = elements.filter((elementData) => elementData.value === value);\n  } else {\n    values.clear();\n    elementsToClear = elements;\n  }\n\n  for (const { element } of elementsToClear) clearFormField(element);\n};\n", "/**\n * Normalizes a property key.\n * - Trims the string.\n * - Lowercases the string.\n *\n * @param propKey The property key to normalize.\n */\nexport function normalizePropKey(propKey: string): string;\nexport function normalizePropKey(propKey?: string | null): string | undefined;\nexport function normalizePropKey(propKey?: string | null): string | undefined {\n  return propKey?.trim().toLowerCase();\n}\n", "import { CMS_CSS_CLASSES } from '@finsweet/ts-utils';\nimport type { FormField } from '@finsweet/ts-utils';\n\n/**\n * Makes sure a `FormField` element has a unique ID, as when using them inside `Collection Lists`, Webflow tends to use the same ID for all children.\n *\n * @param element A {@link FormField} element.\n * @param index The index of the element.\n *\n * @returns Nothing, it mutates the element's ID.\n */\nexport const ensureUniqueFormFieldId = (element: FormField, index: number) => {\n  const isDynamic = element.closest(`.${CMS_CSS_CLASSES.item}`);\n  if (!isDynamic) return;\n\n  element.id = `${element.id}-${index}`;\n};\n", "import type { FormField } from '@finsweet/ts-utils';\r\nimport type { FilterData, FilterElement } from '../utils/types';\r\n\r\n/**\r\n * Updates the `filtersData` object with the new input data.\r\n * Adds/Removes the active CSS Class.\r\n *\r\n * @param element The input element.\r\n * @param filtersData The {@link FiltersData} object.\r\n *\r\n * @returns `true` if the input event was valid and some filter data was updated.\r\n */\r\nexport const handleFilterInput = (element: FormField, filterData: FilterData, elementData: FilterElement): boolean => {\r\n  const { value } = element;\r\n  const { elements, values: filterValues, mode: filterMode } = filterData;\r\n  const { value: storedValue, mode: elementMode, type, activeCSSClass } = elementData;\r\n\r\n  switch (type) {\r\n    case 'checkbox': {\r\n      const { checked } = <HTMLInputElement>element;\r\n\r\n      if (!storedValue) break;\r\n\r\n      // Active CSS\r\n      element.parentElement?.classList[checked ? 'add' : 'remove'](activeCSSClass);\r\n\r\n      filterValues[checked ? 'add' : 'delete'](storedValue);\r\n\r\n      break;\r\n    }\r\n\r\n    case 'radio': {\r\n      const { checked } = <HTMLInputElement>element;\r\n\r\n      // Active CSS\r\n      for (const { element: groupElement, type } of elements) {\r\n        if (type !== 'radio') return false;\r\n\r\n        const addClass = (<HTMLInputElement>groupElement).checked;\r\n\r\n        groupElement.parentElement?.classList[addClass ? 'add' : 'remove'](activeCSSClass);\r\n      }\r\n\r\n      if (!checked || !storedValue) break;\r\n\r\n      filterValues.clear();\r\n      filterValues.add(storedValue);\r\n\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      elementData.value = value;\r\n\r\n      // Active CSS\r\n      element.classList[value ? 'add' : 'remove'](activeCSSClass);\r\n\r\n      // Range mode\r\n      if (filterMode === 'range') {\r\n        const newValues = [...filterValues];\r\n        newValues[elementMode === 'from' ? 0 : 1] = value;\r\n\r\n        if (newValues.some((value) => !!value)) filterData.values = new Set(newValues);\r\n        else filterValues.clear();\r\n\r\n        break;\r\n      }\r\n\r\n      // Regular mode\r\n      filterValues.clear();\r\n\r\n      if (value) filterValues.add(value);\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n", "import {\n  extractCommaSeparatedValues,\n  FORM_CSS_CLASSES,\n  getObjectEntries,\n  isFormField,\n  isKeyOf,\n  sameValues,\n} from '@finsweet/ts-utils';\nimport type { FormBlockElement } from '@finsweet/ts-utils';\n\nimport { normalizePropKey } from '$cms/utils/props';\n\nimport { ensureUniqueFormFieldId } from '../utils/a11ty';\nimport { ATTRIBUTES, getSelector, MATCHES, MODES, queryElement, TAG_FORMATS } from '../utils/constants';\nimport type { FilterData, FilterElement, FiltersData, ResetButtonsData } from '../utils/types';\nimport { handleFilterInput } from './input';\n\n// Constants\nconst {\n  field: { key: fieldKey },\n  reset: { key: resetKey },\n  range: { key: rangeKey },\n  match: { key: matchKey },\n  tagFormat: { key: tagFormatKey },\n  tagCategory: { key: tagCategoryKey },\n  hideEmpty: { key: hideEmptyKey, values: hideEmptyValues },\n  highlight: { key: highlightKey, values: highlightValues },\n  highlightCSS: { key: highlightCSSKey },\n  activeCSS: { key: activeCSSKey },\n  debouncing: { key: debouncingKey },\n} = ATTRIBUTES;\n\nconst { checkboxField: checkboxFieldCSSClass, radioField: radioFieldCSSClass } = FORM_CSS_CLASSES;\n\n/**\n * Collects the base elements of the Filters system: the form, submit button and reset buttons.\n * @param formBlock The Filters Form Block.\n */\nexport const collectFiltersElements = (\n  formBlock: FormBlockElement\n): {\n  form: HTMLFormElement;\n  submitButton: HTMLInputElement | null;\n  resetButtonsData: ResetButtonsData;\n} => {\n  const form = formBlock.querySelector('form') as HTMLFormElement;\n  const submitButton = formBlock.querySelector<HTMLInputElement>('input[type=\"submit\"]');\n\n  const resetButtonElements = formBlock.querySelectorAll<HTMLElement>(\n    getSelector('element', 'reset', { operator: 'prefixed' })\n  );\n  const resetButtonsData: ResetButtonsData = new Map();\n\n  for (const resetButton of resetButtonElements) {\n    const rawFilterKeys = resetButton.getAttribute(resetKey);\n    const filterKeys = rawFilterKeys\n      ? [...new Set(extractCommaSeparatedValues(rawFilterKeys))].map((filterKey) => normalizePropKey(filterKey))\n      : [];\n\n    resetButtonsData.set(resetButton, filterKeys);\n  }\n\n  return { form, submitButton, resetButtonsData };\n};\n\n/**\n * Collects the data of each filter input:\n * - The filter elements.\n * - The filter keys.\n * - The filter mode.\n * - The fixed value, if existing.\n * - The highlight mode.\n *\n * @param form The form that contains the filter fields.\n * @param globalActiveCSSClass The global active CSS Class.\n * @param globalDebouncing The global debouncing value for `input` events.\n * @param highlightAll Defines if all matching values must be highlighted.\n * @param globalHighlightCSSClass The global highlight CSS Class.\n *\n * @returns A {@link FiltersData} Map and a {@link FilterKeyResults} object.\n */\nexport const collectFiltersData = (\n  form: HTMLFormElement,\n  globalActiveCSSClass: string,\n  globalDebouncing: number,\n  highlightAll: boolean,\n  globalHighlightCSSClass: string\n): FiltersData => {\n  const filtersData: FiltersData = [];\n\n  const elements = form.querySelectorAll<HTMLElement>(getSelector('field'));\n\n  elements.forEach((element, index) => {\n    // Collect the filter keys\n    const rawFilterKeys = element.getAttribute(fieldKey);\n    if (!rawFilterKeys) return;\n\n    const originalFilterKeys = [...new Set(extractCommaSeparatedValues(rawFilterKeys))];\n\n    const filterKeys = originalFilterKeys.map((filterKey) => normalizePropKey(filterKey));\n\n    if (!filterKeys.length) return;\n\n    // Collect settings\n    const settings = collectGlobalFilterSettings(\n      element,\n      originalFilterKeys,\n      filterKeys,\n      globalActiveCSSClass,\n      globalDebouncing,\n      highlightAll,\n      globalHighlightCSSClass\n    );\n\n    if (!settings) return;\n\n    const [globalFilterData, globalElementData] = settings;\n\n    // Collect existing data\n    const existingData = filtersData.find((data) => sameValues(filterKeys, data.filterKeys));\n\n    const filterData = existingData || {\n      ...globalFilterData,\n      elements: [],\n    };\n\n    if (!existingData) filtersData.push(filterData);\n\n    // Handle Checkboxes or Radios\n    const checkboxOrRadioField = element.closest<HTMLLabelElement>(`.${checkboxFieldCSSClass}, .${radioFieldCSSClass}`);\n\n    if (checkboxOrRadioField) {\n      const isCheckbox = element instanceof HTMLInputElement;\n\n      const value = isCheckbox ? 'true' : element.textContent || '';\n\n      const fieldElement = isCheckbox ? element : (checkboxOrRadioField.querySelector('input') as HTMLInputElement);\n\n      ensureUniqueFormFieldId(fieldElement, index);\n\n      const resultsElement = queryElement<HTMLElement>('filterResultsCount', {\n        operator: 'prefixed',\n        scope: checkboxOrRadioField,\n      });\n\n      const mustHideEmpty = element.getAttribute(hideEmptyKey) === hideEmptyValues.true;\n      const hideEmpty = mustHideEmpty ? checkboxOrRadioField : undefined;\n\n      const elementData: FilterElement = {\n        ...globalElementData,\n        value,\n        resultsElement,\n        hideEmpty,\n        element: fieldElement,\n        type: fieldElement.type,\n      } as const;\n\n      filterData.elements.push(elementData);\n\n      // Collect initial value\n      handleFilterInput(fieldElement, filterData, elementData);\n\n      return;\n    }\n\n    // Handle other Form Fields\n    if (!isFormField(element) || element.type === 'submit') return;\n\n    const { type, value } = element;\n\n    ensureUniqueFormFieldId(element, index);\n\n    const elementData: FilterElement = {\n      ...globalElementData,\n      element,\n      type,\n      value,\n    };\n\n    filterData.elements.push(elementData);\n\n    // Collect initial value\n    if (type === 'select-one') handleFilterInput(element, filterData, elementData);\n  });\n\n  return filtersData;\n};\n\n/**\n * Collects the global settings from a filter element.\n *\n * @param element The filter element.\n * @param originalFilterKeys The filter keys.\n * @param filterKeys The normalized filter keys.\n * @param globalActiveCSSClass The global active CSS Class.\n * @param globalDebouncing The global debouncing value for `input` events.\n * @param highlightAll Defines if all matching values must be highlighted.\n * @param globalHighlightCSSClass The global highlight CSS Class.\n *\n * @returns A tuple with [globalFilterData, globalElementData].\n */\nconst collectGlobalFilterSettings = (\n  element: HTMLElement,\n  originalFilterKeys: string[],\n  filterKeys: string[],\n  globalActiveCSSClass: string,\n  globalDebouncing: number,\n  highlightAll: boolean,\n  globalHighlightCSSClass: string\n) => {\n  const [rawMatch, rawTagFormat, rawActiveCSSClass, rawDebouncing, rawHighlight, rawHighlightCSSClass] = [\n    matchKey,\n    tagFormatKey,\n    activeCSSKey,\n    debouncingKey,\n    highlightKey,\n    highlightCSSKey,\n  ].map((key) => element.getAttribute(key));\n\n  const match = isKeyOf(rawMatch, MATCHES) ? rawMatch : undefined;\n  const tagFormat = isKeyOf(rawTagFormat, TAG_FORMATS) ? rawTagFormat : undefined;\n  const tagCategory = element.getAttribute(tagCategoryKey);\n  const activeCSSClass = rawActiveCSSClass || globalActiveCSSClass;\n  const debouncing = rawDebouncing ? parseFloat(rawDebouncing) : globalDebouncing;\n  const highlight = highlightAll || rawHighlight === highlightValues.true;\n  const highlightCSSClass = rawHighlightCSSClass || globalHighlightCSSClass;\n\n  const rawMode = element.getAttribute(rangeKey);\n\n  let filterMode: FilterData['mode'] | undefined;\n  let elementMode: FilterElement['mode'] | undefined;\n\n  for (const [key, value] of getObjectEntries(MODES)) {\n    if (isKeyOf(rawMode, value)) {\n      filterMode = key;\n      elementMode = rawMode;\n      break;\n    }\n  }\n\n  // Collect global data\n  const globalFilterData: Omit<FilterData, 'elements'> = {\n    match,\n    filterKeys,\n    originalFilterKeys,\n    highlight,\n    tagFormat,\n    tagCategory,\n    highlightCSSClass,\n    mode: filterMode,\n    values: new Set(),\n  };\n\n  const globalElementData: Omit<FilterElement, 'element' | 'value' | 'type'> = {\n    activeCSSClass,\n    debouncing,\n    resultsCount: 0,\n    mode: elementMode,\n    hidden: false,\n  };\n\n  return [globalFilterData, globalElementData] as const;\n};\n", "/**\n * Constants\n */\nconst dateFormatter = Intl.DateTimeFormat();\n\n/**\n * Converts a string to a `Date` and returns a formatted version.\n * @param value\n * @returns\n */\nexport const normalizeDate = (value: string) => {\n  if (!value) return;\n\n  return new Date(dateFormatter.format(new Date(value)));\n};\n", "/**\n * Converts a string to a number, removing any invalid symbols like `$` or `,`.\n * @param value A string number.\n * @returns The valid number value.\n */\nexport const normalizeNumber = (value: string) => {\n  if (!value) return;\n\n  return parseFloat(value.replace(/[^0-9.-]+/g, ''));\n};\n", "import type { CMSItem } from '$cms/cmscore/src';\n\nimport { normalizeDate } from '../utils/dates';\nimport { normalizeNumber } from '../utils/numbers';\nimport type { FiltersData } from '../utils/types';\nimport { restartHighlight } from './highlight';\n\n/**\n * Assesses if an item should be displayed/hidden based on the filters.\n * @param item The {@link CMSItem} to assess.\n * @param filtersData The {@link FiltersData} object.\n * @param filtersAreEmpty Defines if the current filters are empty.\n * @returns `true` to show, `false` to hide the item.\n */\nexport const assessFilter = (\n  item: CMSItem,\n  filtersData: FiltersData,\n  filtersAreEmpty: boolean,\n  highlightActivated: boolean\n): boolean => {\n  if (highlightActivated) restartHighlight(item);\n\n  if (filtersAreEmpty) return true;\n\n  return filtersData.every((filterData) => checkFilterValidity(item, filterData));\n};\n\n/**\n * Checks if a CMSItem's props match the filter values.\n * @param item The {@link CMSItem} instance.\n * @param filter The data of a specific filter key.\n * @returns `true` when the `CMSItem` matches the conditions.\n */\nconst checkFilterValidity = (\n  item: CMSItem,\n  {\n    filterKeys,\n    values,\n    match,\n    mode: filterMode,\n    highlight,\n    highlightCSSClass,\n    elements: filterElements,\n  }: FiltersData[number]\n) => {\n  const filterValues = [...values];\n  if (!filterValues.length) return true;\n\n  const isGlobal = filterKeys.includes('*');\n\n  if (isGlobal) filterKeys = Object.keys(item.props);\n\n  const validFilterKeys = filterKeys.filter((filterKey) => {\n    // Get prop data\n    const prop = item.props[filterKey];\n    if (!prop) return false;\n\n    const { values, highlightData, type: propType, range: propRange } = prop;\n\n    const propValues = [...values];\n    if (!propValues.length) return false;\n\n    // Range Filter Modes\n    if (filterMode === 'range') {\n      const [propValue] = propValues;\n      const [filterFrom, filterTo] = filterValues;\n\n      const isValid = checkRangeValidity(propValue, filterFrom, filterTo, propType);\n\n      if (isValid && highlight) highlightData?.set(propValue, { highlightCSSClass });\n\n      return isValid;\n    }\n\n    // Regular Filter Modes\n    const matchingFilterValues = filterValues.filter((filterValue) => {\n      // Range Prop Values\n      if (propRange === 'from' || propRange === 'to') {\n        const [propFrom, propTo] = propValues;\n\n        const isValid = checkRangeValidity(filterValue, propFrom, propTo, propType);\n\n        if (isValid && highlight) {\n          highlightData?.set(propFrom, { highlightCSSClass });\n          highlightData?.set(propTo, { highlightCSSClass });\n        }\n\n        return isValid;\n      }\n\n      // Regular Prop Values\n      const hasValue = propValues.some((propValue) => {\n        let isValid: boolean;\n\n        // Date Prop\n        if (propType === 'date' && !isGlobal) {\n          const [filterDateTime, propDateTime] = [filterValue, propValue].map((value) =>\n            normalizeDate(value)?.getTime()\n          );\n\n          isValid = filterDateTime === propDateTime;\n        }\n\n        // Single Prop Value\n        else if (\n          filterElements.some(({ type }) => !['checkbox', 'radio', 'select-one'].includes(type)) ||\n          filterKeys.length > 1\n        ) {\n          isValid = propValue.toLowerCase().includes(filterValue.toLowerCase());\n        }\n\n        // Multiple Prop Values\n        else isValid = filterValue.toLowerCase() === propValue.toLowerCase();\n\n        if (isValid && highlight) highlightData?.set(propValue, { highlightCSSClass, filterValue });\n\n        return isValid;\n      });\n\n      return hasValue;\n    });\n\n    return match === 'all' ? matchingFilterValues.length === filterValues.length : matchingFilterValues.length > 0;\n  });\n\n  return match === 'all' ? validFilterKeys.length === filterKeys.length : validFilterKeys.length > 0;\n};\n\n/**\n * Checks if a value matches the specified `from` and `to` range.\n * @param value The value to assess.\n * @param from The range start.\n * @param to The range end.\n * @param type The type of the values.\n * @returns `true` if it's valid.\n */\nconst checkRangeValidity = (value: string, from: string, to: string, type?: string | null) => {\n  const [normalizedValue, normalizedFrom, normalizedTo] = [value, from, to].map((string) =>\n    type === 'date' ? normalizeDate(string) : normalizeNumber(string)\n  );\n\n  if (!normalizedValue) return false;\n\n  if (!from && typeof normalizedTo !== 'undefined') return normalizedValue <= normalizedTo;\n\n  if (!to && typeof normalizedFrom !== 'undefined') return normalizedValue >= normalizedFrom;\n\n  if (typeof normalizedTo === 'undefined' || typeof normalizedFrom === 'undefined') return false;\n\n  return normalizedValue >= normalizedFrom && normalizedValue <= normalizedTo;\n};\n", "import { extractCommaSeparatedValues, setFormFieldValue } from '@finsweet/ts-utils';\n\nimport { normalizePropKey } from '$cms/utils/props';\n\nimport type { CMSFilters } from '../components/CMSFilters';\nimport type { FiltersData } from '../utils/types';\nimport { handleFilterInput } from './input';\n\nconst { location, history } = window;\n\n/**\n * Retrieves the existing query parameters of the `window.location` and applies the values to the filters.\n * @param cmsFilters The {@link CMSFilters} instance to update.\n */\nexport const getQueryParams = (cmsFilters: CMSFilters): boolean => {\n  let queryParamsValid = false;\n\n  const { filtersData } = cmsFilters;\n\n  const url = new URL(location.href);\n  const { searchParams } = url;\n\n  for (const searchParam of searchParams) {\n    const queryKey = normalizePropKey(searchParam[0]);\n    const queryValue = searchParam[1];\n\n    const filterData = filtersData.find(({ filterKeys }) => filterKeys.length === 1 && filterKeys.includes(queryKey));\n    if (!filterData) continue;\n\n    const queryValues = extractCommaSeparatedValues(queryValue, undefined, undefined, false);\n    if (!queryValues.length) continue;\n\n    queryParamsValid = true;\n\n    const { elements, mode } = filterData;\n\n    // Range Values\n    if (mode === 'range') {\n      const [fromValue, toValue] = queryValues;\n\n      const fromElements = elements.filter(({ mode }) => mode === 'from');\n      const toElements = elements.filter(({ mode }) => mode === 'to');\n\n      if (fromValue && fromElements.length) {\n        for (const elementData of fromElements) {\n          const { element, type } = elementData;\n\n          if (type === 'checkbox' || type === 'radio') setFormFieldValue(element, true);\n          else setFormFieldValue(element, fromValue);\n\n          handleFilterInput(element, filterData, elementData);\n        }\n      }\n\n      if (toValue && toElements) {\n        for (const elementData of toElements) {\n          const { element, type } = elementData;\n\n          if (type === 'checkbox' || type === 'radio') setFormFieldValue(element, true);\n          else setFormFieldValue(element, toValue);\n\n          handleFilterInput(element, filterData, elementData);\n        }\n      }\n\n      continue;\n    }\n\n    // Regular Values\n    for (const queryValue of queryValues) {\n      for (const elementData of elements) {\n        const { element, value, type } = elementData;\n\n        if (value === queryValue && (type === 'checkbox' || type === 'radio')) setFormFieldValue(element, true);\n        else if (!value && type !== 'checkbox' && type !== 'radio') setFormFieldValue(element, queryValue);\n        else continue;\n\n        handleFilterInput(element, filterData, elementData);\n      }\n    }\n  }\n\n  return queryParamsValid;\n};\n\n/**\n * Adds the filter values as query params in the current `window.location`.\n * @param filtersData\n */\nexport const setQueryParams = (filtersData: FiltersData) => {\n  const url = new URL(location.href);\n  const { searchParams } = url;\n\n  for (const {\n    filterKeys: [filterKey],\n    values,\n  } of filtersData) {\n    if (!values.size) {\n      searchParams.delete(filterKey);\n      continue;\n    }\n\n    const value = [...values].join(',');\n\n    searchParams.set(filterKey, value);\n  }\n\n  history.replaceState(null, '', url.toString());\n};\n", "import { queryElement } from '../utils/constants';\r\nimport type { TagData, TagFormat } from '../utils/types';\r\n\r\n/**\r\n * Updates the innter text of a filter tag.\r\n * @param tagData A {@link TagData} record.\r\n * @param format The output format.\r\n */\r\nexport const updateTagText = (\r\n  { values, textNode, filterData: { originalFilterKeys, mode, tagFormat, tagCategory } }: TagData,\r\n  globalTagsFormat?: TagFormat\r\n): void => {\r\n  // Capitalize the filter keys and join them\r\n  const keys = tagCategory || originalFilterKeys.join(', ');\r\n\r\n  // Format the value\r\n  let value: string;\r\n\r\n  if (mode === 'range') value = `[${values.map((value) => value || '--').join(', ')}]`;\r\n  else [value] = values;\r\n\r\n  // Set the new text\r\n  let textContent: string;\r\n\r\n  if (value === 'true') textContent = keys;\r\n  else if ((tagFormat || globalTagsFormat) === 'category') textContent = `${keys}: ${value}`;\r\n  else textContent = value;\r\n\r\n  textNode.textContent = textContent;\r\n};\r\n\r\n/**\r\n * Checks if a tag has a specific `tag-remove` defined element.\r\n * @param tagElement\r\n */\r\n// prettier-ignore\r\nexport const hasRemoveTrigger = (tagElement: HTMLElement): boolean => !!queryElement('tagRemove', { operator: 'prefixed', scope: tagElement });\r\n", "import { cloneNode, Debug } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\n\nimport { hasRemoveTrigger, updateTagText } from '../actions/tags';\nimport { ATTRIBUTES, getSelector, queryElement } from '../utils/constants';\nimport type { FilterData, TagData, TagFormat, TagsData } from '../utils/types';\nimport { CMSFilters } from './CMSFilters';\n\nexport class CMSTags {\n  private readonly wrapper: HTMLElement;\n\n  private tagsData: TagsData = [];\n  private hasRemoveTrigger = false;\n\n  constructor(\n    private readonly template: HTMLElement,\n    private readonly filtersInstance: CMSFilters,\n    private readonly listInstance: CMSList,\n    private readonly globalTagsFormat?: TagFormat\n  ) {\n    this.wrapper = template.parentElement || Debug.alert('The tags have no parent wrapper.', 'error');\n\n    this.init();\n  }\n\n  /**\n   * Inits the instance.\n   */\n  private init() {\n    const { template, wrapper } = this;\n\n    template.remove();\n\n    this.hasRemoveTrigger = hasRemoveTrigger(template);\n\n    wrapper.addEventListener('click', (e) => this.handleClick(e));\n  }\n\n  /**\n   * Handles click events on the `wrapper` element.\n   * @param e The Mouse Event.\n   */\n  private handleClick(e: MouseEvent) {\n    const { target } = e;\n\n    if (!(target instanceof Element)) return;\n\n    const { hasRemoveTrigger, tagsData, listInstance } = this;\n\n    const tagElement = target.closest<HTMLElement>(\n      getSelector('element', 'tagTemplate', { instanceIndex: listInstance.getInstanceIndex(ATTRIBUTES.element.key) })\n    );\n    if (!tagElement) return;\n\n    const removeElement = target.closest(getSelector('element', 'tagRemove', { operator: 'prefixed' }));\n    if (hasRemoveTrigger && !removeElement) return;\n\n    const tagData = tagsData.find(({ element }) => element === tagElement);\n    if (tagData) this.removeTag(tagData, true);\n  }\n\n  /**\n   * Adds a new tag.\n   * @param filterKeys The `filterKeys` that correspond to the tag.\n   * @param values The `value` that corresponds to the tag.\n   */\n  private async addTag(filterData: FilterData, values: TagData['values']) {\n    const {\n      wrapper,\n      template,\n      tagsData,\n      globalTagsFormat,\n      listInstance: { listAnimation },\n    } = this;\n\n    const element = cloneNode(template);\n\n    const textNode = queryElement('tagText', { operator: 'prefixed', scope: element }) || element;\n\n    const tagData: TagData = {\n      element,\n      values,\n      textNode,\n      filterData,\n    };\n\n    updateTagText(tagData, globalTagsFormat);\n\n    tagsData.push(tagData);\n\n    if (listAnimation) {\n      const { animateIn, options } = listAnimation;\n\n      await animateIn(element, { target: wrapper, ...options });\n    } else {\n      element.style.opacity = '1';\n      wrapper.appendChild(element);\n    }\n  }\n\n  /**\n   * Updates a tag's content.\n   * @param tagData A {@link TagData} record.\n   * @param newValues The new value to store.\n   */\n  private async updateTag(tagData: TagData, newValues: string[]) {\n    const { globalTagsFormat } = this;\n\n    tagData.values = newValues;\n\n    updateTagText(tagData, globalTagsFormat);\n  }\n\n  /**\n   * Removes an existing tag.\n   * @param tagData A {@link TagData} record.\n   * @param resetFilters If set to `true`, the `tagremove` event will be emitted.\n   */\n  private async removeTag(tagData: TagData, resetFilters?: boolean) {\n    const {\n      element,\n      values,\n      filterData: { filterKeys },\n    } = tagData;\n    const {\n      tagsData,\n      filtersInstance,\n      listInstance: { listAnimation },\n    } = this;\n\n    // Remove the data\n    this.tagsData = tagsData.filter((data) => data !== tagData);\n\n    await Promise.all([\n      // Reset filters\n      Promise.all(\n        values.map(async (value) => {\n          if (resetFilters) return filtersInstance.resetFilters(filterKeys, value);\n        })\n      ),\n\n      // Remove the element\n      (async () => {\n        if (listAnimation) {\n          const { animateOut, options } = listAnimation;\n\n          await animateOut(element, { remove: true, ...options });\n        } else element.remove();\n      })(),\n    ]);\n  }\n\n  /**\n   * Syncs the tags with the existing `FiltersData`.\n   * @returns An awaitable Promise that resolves once all animations have concluded.\n   */\n  public async syncTags() {\n    const {\n      tagsData,\n      filtersInstance: { filtersData },\n    } = this;\n\n    await Promise.all(\n      filtersData.map((filterData) => {\n        const { values, mode: filterMode } = filterData;\n\n        const filterValues = [...values];\n\n        const existingTags = tagsData.filter((tagData) => tagData.filterData === filterData);\n\n        // Just update the text if it's a single value or a range\n        if (\n          existingTags.length === 1 &&\n          (filterValues.length === 1 || (filterMode === 'range' && filterValues.length))\n        ) {\n          const [tagData] = existingTags;\n\n          this.updateTag(tagData, filterValues);\n\n          return;\n        }\n\n        // Otherwise re-render the differences\n        const valuesToAdd = [...filterValues].filter(\n          (filterValue) => !existingTags.some(({ values }) => values.includes(filterValue))\n        );\n\n        const tagsToRemove = existingTags.filter(({ values }) =>\n          values.every((value) => !filterValues.includes(value))\n        );\n\n        return Promise.all([\n          // Add tags\n          (async () => {\n            if (filterMode === 'range' && valuesToAdd.length) return this.addTag(filterData, valuesToAdd);\n\n            return Promise.all(valuesToAdd.map((value) => this.addTag(filterData, [value])));\n          })(),\n\n          // Remove tags\n          Promise.all(tagsToRemove.map((tagData) => this.removeTag(tagData))),\n        ]);\n      })\n    );\n  }\n}\n", "import { isKeyOf, FORM_CSS_CLASSES } from '@finsweet/ts-utils';\nimport type { FormBlockElement } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\nimport { addListAnimation } from '$cms/utils/animation';\n\nimport { CMSFilters } from './components/CMSFilters';\nimport { CMSTags } from './components/CMSTags';\nimport {\n  ATTRIBUTES,\n  DEFAULT_ACTIVE_CSS_CLASS,\n  DEFAULT_DEBOUNCING,\n  DEFAULT_HIGHLIGHT_CSS_CLASS,\n  queryElement,\n  TAG_FORMATS,\n} from './utils/constants';\n\n// Constants destructuring\nconst {\n  element: { key: elementKey },\n  duration: { key: durationKey },\n  easing: { key: easingKey },\n  showQuery: { key: showQueryKey, values: showQueryValues },\n  tagFormat: { key: tagsFormatKey },\n  highlight: { key: highlightKey, values: highlightValues },\n  highlightCSS: { key: highlightCSSKey },\n  activeCSS: { key: activeCSSKey },\n  debouncing: { key: debouncingKey },\n} = ATTRIBUTES;\n\n/**\n * Creates a new {@link CMSFilters} instance.\n * @param listInstance The {@link CMSList} instance.\n * @returns The new instance, if valid.\n */\nexport const createCMSFiltersInstance = (listInstance: CMSList): CMSFilters | undefined => {\n  const instanceIndex = listInstance.getInstanceIndex(elementKey);\n\n  // Base elements\n  const filters = queryElement('filters', { instanceIndex });\n  if (!filters) return;\n\n  const formBlock = filters.closest<FormBlockElement>(`.${FORM_CSS_CLASSES.formBlock}`);\n  if (!formBlock) return;\n\n  // Empty State Element\n  const emptyElement = queryElement<HTMLElement>('empty', { instanceIndex });\n  if (emptyElement) listInstance.addEmptyElement(emptyElement);\n\n  // Initial State Element\n  const initialElement = queryElement<HTMLElement>('initial', { instanceIndex });\n  if (initialElement) listInstance.initialElement = initialElement;\n\n  // Scroll Anchor Element\n  if (!listInstance.scrollAnchor) {\n    const scrollAnchor = queryElement<HTMLElement>('scrollAnchor', { instanceIndex });\n    if (scrollAnchor) listInstance.scrollAnchor = scrollAnchor;\n  }\n\n  // Items Count Element\n  if (!listInstance.itemsCount) {\n    const itemsCount = queryElement<HTMLElement>('itemsCount', { instanceIndex });\n    if (itemsCount) listInstance.addItemsCount(itemsCount);\n  }\n\n  // Results Count Element\n  const resultsElement = queryElement<HTMLElement>('resultsCount', { instanceIndex });\n\n  // Query Params\n  const showQueryParams = listInstance.getAttribute(showQueryKey) === showQueryValues.true;\n\n  // Highlight\n  const highlightAll = listInstance.getAttribute(highlightKey) === highlightValues.true;\n  const highlightCSSClass = listInstance.getAttribute(highlightCSSKey) || DEFAULT_HIGHLIGHT_CSS_CLASS;\n\n  // Active CSS\n  const activeCSSClass = listInstance.getAttribute(activeCSSKey) || DEFAULT_ACTIVE_CSS_CLASS;\n\n  // Debouncing\n  const debouncing = parseFloat(listInstance.getAttribute(debouncingKey) || DEFAULT_DEBOUNCING);\n\n  // Make sure instances are unique\n  const {\n    fsAttributes: { cms },\n  } = window;\n\n  cms.filtersInstances ||= [];\n\n  if (cms.filtersInstances[instanceIndex || 0]) return;\n\n  // Create instance\n  const filtersInstance = new CMSFilters(formBlock, listInstance, {\n    resultsElement,\n    showQueryParams,\n    highlightAll,\n    highlightCSSClass,\n    activeCSSClass,\n    debouncing,\n  });\n\n  cms.filtersInstances[instanceIndex || 0] ||= filtersInstance;\n\n  // Add animation\n  addListAnimation(listInstance, { durationKey, easingKey });\n\n  return filtersInstance;\n};\n\n/**\n * Creates a new {@link CMSTags} instance.\n * @param listInstance The {@link CMSList} instance.\n * @param filtersInstance The {@link CMSFilters} instance.\n * @returns The new instance, if valid.\n */\nexport const createCMSTagsInstance = async (\n  listInstance: CMSList,\n  filtersInstance: CMSFilters\n): Promise<CMSTags | undefined> => {\n  const instanceIndex = listInstance.getInstanceIndex(elementKey);\n\n  const tagTemplate = queryElement<HTMLElement>('tagTemplate', { instanceIndex });\n  if (!tagTemplate) return;\n\n  const rawTagsFormat = listInstance.getAttribute(tagsFormatKey);\n  const globalTagsFormat = isKeyOf(rawTagsFormat, TAG_FORMATS) ? rawTagsFormat : undefined;\n\n  const tagsInstance = new CMSTags(tagTemplate, filtersInstance, listInstance, globalTagsFormat);\n\n  await filtersInstance.addTagsInstance(tagsInstance);\n\n  return tagsInstance;\n};\n", "import { isNotEmpty } from '@finsweet/ts-utils';\n\nimport type { CMSList } from '$cms/cmscore/src';\nimport { importCMSCore } from '$global/import/cmscore';\n\nimport { listenListEvents } from './actions/events';\nimport { CMSFilters } from './components/CMSFilters';\nimport { createCMSFiltersInstance, createCMSTagsInstance } from './factory';\nimport { ATTRIBUTE, getSelector } from './utils/constants';\n\n/**\n * Inits the attribute.\n */\nexport const init = async (): Promise<CMSFilters[]> => {\n  const cmsCore = await importCMSCore();\n  if (!cmsCore) return [];\n\n  const listInstances = cmsCore.createCMSListInstances([getSelector('element', 'list', { operator: 'prefixed' })]);\n\n  const filtersInstances = (await Promise.all(listInstances.map(initFilters))).filter(isNotEmpty);\n\n  window.fsAttributes[ATTRIBUTE].resolve?.(filtersInstances);\n\n  return filtersInstances;\n};\n\n/**\n * Creates a new {@link CMSFilters} instance for each {@link CMSList}.\n * @param listInstance The `CMSList` instance.\n */\nconst initFilters = async (listInstance: CMSList) => {\n  // Filters\n  const filtersInstance = createCMSFiltersInstance(listInstance);\n  if (!filtersInstance) return;\n\n  listenListEvents(filtersInstance, listInstance);\n\n  // Tags\n  await createCMSTagsInstance(listInstance, filtersInstance);\n\n  return filtersInstance;\n};\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\nimport { importAnimations } from '$global/import/animation';\r\nimport { importCMSCore } from '$global/import/cmscore';\r\n\r\nimport { version } from '../package.json';\r\nimport { init } from './init';\r\nimport { ATTRIBUTE } from './utils/constants';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\nimportCMSCore();\r\nimportAnimations();\r\n\r\nwindow.fsAttributes[ATTRIBUTE] ||= {};\r\n\r\nconst { preventsLoad } = assessScript();\r\nconst attribute = window.fsAttributes[ATTRIBUTE];\r\n\r\nattribute.version = version;\r\n\r\nif (preventsLoad) attribute.init = init;\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
