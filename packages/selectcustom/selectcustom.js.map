{
  "version": 3,
  "sources": ["../../node_modules/just-debounce/index.js", "../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../node_modules/@finsweet/ts-utils/dist/webflow/css.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/cloneNode.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/findTextNode.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/setFormFieldValue.js", "../../global/factory/selectors.ts", "../../global/constants/attributes.ts", "../../global/factory/assess.ts", "../../global/import/support.ts", "../../global/factory/init.ts", "../cms/cmsselect/src/constants.ts", "../../global/constants/keyboard.ts", "../../global/helpers/dropdowns.ts", "src/utils/constants.ts", "../../global/constants/a11ty.ts", "src/actions/state.ts", "src/actions/events.ts", "src/actions/observe.ts", "src/actions/a11ty.ts", "src/actions/populate.ts", "src/actions/settings.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["module.exports = debounce;\n\nfunction debounce(fn, delay, atStart, guarantee) {\n  var timeout;\n  var args;\n  var self;\n\n  return function debounced() {\n    self = this;\n    args = Array.prototype.slice.call(arguments);\n\n    if (timeout && (atStart || guarantee)) {\n      return;\n    } else if (!atStart) {\n      clear();\n\n      timeout = setTimeout(run, delay);\n      return timeout;\n    }\n\n    timeout = setTimeout(clear, delay);\n    fn.apply(self, args);\n\n    function run() {\n      clear();\n      fn.apply(self, args);\n    }\n\n    function clear() {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n}\n", "const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "export const CURRENT_CSS_CLASS = 'w--current';\r\nexport const RICH_TEXT_BLOCK_CSS_CLASS = 'w-richtext';\r\nexport const HTML_EMBED_CSS_CLASS = 'w-embed';\r\nexport const SLIDER_CSS_CLASSES = {\r\n    slider: 'w-slider',\r\n    slide: 'w-slide',\r\n    sliderMask: 'w-slider-mask',\r\n    sliderNav: 'w-slider-nav',\r\n    sliderDot: 'w-slider-dot',\r\n    activeSliderDot: 'w-active',\r\n};\r\nexport const TABS_CSS_CLASSES = {\r\n    tabs: 'w-tabs',\r\n    tabsContent: 'w-tab-content',\r\n    tabPane: 'w-tab-pane',\r\n    tabsMenu: 'w-tab-menu',\r\n    tabLink: 'w-tab-link',\r\n    activeTab: 'w--tab-active',\r\n};\r\nexport const NAVBAR_CSS_CLASSES = {\r\n    navMenu: 'w-nav-menu',\r\n};\r\nexport const CMS_CSS_CLASSES = {\r\n    wrapper: 'w-dyn-list',\r\n    list: 'w-dyn-items',\r\n    item: 'w-dyn-item',\r\n    paginationWrapper: 'w-pagination-wrapper',\r\n    paginationNext: 'w-pagination-next',\r\n    paginationPrevious: 'w-pagination-previous',\r\n    pageCount: 'w-page-count',\r\n    emptyState: 'w-dyn-empty',\r\n};\r\nexport const FORM_CSS_CLASSES = {\r\n    formBlock: 'w-form',\r\n    checkboxField: 'w-checkbox',\r\n    checkboxInput: 'w-checkbox-input',\r\n    radioField: 'w-radio',\r\n    radioInput: 'w-radio-input',\r\n    checkboxOrRadioLabel: 'w-form-label',\r\n    checkboxOrRadioFocus: 'w--redirected-focus',\r\n    checkboxOrRadioChecked: 'w--redirected-checked',\r\n    successMessage: 'w-form-done',\r\n    errorMessage: 'w-form-fail',\r\n};\r\nexport const DROPDOWN_CSS_CLASSES = {\r\n    dropdown: 'w-dropdown',\r\n    dropdownToggle: 'w-dropdown-toggle',\r\n    dropdownList: 'w-dropdown-list',\r\n};\r\nexport const COMMERCE_CSS_CLASSES = {\r\n    addToCartForm: 'w-commerce-commerceaddtocartform',\r\n};\r\nexport const LIGHTBOX_CSS_CLASSES = {\r\n    trigger: 'w-lightbox',\r\n};\r\n", "export const simulateEvent = (target, events) => {\r\n    if (!Array.isArray(events))\r\n        events = [events];\r\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\r\n    return eventsSuccess.every((success) => success);\r\n};\r\n", "export const cloneNode = (node, deep = true) => node.cloneNode(deep);\r\n", "export const findTextNode = (element) => {\r\n    let textNode;\r\n    for (const node of element.childNodes) {\r\n        if (node instanceof HTMLElement && node.childNodes.length)\r\n            textNode = findTextNode(node);\r\n        else if (node.nodeType === Node.TEXT_NODE && node.textContent?.trim())\r\n            textNode = node;\r\n        if (textNode)\r\n            break;\r\n    }\r\n    return textNode;\r\n};\r\n", "import { simulateEvent } from '.';\r\nexport const setFormFieldValue = (element, value) => {\r\n    const { type } = element;\r\n  \r\n    const isRadio = type === 'radio';\r\n    const isCheckbox = type === 'checkbox';\r\n  \r\n    if (isRadio || isCheckbox) {\r\n      if (\r\n        !(element instanceof HTMLInputElement) ||\r\n        typeof value !== 'boolean' ||\r\n        value === element.checked ||\r\n        (isRadio && value === false)\r\n      ) {\r\n        return;\r\n      }\r\n  \r\n      element.checked = value;\r\n    } else {\r\n      if (element.value === value) return;\r\n  \r\n      element.value = value.toString();\r\n    }\r\n  \r\n    // Emit DOM events\r\n    simulateEvent(element, ['click', 'input', 'change']);\r\n  };\r\n  ", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\r\n\r\nexport const ATTRIBUTES = {\r\n  /**\r\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\r\n   */\r\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\r\n\r\n  /**\r\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\r\n   */\r\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\r\n\r\n  /**\r\n   * Defines the source of an attribute script.\r\n   */\r\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\r\n\r\n  /**\r\n   * Defines a developer script that is not imported from JsDelivr.\r\n   */\r\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "import { Debug } from '@finsweet/ts-utils';\r\n\r\nimport { ATTRIBUTES } from '../constants/attributes';\r\nimport { GlobalAttributeParams } from '../types/global';\r\n\r\n/**\r\n * Checks the global params of the Attribute `<script>`.\r\n * @param script The `<script>` element.\r\n * @returns The {@link GlobalAttributeParams}.\r\n */\r\n\r\nexport const assessScript = (): GlobalAttributeParams => {\r\n  const { currentScript } = document;\r\n  const { preventLoad, debugMode } = ATTRIBUTES;\r\n\r\n  // Check if the Attribute should not be automatically loaded\r\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\r\n\r\n  // Check if Debug Mode is activated\r\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\r\n\r\n  return { preventsLoad };\r\n};\r\n", "import { ATTRIBUTES_PREFIX } from '$global/constants/attributes';\r\n\r\nconst ATTRIBUTES_SUPPORT_QUERY_PARAM = `${ATTRIBUTES_PREFIX}-support`;\r\nconst ATTRIBUTES_SUPPORT_SOURCE = 'https://cdn.jsdelivr.net/npm/@finsweet/attributes-support@1/support.js';\r\n\r\n/**\r\n * Imports the Attributes Support Wizard and mounts it on the page.\r\n * It stores the import as a Promise to ensure it isn't mounted more than once.\r\n *\r\n * @returns A promise that resolves to `true` if the app was successfuly loaded.\r\n */\r\nexport const importSupport = async () => {\r\n  const { fsAttributes, location } = window;\r\n  const { host, searchParams } = new URL(location.href);\r\n\r\n  if (!host.includes('webflow.io') || !searchParams.has(ATTRIBUTES_SUPPORT_QUERY_PARAM)) return false;\r\n\r\n  if (fsAttributes.supportImport) return fsAttributes.supportImport;\r\n\r\n  try {\r\n    fsAttributes.supportImport = new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n\r\n      script.src = ATTRIBUTES_SUPPORT_SOURCE;\r\n      script.onload = () => resolve(true);\r\n      script.onerror = reject;\r\n\r\n      document.head.append(script);\r\n    });\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n\r\n  return fsAttributes.supportImport;\r\n};\r\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport { importSupport } from '$global/import/support';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n\r\n  importSupport();\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  fsAttributes.push(...existingCallbacks);\r\n};\r\n", "import { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'cmsselect';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const TEXT_VALUE_ELEMENT_KEY = 'text-value';\r\nexport const SELECT_ELEMENT_KEY = 'select';\r\n\r\nexport const ATTRIBUTES = {\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines the elements as the source to populate the target.\r\n       */\r\n      textValue: generateDynamicAttibuteValue(TEXT_VALUE_ELEMENT_KEY),\r\n\r\n      /**\r\n       * Defines the element as the target to be populated.\r\n       */\r\n      select: SELECT_ELEMENT_KEY,\r\n    },\r\n  },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "export const SPACE_KEY = ' ';\nexport const ENTER_KEY = 'Enter';\nexport const TAB_KEY = 'Tab';\nexport const ARROW_UP_KEY = 'ArrowUp';\nexport const ARROW_DOWN_KEY = 'ArrowDown';\nexport const ARROW_RIGHT_KEY = 'ArrowRight';\nexport const ARROW_LEFT_KEY = 'ArrowLeft';\n", "import { simulateEvent } from '@finsweet/ts-utils';\nimport type { DropdownToggle } from '@finsweet/ts-utils';\n\n/**\n * Closes a dropdown.\n * @param dropdownToggle A {@link DropdownToggle} element.\n * @param focusToggle Defaults to `true`.\n */\nexport const closeDropdown = (dropdownToggle: DropdownToggle, focusToggle = true) => {\n  if (focusToggle) dropdownToggle.focus();\n\n  simulateEvent(dropdownToggle, ['click', 'mouseup']);\n};\n", "import { ARROW_DOWN_KEY, ARROW_UP_KEY, SPACE_KEY, TAB_KEY } from '$global/constants/keyboard';\nimport { generateSelectors } from '$global/factory/selectors';\n\nexport const ATTRIBUTE = 'selectcustom';\n\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\n\nexport const DROPDOWN_ELEMENT_KEY = 'dropdown';\nexport const LABEL_ELEMENT_KEY = 'label';\nexport const RESET_OPTION_KEY = 'option-reset';\n\nexport const HIDE_INITIAL_SETTING_KEY = 'hideinitial';\nexport const HIDE_INITIAL_SETTING_VALUES = { true: 'true' };\n\nexport const ATTRIBUTES = {\n  element: {\n    key: `${ATTRIBUTES_PREFIX}-element`,\n    values: {\n      /**\n       * Defines a dropdown element.\n       */\n      dropdown: DROPDOWN_ELEMENT_KEY,\n\n      /**\n       * Defines the label that displays the currently selected option.\n       */\n      label: LABEL_ELEMENT_KEY,\n\n      /**\n       * Defines an option that will remove the selected value.\n       */\n      resetOption: RESET_OPTION_KEY,\n    },\n  },\n\n  /**\n   * Defines if the reset option should be hidden whenever there isn't an active selection.\n   */\n  hideInitial: { key: `${ATTRIBUTES_PREFIX}-${HIDE_INITIAL_SETTING_KEY}`, values: HIDE_INITIAL_SETTING_VALUES },\n} as const;\n\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\n\nexport const CONTROL_KEYS = [SPACE_KEY, TAB_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY];\n", "export const ARIA_ROLE_KEY = 'role';\r\nexport const ARIA_ROLE_VALUES = {\r\n  slider: 'slider',\r\n  listbox: 'listbox',\r\n  option: 'option',\r\n  columnheader: 'columnheader',\r\n  link: 'link',\r\n} as const;\r\nexport const TABINDEX_KEY = 'tabindex';\r\nexport const ARIA_LABEL_KEY = 'aria-label';\r\nexport const ARIA_LABELLEDBY_KEY = 'aria-labelledby';\r\nexport const ARIA_VALUENOW_KEY = 'aria-valuenow';\r\nexport const ARIA_VALUEMIN_KEY = 'aria-valuemin';\r\nexport const ARIA_VALUEMAX_KEY = 'aria-valuemax';\r\nexport const ARIA_SELECTED_KEY = 'aria-selected';\r\nexport const ARIA_HASPOPUP_KEY = 'aria-haspopup';\r\nexport const ARIA_MULTISELECTABLE_KEY = 'aria-multiselectable';\r\nexport const ARIA_EXPANDED_KEY = 'aria-expanded';\r\nexport const ARIA_CURRENT_KEY = 'aria-current';\r\nexport const ARIA_ACTIVEDESCENDANT_KEY = 'aria-activedescendant';\r\nexport const ARIA_PRESSED_KEY = 'aria-pressed';\r\nexport const ARIA_SORT_KEY = 'aria-sort';\r\nexport const ARIA_SORT_VALUES = {\r\n  ascending: 'ascending',\r\n  descending: 'descending',\r\n} as const;\r\n", "import { CURRENT_CSS_CLASS, setFormFieldValue } from '@finsweet/ts-utils';\r\n\r\nimport { ARIA_SELECTED_KEY, TABINDEX_KEY } from '$global/constants/a11ty';\r\n\r\nimport type { OptionData, Settings } from '../utils/types';\r\n\r\n/**\r\n * Sets the selected state to an option and removes it from a previous one, if existing.\r\n * @param settings The instance {@link Settings}.\r\n * @param selectedOption The selected {@link OptionData}, if existing.\r\n */\r\nexport const updateOptionsState = (settings: Settings, selectedOption?: OptionData) => {\r\n  const { selectElement, optionsStore, label } = settings;\r\n\r\n  if (selectedOption) setFormFieldValue(selectElement, selectedOption.value);\r\n\r\n  for (const optionData of optionsStore) {\r\n    const { element } = optionData;\r\n\r\n    const selected = element === selectedOption?.element;\r\n\r\n    optionData.selected = selected;\r\n\r\n    element.classList[selected ? 'add' : 'remove'](CURRENT_CSS_CLASS);\r\n    element.setAttribute(ARIA_SELECTED_KEY, `${selected}`);\r\n    element.setAttribute(TABINDEX_KEY, selected ? '0' : '-1');\r\n  }\r\n\r\n  if (selectedOption) label.textContent = selectedOption.text;\r\n};\r\n\r\n/**\r\n * Toggles the visibility of the reset option.\r\n * @param show `true` to show, `false` to hide.\r\n * @param settings The instance {@link Settings}.\r\n */\r\nexport const toggleResetVisibility = (show: boolean, { optionsStore }: Settings) => {\r\n  const resetOption = optionsStore.find(({ value }) => !value);\r\n  if (!resetOption) return;\r\n\r\n  resetOption.hidden = !show;\r\n  resetOption.element.style.display = show ? '' : 'none';\r\n};\r\n", "import { ARROW_DOWN_KEY, ARROW_UP_KEY, SPACE_KEY, TAB_KEY } from '$global/constants/keyboard';\nimport { closeDropdown } from '$global/helpers/dropdowns';\n\nimport { CONTROL_KEYS } from '../utils/constants';\nimport type { Settings } from '../utils/types';\nimport { updateOptionsState } from './state';\n\n/**\n * Returns the {@link OptionData} of an event target.\n *\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n *\n * @returns The {@link OptionData} object, if found.\n */\nconst getClickedOptionData = (e: Event, { optionsStore }: Settings) => {\n  const { target } = e;\n\n  if (!(target instanceof Element)) return;\n\n  const optionElement = target.closest('a');\n  if (!optionElement) return;\n\n  const optionData = optionsStore.find(({ element }) => element === optionElement);\n  if (!optionData) return;\n\n  return optionData;\n};\n\n/**\n * Handles click events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleDropdownListClickEvents = (e: MouseEvent | KeyboardEvent, settings: Settings) => {\n  if (e.target === settings.selectElement) return;\n\n  e.preventDefault();\n\n  const optionData = getClickedOptionData(e, settings);\n  if (!optionData) return;\n\n  if (!optionData.selected) updateOptionsState(settings, optionData);\n\n  closeDropdown(settings.dropdownToggle);\n};\n\n/**\n * Handles tab key events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleTabKeyEvents = (e: KeyboardEvent, { dropdownToggle }: Settings) => {\n  const { shiftKey } = e;\n\n  if (shiftKey) e.preventDefault();\n\n  closeDropdown(dropdownToggle, shiftKey);\n};\n\n/**\n * Handles arrow keys events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleDropdownListArrowKeyEvents = ({ key }: KeyboardEvent, { optionsStore }: Settings) => {\n  const focusedOptionIndex = optionsStore.findIndex(({ focused }) => focused);\n  if (focusedOptionIndex < 0) return;\n\n  const nextOption = optionsStore[key === ARROW_UP_KEY ? focusedOptionIndex - 1 : focusedOptionIndex + 1];\n  nextOption?.element.focus();\n};\n\n/**\n * Handles keyboard events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleDropdownListKeydownEvents = (e: KeyboardEvent, settings: Settings) => {\n  const { key } = e;\n\n  if (!CONTROL_KEYS.includes(key)) return;\n\n  if (key === SPACE_KEY) handleDropdownListClickEvents(e, settings);\n  else if (key === TAB_KEY) handleTabKeyEvents(e, settings);\n  else if (key === ARROW_UP_KEY || key === ARROW_DOWN_KEY) handleDropdownListArrowKeyEvents(e, settings);\n};\n\n/**\n * Handles focus events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleDropdownListFocusEvents = (e: FocusEvent, focused: boolean, settings: Settings) => {\n  const optionData = getClickedOptionData(e, settings);\n  if (!optionData) return;\n\n  optionData.focused = focused;\n};\n\n/**\n * Handles arrow keys events on the dropdown list.\n * @param e The Event object.\n * @param settings The instance {@link Settings}.\n */\nconst handleDropdownToggleArrowKeyEvents = ({ key }: KeyboardEvent, { optionsStore }: Settings) => {\n  if (key !== ARROW_DOWN_KEY) return;\n\n  const firstOption = optionsStore.find(({ hidden }) => !hidden);\n  if (!firstOption) return;\n\n  firstOption.element.focus();\n};\n\n/**\n * Adds two way data binding.\n * Handles `change` events on the hidden `selectElement` and updates the dropdown.\n * @param settings The instance {@link Settings}.\n */\nconst handleSelectChangeEvents = (settings: Settings) => {\n  const { selectElement, optionsStore } = settings;\n\n  const selectedOption = optionsStore.find(({ value }) => value === selectElement.value);\n  if (!selectedOption) return;\n\n  updateOptionsState(settings, selectedOption);\n};\n\n/**\n * Listens for click events on the custom elements.\n * @param settings The instance {@link Settings}.\n */\nexport const listenEvents = (settings: Settings) => {\n  const { dropdownToggle, dropdownList, selectElement } = settings;\n\n  dropdownToggle.addEventListener('keydown', (e) => handleDropdownToggleArrowKeyEvents(e, settings));\n\n  dropdownList.addEventListener('click', (e) => handleDropdownListClickEvents(e, settings));\n  dropdownList.addEventListener('keydown', (e) => handleDropdownListKeydownEvents(e, settings));\n  dropdownList.addEventListener('focusin', (e) => handleDropdownListFocusEvents(e, true, settings));\n  dropdownList.addEventListener('focusout', (e) => handleDropdownListFocusEvents(e, false, settings));\n\n  selectElement.addEventListener('change', () => handleSelectChangeEvents(settings));\n};\n", "import debounce from 'just-debounce';\r\n\r\nimport { ARIA_EXPANDED_KEY } from '$global/constants/a11ty';\r\n\r\nimport type { Settings } from '../utils/types';\r\nimport { populateOptions } from './populate';\r\nimport { toggleResetVisibility } from './state';\r\n\r\n/**\r\n * Observes when the dropdown list is opened/closed.\r\n * @param settings The instance {@link Settings}.\r\n */\r\nconst observeDropdownList = (settings: Settings) => {\r\n  const { dropdownToggle, dropdownList, optionsStore, hideInitial } = settings;\r\n\r\n  const callback: MutationCallback = debounce(() => {\r\n    const selectedOption = optionsStore.find(({ selected }) => selected);\r\n    const firstNonHiddenOption = optionsStore.find(({ hidden }) => !hidden);\r\n\r\n    if (!selectedOption || !firstNonHiddenOption) return;\r\n\r\n    const isOpen = dropdownToggle.getAttribute(ARIA_EXPANDED_KEY) === 'true';\r\n\r\n    if (isOpen) {\r\n      if (selectedOption.hidden) firstNonHiddenOption.element.focus();\r\n      else selectedOption.element.focus();\r\n\r\n      return;\r\n    }\r\n\r\n    if (hideInitial) window.requestAnimationFrame(() => toggleResetVisibility(!!selectedOption.value, settings));\r\n  }, 20);\r\n\r\n  const observer = new MutationObserver(callback);\r\n\r\n  observer.observe(dropdownList, {\r\n    attributes: true,\r\n    attributeFilter: ['class', 'style'],\r\n  });\r\n};\r\n\r\n/**\r\n * Observes changes in the {@link HTMLSelectElement} options.\r\n * @param settings The instance {@link Settings}.\r\n */\r\nconst observeSelectElement = (settings: Settings) => {\r\n  const { selectElement } = settings;\r\n\r\n  const observer = new MutationObserver((mutations) => {\r\n    const hasMutatedOptions = mutations.some(({ addedNodes, removedNodes }) =>\r\n      [...addedNodes, ...removedNodes].some((node) => node instanceof HTMLOptionElement)\r\n    );\r\n\r\n    if (hasMutatedOptions) populateOptions(settings);\r\n  });\r\n\r\n  observer.observe(selectElement, {\r\n    childList: true,\r\n  });\r\n};\r\n\r\n/**\r\n * Observes mutations on elements of the instance.\r\n * @param settings The instance {@link Settings}.\r\n */\r\nexport const observeElements = (settings: Settings) => {\r\n  observeDropdownList(settings);\r\n  observeSelectElement(settings);\r\n};\r\n", "import type { DropdownToggle, DropdownList } from '@finsweet/ts-utils';\n\nimport { ARIA_HASPOPUP_KEY, ARIA_MULTISELECTABLE_KEY, ARIA_ROLE_KEY, ARIA_ROLE_VALUES } from '$global/constants/a11ty';\n\nimport type { OptionData } from '../utils/types';\n\nconst { listbox: listboxRole, option: optionRole } = ARIA_ROLE_VALUES;\n\n/**\n * Adds `a11ty` attributes to the Dropdown elements.\n * @param dropdownToggle The {@link DropdownToggle} element.\n * @param dropdownList The {@link DropdownList} element.\n */\nexport const setDropdownAria = (dropdownToggle: DropdownToggle, dropdownList: DropdownList) => {\n  dropdownToggle.setAttribute(ARIA_HASPOPUP_KEY, listboxRole);\n  dropdownList.setAttribute(ARIA_ROLE_KEY, listboxRole);\n  dropdownList.setAttribute(ARIA_MULTISELECTABLE_KEY, 'false');\n};\n\n/**\n * Sets the required aria attributes to a custom option element.\n * @param element\n */\nexport const setOptionAria = (element: OptionData['element']) => {\n  element.setAttribute(ARIA_ROLE_KEY, optionRole);\n};\n", "import { cloneNode, findTextNode } from '@finsweet/ts-utils';\n\nimport type { OptionData, Settings } from '../utils/types';\nimport { setOptionAria } from './a11ty';\nimport { toggleResetVisibility, updateOptionsState } from './state';\n\n/**\n * Populates the custom options based on the `HTMLSelectElement`'s options.\n * @param settings The instance {@link Settings}.\n */\nexport const populateOptions = (settings: Settings) => {\n  const {\n    optionsStore,\n    optionTemplate,\n    optionsList,\n    emptyOption,\n    hideInitial,\n    selectElement: { options, value: currentValue },\n  } = settings;\n\n  // Clear existing options\n  for (const { element } of optionsStore.values()) element.remove();\n\n  optionsStore.splice(0, optionsStore.length);\n\n  let selectedOption: OptionData | undefined;\n\n  // Create new options\n  for (const { value, text } of options) {\n    let element: HTMLAnchorElement | undefined;\n\n    if (!value && emptyOption) element = cloneNode(emptyOption);\n    else {\n      element = cloneNode(optionTemplate);\n\n      const textNode = findTextNode(element) || element;\n      textNode.textContent = text;\n    }\n\n    setOptionAria(element);\n\n    optionsList.appendChild(element);\n\n    const selected = value === currentValue;\n\n    const optionData: OptionData = {\n      text,\n      value,\n      element,\n      selected,\n      focused: false,\n    };\n\n    if (selected) selectedOption = optionData;\n\n    optionsStore.push(optionData);\n  }\n\n  updateOptionsState(settings, selectedOption);\n\n  if (hideInitial) toggleResetVisibility(!!selectedOption?.value, settings);\n};\n", "import { DROPDOWN_CSS_CLASSES, findTextNode } from '@finsweet/ts-utils';\nimport type { Dropdown, DropdownList, DropdownToggle } from '@finsweet/ts-utils';\n\nimport { ARIA_CURRENT_KEY, TABINDEX_KEY } from '$global/constants/a11ty';\n\nimport { ATTRIBUTES, getSelector, queryElement } from '../utils/constants';\nimport type { OptionsStore } from '../utils/types';\nimport { setDropdownAria } from './a11ty';\n\n/**\n * Collects the required elements/settings for the setup.\n * @param dropdown The {@link Dropdown} element.\n */\nexport const collectSettings = (referenceElement: HTMLElement) => {\n  const optionsStore: OptionsStore = [];\n\n  const dropdown = referenceElement.closest<Dropdown>(`.${DROPDOWN_CSS_CLASSES.dropdown}`);\n  if (!dropdown) return;\n\n  const selectElement = dropdown.querySelector('select');\n  if (!selectElement) return;\n\n  const dropdownToggle = dropdown.querySelector<DropdownToggle>(`.${DROPDOWN_CSS_CLASSES.dropdownToggle}`);\n  const dropdownList = dropdown.querySelector<DropdownList>(`.${DROPDOWN_CSS_CLASSES.dropdownList}`);\n  if (!dropdownToggle || !dropdownList) return;\n\n  setDropdownAria(dropdownToggle, dropdownList);\n\n  const label =\n    queryElement('label', { operator: 'prefixed', scope: dropdownToggle }) ||\n    findTextNode(dropdownToggle) ||\n    dropdownToggle;\n\n  const optionTemplate = dropdownList.querySelector(\n    `a:not(${getSelector('element', 'resetOption', { operator: 'prefixed' })})`\n  );\n  if (!(optionTemplate instanceof HTMLAnchorElement)) return;\n\n  const optionsList = optionTemplate.parentElement;\n  if (!optionsList) return;\n\n  const rawEmptyOption = queryElement('resetOption', { operator: 'prefixed', scope: dropdownList });\n  const emptyOption = rawEmptyOption instanceof HTMLAnchorElement ? rawEmptyOption : undefined;\n\n  for (const element of [optionTemplate, emptyOption]) {\n    if (!element) continue;\n\n    element.href = '#';\n    element.setAttribute(TABINDEX_KEY, '-1');\n    element.removeAttribute(ARIA_CURRENT_KEY);\n    element.remove();\n  }\n\n  const hideInitial = referenceElement.getAttribute(ATTRIBUTES.hideInitial.key) === ATTRIBUTES.hideInitial.values.true;\n\n  return {\n    optionsStore,\n    selectElement,\n    dropdownToggle,\n    dropdownList,\n    label,\n    optionTemplate,\n    optionsList,\n    emptyOption,\n    hideInitial,\n  };\n};\n", "import { ATTRIBUTE as CMS_SELECT_ATTRIBUTE } from '$cms/cmsselect/src/constants';\r\n\r\nimport { listenEvents } from './actions/events';\r\nimport { observeElements } from './actions/observe';\r\nimport { populateOptions } from './actions/populate';\r\nimport { collectSettings } from './actions/settings';\r\nimport { ATTRIBUTE, getSelector } from './utils/constants';\r\n\r\n/**\r\n * Inits the attribute.\r\n */\r\nexport const init = async (): Promise<NodeListOf<HTMLElement>> => {\r\n  await window.fsAttributes[CMS_SELECT_ATTRIBUTE]?.loading;\r\n\r\n  const referenceElements = document.querySelectorAll<HTMLElement>(\r\n    getSelector('element', 'dropdown', { operator: 'prefixed' })\r\n  );\r\n\r\n  for (const referenceElement of referenceElements) initCustomSelect(referenceElement);\r\n\r\n  window.fsAttributes[ATTRIBUTE].resolve?.(referenceElements);\r\n\r\n  return referenceElements;\r\n};\r\n\r\n/**\r\n * Inits a new custom select instance.\r\n * @param referenceElement The element that has the `dropdown` attribute.\r\n */\r\nconst initCustomSelect = (referenceElement: HTMLElement) => {\r\n  const settings = collectSettings(referenceElement);\r\n  if (!settings) return;\r\n\r\n  populateOptions(settings);\r\n  observeElements(settings);\r\n  listenEvents(settings);\r\n};\r\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\n\r\nimport { version } from '../package.json';\r\nimport { init } from './init';\r\nimport { ATTRIBUTE } from './utils/constants';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\n\r\nwindow.fsAttributes[ATTRIBUTE] ||= {};\r\n\r\nconst { preventsLoad } = assessScript();\r\nconst attribute = window.fsAttributes[ATTRIBUTE];\r\n\r\nattribute.version = version;\r\n\r\nif (preventsLoad) attribute.init = init;\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
