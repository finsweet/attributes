[{"version":"v1.8.2","date":"8 December 2021","markdown":"- Added compatibility with the new `cmsload`'s support for Webflow's native pagination query params.\r\n  Now users can safely use this feature in conjunction of filters query parameters.\r\n"},{"version":"v1.8.1","date":"6 December 2021","markdown":"- Fixed `fs-cmsfilter-active` CSS Class not being correctly applied to `Radio` elements that had a default `checked` status.\r\n"},{"version":"v1.8.0","date":"3 December 2021","markdown":"- Added support to override the `fs-cmsfilter-highlightclass=\"HIGHLIGHT_CSS_CLASS\"` attribute at the filter elements level.\r\n  Now, the attribute can be used like:\r\n  - If added to the `list` element, all highlighted elements will receive this Highlight CSS Class. If not defined, it defaults to `.fs-cmsfilter_highlight`\r\n  - If added to a specific filter element (that has a `fs-cmsfilter-field` attribute), the Highlight CSS Class will be overriden and applied to the matching text in the filtered Collection Items.\r\n- Added an extra check to make sure the `Tags` are visible when rendering them without the `animations` module being loaded yet.\r\n"},{"version":"v1.7.3","date":"2 December 2021","markdown":"- Fixed `fs-cmsfilter-tagformat=\"category\"` not preserving the original format of the `IDENTIFIER` when rendering the tags.\r\n  Now, the tags will show the category text using the exact same format of the identifier (unless the user overrides it with `fs-cmsfilter-tagcategory=\"OVERRIDE_TEXT\"`).\r\n  For example:\r\n  - Using `fs-cmsfilter-tagformat=\"category\"` + `fs-cmsfilter-field=\"color\"` will render the tags as `color: SELECTED_VALUE`.\r\n  - Using `fs-cmsfilter-tagformat=\"category\"` + `fs-cmsfilter-field=\"Color\"` will render the tags as `Color: SELECTED_VALUE`.\r\n"},{"version":"v1.7.2","date":"1 December 2021","markdown":"- Made sure that filters instances are not duplicated.\r\n  In some use cases like using `cmscombine` + `cmsfilters`, users added the same exact attributes to all `cmscombine` lists, thus multiple instances were being created causing funky behaviors.\r\n\r\n  **Note:** There are still potential situations where `cmscombine` can break builds if users apply duplicated attributes, so we should first educate them to only add attributes to the first `cmscombine` target `list`, not all of them.\r\n"},{"version":"v1.7.1","date":"29 November 2021","markdown":"- Assured that the `animations` module is fully loaded before the library starts filtering.\r\n  This caused issues like `Collection Items` and `Tags` that were added on page load using query params to not be animated.\r\n"},{"version":"v1.7.0","date":"29 November 2021","markdown":"- Released `v1.7.0-beta` to NPM.\r\n- Created `changesets.json` API.\r\n"},{"version":"v1.7.0-beta.1","date":"28 November 2021","markdown":"- On top of being able to globally add `fs-cmsfilter-debounce=\"DEBOUNCING_MILISECONDS\"` to the `list`, this attribute can now be added to the filter elements (the ones that have the `fs-cmsfilter-field` attribute).\r\n  If done, the global debouncing will be overriden by this value.\r\n  This allows building setups where each filter element has a different debouncing, which can vastly improve UX.\r\n- Fixed `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` not being removed from Radio Buttons when using a `reset` button.\r\n- Fixed `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` not working correctly when pre-populating the filters using query params.\r\n- Fixed `fs-cmsfilter-highlight` not behaving correctly when combining global search highlighting (`*`) with field-specific searches.\r\n"},{"version":"v1.7.0-beta.0","date":"27 November 2021","markdown":"- Added support to override the `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` attribute at the filter elements level.\r\n  Now, the attribute can be used like:\r\n  - If added to the `list` element, all filter elements will receive this Active CSS Class. If not defined, it defaults to `.fs-cmsfilter_active`\r\n  - If added to a specific filter element (that has a `fs-cmsfilter-field` attribute), the Active CSS Class will be overriden.\r\n- Added support to use `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"` on any type of form element, not just `Checkboxes` and `Radios`.\r\n  The Active CSS Class will be added whenever the elements are filled with a value.\r\n- Improved performance on `input` and `restart` events handling.\r\n"},{"version":"v1.6.1","date":"26 November 2021","markdown":"- Breaking change: renamed `fs-cmsfilter-debouncing` to `fs-cmsfilter-debounce`.\r\n"},{"version":"v1.6.0","date":"26 November 2021","markdown":"- Added `fs-cmsfilter-debouncing=\"TIME_IN_MS\"`.\r\n  When used, allows users to modify the default `input` [debouncing](https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086).\r\n  Defaults to `50`.\r\n\r\n- Added `fs-cmsfilter-active=\"ACTIVE_CSS_CLASS\"`.\r\n  If specified, all Checkbox Field and Radio Button Field (the parent elements) will receive this class whenever the Checkbox/Radio is checked.\r\n  Defaults to `.fs-cmsfilter_active`.\r\n\r\n- Fixed `fs-cmsfilter-duration` being incorrectly applied.\r\n"},{"version":"v1.5.4","date":"23 November 2021","markdown":"- Improved accessibility by ensuring unique IDs on dynamically generated form elements in `Collection Lists`.\r\n"},{"version":"v1.5.3","date":"17 November 2021","markdown":"- Added support for initial state values on `Checkboxes`, `Radio` and `Select` elements.\r\n  If any of these elements has a default value, on page load the filters will automatically:\r\n  - Store the value.\r\n  - Trigger a filter + render workflow.\r\n  - Sync the tags, if required.\r\n  - Sync the URL query params, if required.\r\n"},{"version":"v1.5.2","date":"17 November 2021","markdown":"- Fixed `examples.json` not being available on NPM.\r\n"},{"version":"v1.5.1","date":"17 November 2021","markdown":"- Added support to override default list animation duration when it was already set by other `cms` packages.\r\n- Memoized `TagData.textNode` prop so the text node doesn't have to be queried every time a text update is required on a tag.\r\n"},{"version":"v1.5.0","date":"17 November 2021","markdown":"- Added support for `cmscore` versioning.\r\n"},{"version":"v1.4.0","date":"16 November 2021","markdown":"- Added a visibility tracker to Submit Buttons. If it's not visible (`display: none`), the list will auto-filter as if there was no Submit Button.\r\n- Added a window `resize` observer to update the visibility status of the Submit Button.\r\n- Switched tags from being rendered on `input` events to being rendered on during the filter rendering. This assures that, if a Submit Button exists and it's visible, the tags will only be updated when submitting the form.\r\n"},{"version":"v1.3.1","date":"16 November 2021","markdown":"- Updated `cmscore` import.\r\n"},{"version":"v1.3.0","date":"16 November 2021","markdown":"- Added `fs-cmsfilter-tagformat` override at the filters level + a new `fs-cmsfilter-tagcategory` attribute.\r\n- Updated `cmscore` import.\r\n"},{"version":"v1.2.0","date":"12 November 2021","markdown":"- Fixed `undefined` errors when checking range validity in single range props.\r\n- Fixed value checking when multiple non checkbox/radio elements exist in a filter key.\r\n- Fixed `fs-cmsfilter-range` filtering issue when the `from` value was not specified.\r\n- Fixed `fs-cmsfilter-range` values not being correctly set from the URL query params on page load.\r\n- Added support for `fs-rangeslider` sync when setting values from query params on page load.\r\n- Improved tags rendering when the filter is a `range`. Now it outputs a single tag with a `[FROM_VALUE, TO_VALUE]` format, replacing the `undefined` values with a double dash `--`.\r\n- Exposed the `CMSFilters` instances at `window.fsAttributes.cms.filtersInstances`.\r\n"},{"version":"v1.1.2","date":"12 November 2021","markdown":"- Added support to parse numbers that contain symbols like `$` or `,`.\r\n"},{"version":"v1.1.0","date":"11 November 2021","markdown":"- Added new `fs-cmsfilter-element=\"filter-results-count\"` attribute.\r\n  It can be placed in any Text element inside a `Checkbox Field` or `Radio Field`, and this element will display the amount of items that match that particular filter.\r\n  The results count is dynamically updated every time a filter is applied, only showing the available items in the current filter query.\r\n- Added new `fs-cmsfilter-hideempty=\"true\"` attribute.\r\n  It can be added to any `Checkbox` or `Radio`, specifically to the same element where the `fs-cmsfilter-field=\"IDENTIFIER\"` attribute is added.\r\n  When the current filter has no results in the list, the `Checkbox`/`Radio` element is hidden.\r\n  Very useful to narrow down options to the users when other filters are applied.\r\n- Internal refactorings / performance improvements.\r\n"},{"version":"v1.0.2","date":"11 November 2021","markdown":"- Fixed list animation issue on `nestinitialitems` event when the list was initially filtered by query params.\r\n- Updated `cmscore` import.\r\n"},{"version":"v1.0.1","date":"10 November 2021","markdown":"- Updated `cmscore` import.\r\n"},{"version":"v1.0.0","date":"3 October 2021","markdown":"- Created the attribute package.\r\n"}]