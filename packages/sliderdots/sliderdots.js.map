{
  "version": 3,
  "sources": ["../../node_modules/@finsweet/ts-utils/dist/components/Debug.js", "../../node_modules/@finsweet/ts-utils/dist/webflow/css.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/cloneNode.js", "../../node_modules/@finsweet/ts-utils/dist/helpers/extractNumberSuffix.js", "../../node_modules/@finsweet/ts-utils/dist/type-guards/isNotEmpty.js", "../../global/factory/selectors.ts", "../../global/constants/attributes.ts", "../../global/factory/assess.ts", "../../global/factory/init.ts", "../cms/cmsslider/src/constants.ts", "../../global/helpers/instances.ts", "src/utils/constants.ts", "src/actions/events.ts", "../../global/constants/a11ty.ts", "src/actions/sync.ts", "src/actions/observe.ts", "src/actions/populate.ts", "src/actions/wait.ts", "src/factory.ts", "src/init.ts", "src/index.ts"],
  "sourcesContent": ["const alertTypes = ['info', 'error'];\r\nexport class Debug {\r\n    static alertsActivated = false;\r\n    static activateAlerts() {\r\n        this.alertsActivated = true;\r\n    }\r\n    static alert(text, type) {\r\n        if (this.alertsActivated)\r\n            window.alert(text);\r\n        if (type === 'error')\r\n            throw new Error(text);\r\n    }\r\n}\r\n", "export const CURRENT_CSS_CLASS = 'w--current';\r\nexport const RICH_TEXT_BLOCK_CSS_CLASS = 'w-richtext';\r\nexport const HTML_EMBED_CSS_CLASS = 'w-embed';\r\nexport const SLIDER_CSS_CLASSES = {\r\n    slider: 'w-slider',\r\n    slide: 'w-slide',\r\n    sliderMask: 'w-slider-mask',\r\n    sliderNav: 'w-slider-nav',\r\n    sliderDot: 'w-slider-dot',\r\n    activeSliderDot: 'w-active',\r\n};\r\nexport const TABS_CSS_CLASSES = {\r\n    tabs: 'w-tabs',\r\n    tabsContent: 'w-tab-content',\r\n    tabPane: 'w-tab-pane',\r\n    tabsMenu: 'w-tab-menu',\r\n    tabLink: 'w-tab-link',\r\n    activeTab: 'w--tab-active',\r\n};\r\nexport const NAVBAR_CSS_CLASSES = {\r\n    navMenu: 'w-nav-menu',\r\n};\r\nexport const CMS_CSS_CLASSES = {\r\n    wrapper: 'w-dyn-list',\r\n    list: 'w-dyn-items',\r\n    item: 'w-dyn-item',\r\n    paginationWrapper: 'w-pagination-wrapper',\r\n    paginationNext: 'w-pagination-next',\r\n    paginationPrevious: 'w-pagination-previous',\r\n    pageCount: 'w-page-count',\r\n    emptyState: 'w-dyn-empty',\r\n};\r\nexport const FORM_CSS_CLASSES = {\r\n    formBlock: 'w-form',\r\n    checkboxField: 'w-checkbox',\r\n    checkboxInput: 'w-checkbox-input',\r\n    radioField: 'w-radio',\r\n    radioInput: 'w-radio-input',\r\n    checkboxOrRadioLabel: 'w-form-label',\r\n    checkboxOrRadioFocus: 'w--redirected-focus',\r\n    checkboxOrRadioChecked: 'w--redirected-checked',\r\n    successMessage: 'w-form-done',\r\n    errorMessage: 'w-form-fail',\r\n};\r\nexport const DROPDOWN_CSS_CLASSES = {\r\n    dropdown: 'w-dropdown',\r\n    dropdownToggle: 'w-dropdown-toggle',\r\n    dropdownList: 'w-dropdown-list',\r\n};\r\nexport const COMMERCE_CSS_CLASSES = {\r\n    addToCartForm: 'w-commerce-commerceaddtocartform',\r\n};\r\nexport const LIGHTBOX_CSS_CLASSES = {\r\n    trigger: 'w-lightbox',\r\n};\r\n", "export const simulateEvent = (target, events) => {\r\n    if (!Array.isArray(events))\r\n        events = [events];\r\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\r\n    return eventsSuccess.every((success) => success);\r\n};\r\n", "export const cloneNode = (node, deep = true) => node.cloneNode(deep);\r\n", "export const extractNumberSuffix = (string) => {\r\n    const splitValue = string.split('-');\r\n    const suffix = parseInt(splitValue[splitValue.length - 1]);\r\n    if (!isNaN(suffix))\r\n        return suffix;\r\n};\r\n", "export const isNotEmpty = (value) => value !== undefined && value !== null;\r\n", "import type { AttributeOperator, AttributeStaticValue, AttributeValue } from '$global/types/selectors';\n\n/**\n * Creates a dynamic attribute value.\n * @param value The static attribute value.\n * @returns A callback for generating new attribute values by index.\n */\nexport const generateDynamicAttibuteValue = (value: string) => {\n  return (index?: number): string => `${value}${index ? `-${index}` : ''}`;\n};\n\n/**\n * @returns A `getSelector` callback for the passed `attributes` object.\n * @param attributes An object containing all attribute keys and values.\n */\nexport const generateSelectors = <\n  Attributes extends {\n    [name: string]: {\n      key: string;\n      values?: {\n        [valueKey: string]: AttributeValue;\n      };\n    };\n  }\n>(\n  attributes: Attributes\n) => {\n  /**\n   * Generates a query selector based on the preferences.\n   * @param name The name of the attribute.\n   * @param valueKey The value of the attribute.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @returns The query selector based on the preferences.\n   */\n  const getSelector = <Name extends keyof Attributes, ValueKey extends keyof Attributes[Name]['values']>(\n    name: Name,\n    valueKey?: ValueKey,\n    params?: Attributes[Name]['values'][ValueKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        }\n  ): string => {\n    const attribute = attributes[name];\n\n    const { key: attributeKey, values } = attribute;\n    let attributeValue: string;\n\n    if (!valueKey) return `[${attributeKey}]`;\n\n    const value = values?.[valueKey] as AttributeValue;\n\n    if (typeof value === 'string') attributeValue = value;\n    else attributeValue = value(params && 'instanceIndex' in params ? params.instanceIndex : undefined);\n\n    if (!params?.operator) return `[${attributeKey}=\"${attributeValue}\"]`;\n\n    switch (params.operator) {\n      case 'prefixed':\n        return `[${attributeKey}^=\"${attributeValue}\"]`;\n      case 'suffixed':\n        return `[${attributeKey}$=\"${attributeValue}\"]`;\n      case 'contains':\n        return `[${attributeKey}*=\"${attributeValue}\"]`;\n    }\n  };\n\n  /**\n   * Queries an element using the generated element selectors.\n   * @param elementKey The element key.\n   * @param params.index Only accepted when the value is dynamic.\n   * @param params.operator Optional operator for the selector.\n   * @param params.scope The scope for the query. Defaults to `document`.\n   */\n  const queryElement = <\n    E extends Element = Element,\n    ElementKey extends keyof Attributes['element']['values'] = keyof Attributes['element']['values']\n  >(\n    elementKey: ElementKey,\n    params?: { scope?: ParentNode } & (Attributes['element']['values'][ElementKey] extends AttributeStaticValue\n      ? {\n          operator?: AttributeOperator;\n        }\n      : {\n          instanceIndex?: number;\n          operator?: AttributeOperator;\n        })\n  ) => {\n    const selector = getSelector('element', elementKey, params);\n\n    return (params?.scope || document).querySelector<E>(selector);\n  };\n\n  return [getSelector, queryElement] as const;\n};\n", "import { generateSelectors } from '$global/factory/selectors';\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const ATTRIBUTES_PREFIX = 'fs-attributes';\r\n\r\nexport const ATTRIBUTES = {\r\n  /**\r\n   * Defines if an Attributes' `<script>` should prevent automatically loading the library.\r\n   */\r\n  preventLoad: { key: `${ATTRIBUTES_PREFIX}-preventload` },\r\n\r\n  /**\r\n   * Defines if an Attributes' `<script>` is set to Debug Mode.\r\n   */\r\n  debugMode: { key: `${ATTRIBUTES_PREFIX}-debug` },\r\n\r\n  /**\r\n   * Defines the source of an attribute script.\r\n   */\r\n  src: { key: 'src', values: { finsweet: '@finsweet/attributes' } },\r\n\r\n  /**\r\n   * Defines a developer script that is not imported from JsDelivr.\r\n   */\r\n  dev: { key: `${ATTRIBUTES_PREFIX}-dev` },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "import { Debug } from '@finsweet/ts-utils';\r\n\r\nimport { ATTRIBUTES } from '../constants/attributes';\r\nimport { GlobalAttributeParams } from '../types/global';\r\n\r\n/**\r\n * Checks the global params of the Attribute `<script>`.\r\n * @param script The `<script>` element.\r\n * @returns The {@link GlobalAttributeParams}.\r\n */\r\n\r\nexport const assessScript = (): GlobalAttributeParams => {\r\n  const { currentScript } = document;\r\n  const { preventLoad, debugMode } = ATTRIBUTES;\r\n\r\n  // Check if the Attribute should not be automatically loaded\r\n  const preventsLoad = typeof currentScript?.getAttribute(preventLoad.key) === 'string';\r\n\r\n  // Check if Debug Mode is activated\r\n  if (typeof currentScript?.getAttribute(debugMode.key) === 'string') Debug.activateAlerts();\r\n\r\n  return { preventsLoad };\r\n};\r\n", "import { ATTRIBUTES, getSelector } from '$global/constants/attributes';\r\nimport type { FsAttributes, FsAttributesCallback } from '$global/types/global';\r\n\r\n/**\r\n * Makes sure the window object is defined.\r\n */\r\nexport const initAttributes = () => {\r\n  if (window.fsAttributes && !Array.isArray(window.fsAttributes)) return;\r\n\r\n  const fsAttributes = {\r\n    cms: {},\r\n    push(...args) {\r\n      for (const [attributeName, callback] of args) this[attributeName]?.loading?.then(callback);\r\n    },\r\n  } as FsAttributes;\r\n\r\n  initLoadPromises(fsAttributes);\r\n  runExistingCallbacks(fsAttributes);\r\n\r\n  window.fsAttributes = fsAttributes;\r\n  window.FsAttributes = window.fsAttributes;\r\n};\r\n\r\n/**\r\n * Sets a loading promise for each attribute package.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst initLoadPromises = (fsAttributes: FsAttributes) => {\r\n  const srcSelector = getSelector('src', 'finsweet', { operator: 'contains' });\r\n  const devSelector = getSelector('dev');\r\n  const scripts = [...document.querySelectorAll<HTMLScriptElement>(`script${srcSelector}, script${devSelector}`)];\r\n\r\n  const attributes = scripts.reduce<string[]>((acc, script) => {\r\n    const attributeName = script.getAttribute(ATTRIBUTES.dev.key) || script.src.match(/[\\w-. ]+(?=(\\.js)$)/)?.[0];\r\n    if (attributeName && !acc.includes(attributeName)) acc.push(attributeName);\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  for (const attributeName of attributes) {\r\n    fsAttributes[attributeName] = {};\r\n    const attribute = fsAttributes[attributeName];\r\n\r\n    attribute.loading = new Promise((resolve) => {\r\n      attribute.resolve = (value: unknown) => {\r\n        resolve(value);\r\n        delete attribute.resolve;\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Runs the existing callbacks in the `window.fsAttributes` object.\r\n * @param fsAttributes The {@link FsAttributes} object.\r\n */\r\nconst runExistingCallbacks = (fsAttributes: FsAttributes) => {\r\n  const existingCallbacks = Array.isArray(window.fsAttributes) ? (window.fsAttributes as FsAttributesCallback[]) : [];\r\n  fsAttributes.push(...existingCallbacks);\r\n};\r\n", "import { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'cmsslider';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const LIST_ELEMENT_KEY = 'list';\r\nexport const SLIDER_ELEMENT_KEY = 'slider';\r\n\r\nexport const RESET_IX_SETTING_KEY = 'resetix';\r\nexport const RESET_IX_SETTING_VALUES = { true: 'true' } as const;\r\n\r\nexport const ATTRIBUTES = {\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines a list to be included into the target slider.\r\n       */\r\n      list: generateDynamicAttibuteValue(LIST_ELEMENT_KEY),\r\n\r\n      /**\r\n       * Defines the target slider where all lists will be included into.\r\n       */\r\n      slider: generateDynamicAttibuteValue(SLIDER_ELEMENT_KEY),\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Defines if Webflow should be restarted after populating the sliders.\r\n   */\r\n  resetIx: { key: `${ATTRIBUTES_PREFIX}-${RESET_IX_SETTING_KEY}`, values: RESET_IX_SETTING_VALUES },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n", "import { extractNumberSuffix } from '@finsweet/ts-utils';\n\n/**\n * Gets the instance index of an element attribute.\n * @example An element with the `fs-copyclip-element=\"trigger-1\"` attribute will return `1` as the instance index.\n * @param element The element to extract the instance index.\n * @param attributeKey The attribute key that holds the instance index.\n */\nexport const getInstanceIndex = (element: Element, attributeKey: string): number | undefined => {\n  const elementValue = element.getAttribute(attributeKey);\n  const instanceIndex = elementValue ? extractNumberSuffix(elementValue) : undefined;\n\n  return instanceIndex;\n};\n", "import { generateDynamicAttibuteValue, generateSelectors } from '$global/factory/selectors';\r\n\r\nexport const ATTRIBUTE = 'sliderdots';\r\n\r\nconst ATTRIBUTES_PREFIX = `fs-${ATTRIBUTE}`;\r\n\r\nexport const SLIDER_ELEMENT_KEY = 'slider';\r\nexport const CONTENT_ELEMENT_KEY = 'content';\r\nexport const SLIDER_NAV_ELEMENT_KEY = 'slider-nav';\r\nexport const ACTIVE_SETTING_KEY = 'active';\r\nexport const REMOVE_SETTING_KEY = 'remove';\r\n\r\nexport const ATTRIBUTES = {\r\n  element: {\r\n    key: `${ATTRIBUTES_PREFIX}-element`,\r\n    values: {\r\n      /**\r\n       * Defines a slider to instantiate.\r\n       */\r\n      slider: generateDynamicAttibuteValue(SLIDER_ELEMENT_KEY),\r\n\r\n      /**\r\n       * Defines the content to be added to the slider dot.\r\n       */\r\n      content: generateDynamicAttibuteValue(CONTENT_ELEMENT_KEY),\r\n\r\n      /**\r\n       * Defines a custom Slide Nav.\r\n       */\r\n      sliderNav: generateDynamicAttibuteValue(SLIDER_NAV_ELEMENT_KEY),\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Defines the `active` CSS class. Defaults to {@link DEFAULT_ACTIVE_CSS_CLASS}.\r\n   */\r\n  active: { key: `${ATTRIBUTES_PREFIX}-${ACTIVE_SETTING_KEY}` },\r\n\r\n  /**\r\n   * Defines if the content should be removed or just duplicated.\r\n   */\r\n  remove: {\r\n    key: `${ATTRIBUTES_PREFIX}-${REMOVE_SETTING_KEY}`,\r\n    values: { true: 'true' },\r\n  },\r\n} as const;\r\n\r\nexport const [getSelector, queryElement] = generateSelectors(ATTRIBUTES);\r\n\r\nexport const DEFAULT_ACTIVE_CSS_CLASS = `${ATTRIBUTES_PREFIX}_active`;\r\n", "import { simulateEvent } from '@finsweet/ts-utils';\r\n\r\nimport { getSelector } from '../utils/constants';\r\nimport { DotsRelationship } from '../utils/types';\r\n\r\n/**\r\n * Listens for click events in the custom slider nav.\r\n * @param customSliderNav The `Custom Slider Nav`.\r\n * @param dotsRelationship A {@link DotsRelationship} array.\r\n */\r\nexport const listenClickEvents = (customSliderNav: HTMLElement, dotsRelationship: DotsRelationship) => {\r\n  customSliderNav.addEventListener('click', ({ target }) => {\r\n    if (!(target instanceof Element)) return;\r\n\r\n    const customDotTarget = target.closest(getSelector('element', 'content', { operator: 'prefixed' }));\r\n    if (!customDotTarget) return;\r\n\r\n    const { dot } = dotsRelationship.find(({ customDot }) => customDot === customDotTarget) || {};\r\n\r\n    if (dot) simulateEvent(dot, 'click');\r\n  });\r\n};\r\n", "export const ARIA_ROLE_KEY = 'role';\r\nexport const ARIA_ROLE_VALUES = {\r\n  slider: 'slider',\r\n  listbox: 'listbox',\r\n  option: 'option',\r\n  columnheader: 'columnheader',\r\n  link: 'link',\r\n} as const;\r\nexport const TABINDEX_KEY = 'tabindex';\r\nexport const ARIA_LABEL_KEY = 'aria-label';\r\nexport const ARIA_LABELLEDBY_KEY = 'aria-labelledby';\r\nexport const ARIA_VALUENOW_KEY = 'aria-valuenow';\r\nexport const ARIA_VALUEMIN_KEY = 'aria-valuemin';\r\nexport const ARIA_VALUEMAX_KEY = 'aria-valuemax';\r\nexport const ARIA_SELECTED_KEY = 'aria-selected';\r\nexport const ARIA_HASPOPUP_KEY = 'aria-haspopup';\r\nexport const ARIA_MULTISELECTABLE_KEY = 'aria-multiselectable';\r\nexport const ARIA_EXPANDED_KEY = 'aria-expanded';\r\nexport const ARIA_CURRENT_KEY = 'aria-current';\r\nexport const ARIA_ACTIVEDESCENDANT_KEY = 'aria-activedescendant';\r\nexport const ARIA_PRESSED_KEY = 'aria-pressed';\r\nexport const ARIA_SORT_KEY = 'aria-sort';\r\nexport const ARIA_SORT_VALUES = {\r\n  ascending: 'ascending',\r\n  descending: 'descending',\r\n} as const;\r\n", "import { SLIDER_CSS_CLASSES } from '@finsweet/ts-utils';\r\n\r\nimport { ARIA_LABEL_KEY, ARIA_PRESSED_KEY, ARIA_ROLE_KEY, TABINDEX_KEY } from '$global/constants/a11ty';\r\n\r\nimport { DotsRelationship } from '../utils/types';\r\n\r\n/**\r\n * Syncronizes the properties from the original `Slider Dot` with the `Custom Slider Dot`.\r\n * @param dot The original `Slider Dot`.\r\n * @param customDot The `Custom Slider Dot`.\r\n * @param activeCSSClass The CSS class used for the `active` state.\r\n */\r\nexport const syncDotsProperties = ({ dot, customDot }: DotsRelationship[number], activeCSSClass: string) => {\r\n  const isActive = dot.classList.contains(SLIDER_CSS_CLASSES.activeSliderDot);\r\n\r\n  customDot.classList[isActive ? 'add' : 'remove'](activeCSSClass);\r\n\r\n  for (const attributeKey of [ARIA_LABEL_KEY, ARIA_PRESSED_KEY, ARIA_ROLE_KEY, TABINDEX_KEY]) {\r\n    const value = dot.getAttribute(attributeKey);\r\n\r\n    if (value) customDot.setAttribute(attributeKey, value);\r\n    else customDot.removeAttribute(attributeKey);\r\n  }\r\n};\r\n", "import type { SliderNavElement } from '@finsweet/ts-utils';\r\n\r\nimport { DotsRelationship } from '../utils/types';\r\nimport { syncDotsProperties } from './sync';\r\n\r\n/**\r\n * Replicates all actions between the original `Slider Dots` and the `Custom Slider Dots`.\r\n * @param sliderNav The original `Slider Nav`.\r\n * @param dotsRelationship A {@link DotsRelationship} array.\r\n * @param activeCSSClass The CSS class used for the `active` state.\r\n */\r\nexport const observeSliderNav = (\r\n  sliderNav: SliderNavElement,\r\n  dotsRelationship: DotsRelationship,\r\n  activeCSSClass: string\r\n) => {\r\n  const callback: MutationCallback = (mutations) => {\r\n    for (const { target } of mutations) {\r\n      if (!(target instanceof HTMLElement)) continue;\r\n\r\n      const relationshipData = dotsRelationship.find(({ dot }) => dot === target);\r\n      if (!relationshipData) continue;\r\n\r\n      syncDotsProperties(relationshipData, activeCSSClass);\r\n    }\r\n  };\r\n\r\n  const options: MutationObserverInit = {\r\n    subtree: true,\r\n    attributes: true,\r\n    attributeFilter: ['class'],\r\n  };\r\n\r\n  const observer = new MutationObserver(callback);\r\n  observer.observe(sliderNav, options);\r\n};\r\n", "import { cloneNode, SLIDER_CSS_CLASSES } from '@finsweet/ts-utils';\r\nimport type { SliderElement, SlideElement, SliderDotElement } from '@finsweet/ts-utils';\r\n\r\nimport { ATTRIBUTES, queryElement } from '../utils/constants';\r\nimport { DotsRelationship } from '../utils/types';\r\n\r\nconst {\r\n  remove: { key: removeKey, values: removeValues },\r\n} = ATTRIBUTES;\r\n\r\nconst { slide: slideCSSClass, sliderDot: sliderDotCSSClass } = SLIDER_CSS_CLASSES;\r\n\r\n/**\r\n * Populates all the custom slider dots.\r\n * @param slider The `SliderElement`.\r\n * @param customSliderNav The custom Slider nav element.\r\n *\r\n * @returns A {@link DotsRelationship} array.\r\n */\r\nexport const populateSliderDots = (slider: SliderElement, customSliderNav: HTMLElement): DotsRelationship => {\r\n  const dotsRelationship: DotsRelationship = [];\r\n\r\n  const slides = slider.querySelectorAll<SlideElement>(`.${slideCSSClass}`);\r\n  const dots = slider.querySelectorAll<SliderDotElement>(`.${sliderDotCSSClass}`);\r\n\r\n  slides.forEach((slide, index) => {\r\n    const dot = dots[index];\r\n    if (!dot) return;\r\n\r\n    const customDotElement = queryElement<HTMLElement>('content', { operator: 'prefixed', scope: slide });\r\n    if (!customDotElement) return;\r\n\r\n    const mustRemove = customDotElement.getAttribute(removeKey) === removeValues.true;\r\n\r\n    const customDot = mustRemove ? customDotElement : cloneNode(customDotElement);\r\n\r\n    customSliderNav.appendChild(customDot);\r\n\r\n    dotsRelationship.push({ dot, customDot });\r\n  });\r\n\r\n  return dotsRelationship;\r\n};\r\n", "import { SliderNavElement, SLIDER_CSS_CLASSES } from '@finsweet/ts-utils';\r\n\r\n/**\r\n * Returns a Promise that resolves when all slider dots have been initially populated.\r\n * Helpful when waiting for `cmsslider` to be ready before initing `sliderdots`.\r\n * It has a maximum timeout of 500ms.\r\n *\r\n * @param sliderNav The original `Slider Nav`.\r\n */\r\nexport const waitSliderReady = (sliderNav: SliderNavElement) => {\r\n  return new Promise((resolve) => {\r\n    window.setTimeout(resolve, 500);\r\n\r\n    const callback: MutationCallback = (mutations) => {\r\n      for (const { addedNodes } of mutations) {\r\n        for (const addedNode of addedNodes) {\r\n          const isSliderDot = addedNode instanceof Element && addedNode.closest(`.${SLIDER_CSS_CLASSES.sliderDot}`);\r\n          if (!isSliderDot) continue;\r\n\r\n          resolve(undefined);\r\n          observer.disconnect();\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n    const observer = new MutationObserver(callback);\r\n    observer.observe(sliderNav, { childList: true });\r\n  });\r\n};\r\n", "import { SliderNavElement, SLIDER_CSS_CLASSES } from '@finsweet/ts-utils';\r\nimport { SliderElement } from '@finsweet/ts-utils';\r\n\r\nimport { ATTRIBUTE as CMS_SLIDER_ATTRIBUTE } from '$cms/cmsslider/src/constants';\r\nimport { getInstanceIndex } from '$global/helpers/instances';\r\n\r\nimport { listenClickEvents } from './actions/events';\r\nimport { observeSliderNav } from './actions/observe';\r\nimport { populateSliderDots } from './actions/populate';\r\nimport { syncDotsProperties } from './actions/sync';\r\nimport { waitSliderReady } from './actions/wait';\r\nimport { ATTRIBUTES, DEFAULT_ACTIVE_CSS_CLASS, queryElement } from './utils/constants';\r\n\r\n// Constants\r\nconst {\r\n  element: { key: elementKey },\r\n  remove: { key: removeKey, values: removeValues },\r\n  active: { key: activeKey },\r\n} = ATTRIBUTES;\r\n\r\n/**\r\n * Generates the custom slider dots and inits syncing.\r\n * @param slider The `SliderElement`.\r\n */\r\nexport const createSliderDots = async (slider: SliderElement) => {\r\n  // Get slider elements\r\n  const instanceIndex = getInstanceIndex(slider, elementKey);\r\n\r\n  const sliderNav = slider.querySelector<SliderNavElement>(`.${SLIDER_CSS_CLASSES.sliderNav}`);\r\n  const customSliderNav = queryElement<HTMLElement>('sliderNav', { instanceIndex });\r\n\r\n  if (!sliderNav || !customSliderNav) return;\r\n\r\n  // Make sure CMSSlider has finished (if existing on the page)\r\n  const cmsSliderAttribute = window.fsAttributes[CMS_SLIDER_ATTRIBUTE];\r\n  if (cmsSliderAttribute) await Promise.all([cmsSliderAttribute.loading, waitSliderReady(sliderNav)]);\r\n\r\n  // Get props\r\n  const activeCustomDotCSSClass = slider.getAttribute(activeKey) || DEFAULT_ACTIVE_CSS_CLASS;\r\n\r\n  // Clear the custom slider nav content\r\n  const clearCustomSliderContent = customSliderNav.getAttribute(removeKey) === removeValues.true;\r\n  if (clearCustomSliderContent) customSliderNav.innerHTML = '';\r\n\r\n  // Populate the dots\r\n  const dotsRelationship = populateSliderDots(slider, customSliderNav);\r\n\r\n  // Init sync\r\n  for (const relationshipData of dotsRelationship) syncDotsProperties(relationshipData, activeCustomDotCSSClass);\r\n  observeSliderNav(sliderNav, dotsRelationship, activeCustomDotCSSClass);\r\n  listenClickEvents(customSliderNav, dotsRelationship);\r\n\r\n  return [slider, dotsRelationship];\r\n};\r\n", "import { isNotEmpty, SLIDER_CSS_CLASSES } from '@finsweet/ts-utils';\r\nimport type { SliderElement } from '@finsweet/ts-utils';\r\n\r\nimport { createSliderDots } from './factory';\r\nimport { ATTRIBUTE, getSelector } from './utils/constants';\r\n\r\n/**\r\n * Inits the custom slider dots.\r\n */\r\nexport const init = async (): Promise<NonNullable<Awaited<ReturnType<typeof createSliderDots>>>[]> => {\r\n  const sliders = document.querySelectorAll<SliderElement>(\r\n    `.${SLIDER_CSS_CLASSES.slider}${getSelector('element', 'slider', { operator: 'prefixed' })}`\r\n  );\r\n\r\n  const slidersData = (await Promise.all([...sliders].map(createSliderDots))).filter(isNotEmpty);\r\n\r\n  window.fsAttributes[ATTRIBUTE].resolve?.(slidersData);\r\n\r\n  return slidersData;\r\n};\r\n", "import { assessScript } from '$global/factory/assess';\r\nimport { initAttributes } from '$global/factory/init';\r\n\r\nimport { version } from '../package.json';\r\nimport { init } from './init';\r\nimport { ATTRIBUTE } from './utils/constants';\r\n\r\n/**\r\n * Init\r\n */\r\ninitAttributes();\r\n\r\nwindow.fsAttributes[ATTRIBUTE] ||= {};\r\n\r\nconst { preventsLoad } = assessScript();\r\nconst attribute = window.fsAttributes[ATTRIBUTE];\r\n\r\nattribute.version = version;\r\n\r\nif (preventsLoad) attribute.init = init;\r\nelse {\r\n  window.Webflow ||= [];\r\n  window.Webflow.push(init);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
